/*
 * Created on 22 Dec 2015 ( Time 09:23:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.web.controller;

import java.util.List;
import java.util.Date;
import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

//--- Common classes
import org.trams.webbook.web.common.AbstractController;
import org.trams.webbook.web.common.ApplicationDefine;
import org.trams.webbook.web.common.FileUtils;
import org.trams.webbook.web.common.Pager;
import org.trams.webbook.web.common.Utils;
import org.trams.webbook.web.common.Login;
import org.trams.webbook.bean.jpa.AnnouncementEntity;
import org.trams.webbook.bean.jpa.BookEntity;
import org.trams.webbook.bean.jpa.BookmarkEntity;
import org.trams.webbook.bean.jpa.EpisodeEntity;
import org.trams.webbook.bean.jpa.InterestedBookEntity;
import org.trams.webbook.bean.Announcement;
//--- Entities
import org.trams.webbook.bean.Book;
import org.trams.webbook.bean.Episode;
import org.trams.webbook.bean.User;
import org.trams.webbook.business.service.AnnouncementService;
//--- Services 
import org.trams.webbook.business.service.BookService;
import org.trams.webbook.business.service.BookmarkService;
import org.trams.webbook.business.service.CategoryService;
import org.trams.webbook.business.service.EpisodeService;
import org.trams.webbook.business.service.InterestedBookService;
import org.trams.webbook.business.service.UserService;
import org.trams.webbook.business.service.mapping.BookServiceMapper;
import org.trams.webbook.business.service.mapping.BookmarkServiceMapper;
import org.trams.webbook.business.service.mapping.EpisodeServiceMapper;

/**
 * Spring MVC controller for 'Book' management.
 */
@Controller
@RequestMapping("/my_book")
public class MyBookController extends AbstractController {

	// --- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "book";
	private static final String MAIN_LIST_NAME = "list";

	private static final String TOTAL_PAGE = "pages";

	private static final String CURRENT_PAGE = "pageNumber";

	private static final String LIST_PAGES = "listPages";

	private static final Integer PAGE_SIZE = 10;

	private static String nav = "my_book";

	// --- JSP pages names ( View name in the MVC model )
	private static final String JSP_BOOK_CREATE = "my_book/book_create";
	private static final String JSP_BOOK_EDIT = "my_book/book_edit";
	private static final String JSP_MY_BOOOK = "my_book";
	private static final String JSP_EPISODE_UPLOAD = "my_book/episode_upload";
	private static final String JSP_EPISODE_EDIT = "my_book/episode_edit";
	private static final String JSP_BOOKMARK = "my_book/book_mark";
	private static final String JSP_INTEREST = "my_book/interest_book";
	private static final String JSP_PAGING = "book";
	private static final String JSP_EDIT = "book/edit";
	private static final String JSP_MY_BOOK_DETAIL = "my_book/book_detail";
	private static final String JSP_LOGIN = "redirect:/login";

	// --- Main entity service
	@Resource
	private BookService bookService; // Injected by Spring
	// --- Other service(s)
	@Resource
	private EpisodeService episodeService; // Injected by Spring
	@Resource
	private CategoryService categoryService;
	@Resource
    private BookmarkService bookmarkService; // Injected by Spring
	@Resource
    private BookServiceMapper bookServiceMapper; // Injected by Spring
	@Resource
	private AnnouncementService announcementService;
	@Resource
	private InterestedBookService interestedBookService;
	@Resource
	private UserService userService;
	@Resource
	private EpisodeServiceMapper episodeServiceMapper;
	@Autowired
	ServletContext servletContext;

	// --------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public MyBookController() {
		super(MyBookController.class, MAIN_ENTITY_NAME);
		log("BookController created.");
	}
	//Decription: List all my book
	//Url: 		http://kwebsosul.com/my_book
	@RequestMapping("")
	public String list(@RequestParam(value = "page", defaultValue = "1") Integer page,
			@RequestParam(value = "type", defaultValue = "id") String type,
			@RequestParam(value = "key", defaultValue = "") String key, HttpSession session, Model model) {
		if (Login.checkLogin(session) == "0")
			return JSP_LOGIN;
		User user = new User();
		user = Login.getUserLogin(session);
		Page<BookEntity> listPage = null;
		listPage = bookService.listMyBoook(user.getId(), page, PAGE_SIZE);
		model.addAttribute(MAIN_LIST_NAME, listPage);
		model.addAttribute("key", key);
		model.addAttribute("type", type);
		model.addAttribute("activeMenu", "my_book");
		model.addAttribute("activePage", nav);
		model.addAttribute("pagination_navigator", "/my_book");
		new Pager<BookEntity>(listPage).setSetting(model, "");
		return JSP_MY_BOOOK;
	}
	//Decription: Get detail book in my book page
	//Url: 		http://kwebsosul.com/my_book/book_detail/{id}
	@RequestMapping("/book_detail/{id}")
	public String detail(
			@RequestParam(value = "page1", defaultValue = "1") Integer page_episode,
			@RequestParam(value = "page2", defaultValue = "1") Integer page_announcement,
			@RequestParam(value = "page3", defaultValue = "1") Integer page_temporary,
			@RequestParam(value = "order", defaultValue = "asc") String order,
			@RequestParam(value = "active", defaultValue = "episode") String active,
			@RequestParam(value = "delete_episode", defaultValue = "0") Integer delete_episode,
			@RequestParam(value = "delete_announcement", defaultValue = "0") Integer delete_announcement,
			@RequestParam(value = "delete_temporary", defaultValue = "0") Integer delete_temporary, Model model,
			HttpSession session, @PathVariable("id") Integer id) {
		
		if (Login.checkLogin(session) == "0")
			return JSP_LOGIN;
		User user = Login.getUserLogin(session);
		
		Book book = bookService.findById(id);
		Integer userId = Utils.parseInt(user.getId());
		Integer bookId = Utils.parseInt(book.getUserId());
		if (userId.equals(bookId)) {
			model.addAttribute("active", "episode");
			if (delete_episode > 0) {
				try {
					Episode episode=episodeService.findById(delete_episode);
					if(episode.getIsDelete()==0){
						episodeService.delete(delete_episode);
						if(episode.getTemporarySave()==0){
						episodeService.updateAferDelete_EpisodeNumber(id, episode.getEpisodeNumber());
							Integer totalEpisode=episodeService.totalEpisode_ByBookId(id);
							book.setEpisodeNumber(totalEpisode);
							Integer totalEpisodeComplete = episodeService.totalEpisodeComplete(id);
							if(totalEpisodeComplete>0){
								book.setComeplete(1);
							}else{
								book.setComeplete(0);
							}
							
						}else{
							book.setComeplete(0);
						}
						
						bookService.update(book);
						active="episode";
					}
					
				} catch (Exception e) {
					System.out.println(e);
				}
				
			}
			if (delete_announcement > 0) {
				Announcement announcement = announcementService.findById(delete_announcement);
				announcement.setIsDelete(1);
				announcementService.update(announcement);
			}
			if (delete_temporary > 0) {
				Episode episode = episodeService.findById(delete_temporary);
				episode.setIsDelete(1);
				episodeService.update(episode);
			}
			PageRequest pageable = null;
			if (order.equalsIgnoreCase("desc")) {
				pageable = new PageRequest(page_episode - 1, PAGE_SIZE, new Sort(new Order(Direction.DESC, "episodeNumber")));
				model.addAttribute("order", "desc");
			} else {
				pageable = new PageRequest(page_episode - 1, PAGE_SIZE, new Sort(new Order(Direction.ASC, "episodeNumber")));
				model.addAttribute("order", "asc");
			}
			model.addAttribute("active", active);
			session.setAttribute("book_episode_upload_id", book.getId());
			Page<EpisodeEntity> listEpisode = episodeService.listPagingByBookId(id, pageable);
			Page<AnnouncementEntity> listAnnouncement=announcementService.listPagingByBookId(id, page_announcement, PAGE_SIZE);
			Page<EpisodeEntity> listEpisodeTemporary = episodeService.listPagingByBookId_Temporary_Save(id,
					page_episode, PAGE_SIZE);
			Page<AnnouncementEntity> announcement=announcementService.listPagingByBookId(id, 1, 1);
			if(announcement.getTotalElements()>0){
				model.addAttribute("a", announcement.getContent().get(0));
			}
			new Pager<EpisodeEntity>(listEpisode).setSetting(model, "");
			new Pager<AnnouncementEntity>(listAnnouncement).setSettingSecondList(model, "");
			new Pager<EpisodeEntity>(listEpisodeTemporary).setSettingThirdList(model, "");
			model.addAttribute("pagination_navigator", "/my_book/book_detail/" + id);
			model.addAttribute("activeMenu", "my_book");
			model.addAttribute("page1", page_episode);
			model.addAttribute("page2", page_announcement);
			model.addAttribute("page3", page_temporary);
			model.addAttribute("book", book);
			model.addAttribute("nickname", user.getNickname());
			return JSP_MY_BOOK_DETAIL;
		} else {
			return "redirect:/my_book";
		}

	}
	
	//Decription: Delete an episode
	//Url: 		http://kwebsosul.com/my_book/delete_episode/{id}
	@RequestMapping("/delete_episode/{id}")
	public String delete_episode(
			@RequestParam(value = "page1", defaultValue = "1") Integer page_episode,
			@RequestParam(value = "page2", defaultValue = "1") Integer page_announcement,
			@RequestParam(value = "page3", defaultValue = "1") Integer page_temporary,
			@RequestParam(value = "order", defaultValue = "asc") String order,
			@RequestParam(value = "active", defaultValue = "episode") String active,
			@RequestParam(value = "delete_episode", defaultValue = "0") Integer delete_episode,
			@RequestParam(value = "delete_announcement", defaultValue = "0") Integer delete_announcement,
			@RequestParam(value = "delete_temporary", defaultValue = "0") Integer delete_temporary, Model model,
			HttpSession session, @PathVariable("id") Integer id) {
		
		if (Login.checkLogin(session) == "0")
			return JSP_LOGIN;
		User user = Login.getUserLogin(session);
		
		Book book = bookService.findById(id);
		Integer userId = Utils.parseInt(user.getId());
		Integer bookId = Utils.parseInt(book.getUserId());
		if (userId == bookId) {
			model.addAttribute("active", "episode");
			if (delete_episode > 0) {
				try {
					Episode episode=episodeService.findById(delete_episode);
					if(episode.getIsDelete()==0){
						if(book.getEpisodeNumber()>0){
							book.setEpisodeNumber(book.getEpisodeNumber() - 1);
						}
						bookService.update(book);
						episodeService.delete(delete_episode);
						episodeService.updateAferDelete_EpisodeNumber(id, episode.getEpisodeNumber());
					}
					
				} catch (Exception e) {
					System.out.println(e);
				}
				
			}
			if (delete_announcement > 0) {
				Announcement announcement = announcementService.findById(delete_announcement);
				announcement.setIsDelete(1);
				announcementService.update(announcement);
			}
			if (delete_temporary > 0) {
				Episode episode = episodeService.findById(delete_temporary);
				episode.setIsDelete(1);
				book.setEpisodeNumber(book.getEpisodeNumber()-1);
				bookService.update(book);
				episodeService.update(episode);
			}
			PageRequest pageable = null;
			if (order.equalsIgnoreCase("desc")) {
				pageable = new PageRequest(page_episode - 1, PAGE_SIZE, new Sort(new Order(Direction.DESC, "episodeNumber")));
				model.addAttribute("order", "desc");
			} else {
				pageable = new PageRequest(page_episode - 1, PAGE_SIZE, new Sort(new Order(Direction.ASC, "episodeNumber")));
				model.addAttribute("order", "asc");
			}
			model.addAttribute("active", active);
			session.setAttribute("book_episode_upload_id", book.getId());
			Page<EpisodeEntity> listEpisode = episodeService.listPagingByBookId(id, pageable);
			Page<AnnouncementEntity> listAnnouncement=announcementService.listPagingByBookId(id, page_announcement, PAGE_SIZE);
			Page<EpisodeEntity> listEpisodeTemporary = episodeService.listPagingByBookId_Temporary_Save(id,
					page_episode, PAGE_SIZE);
			Page<AnnouncementEntity> announcement=announcementService.listPagingByBookId(id, 1, 1);
			if(announcement.getTotalElements()>0){
				model.addAttribute("a", announcement.getContent().get(0));
			}
			new Pager<EpisodeEntity>(listEpisode).setSetting(model, "");
			new Pager<AnnouncementEntity>(listAnnouncement).setSettingSecondList(model, "");
			new Pager<EpisodeEntity>(listEpisodeTemporary).setSettingThirdList(model, "");
			model.addAttribute("pagination_navigator", "/my_book/book_detail/" + id);
			model.addAttribute("activeMenu", "my_book");
			model.addAttribute("page1", page_episode);
			model.addAttribute("page2", page_announcement);
			model.addAttribute("page3", page_temporary);
			model.addAttribute("book", book);
			model.addAttribute("nickname", user.getNickname());
			return JSP_MY_BOOK_DETAIL;
		} else {
			return "redirect:/my_book";
		}

	}
	
	
	@RequestMapping(value = "/edit/{id}")
	public String update(@RequestParam(value = "edit", defaultValue = "0") Integer edit, HttpSession session,
			@PathVariable("id") Integer id, Model model) {
		if (Login.checkLogin(session) == "0")
			return JSP_LOGIN;
		Book book = bookService.findById(id);
		try {
			if (edit > 0) {
				book = bookService.update(book);
				book.setUpdateDate(new Date());

			}
			model.addAttribute("item", book);
			model.addAttribute("activeMenu", "my_book");
			return JSP_EDIT;
		} catch (Exception e) {
			return JSP_MY_BOOOK;
		}
	}
	//Decription: Create book
	//Url: 		http://kwebsosul.com/my_book/book_create
	@RequestMapping(value = "/book_create", method = RequestMethod.GET) 
	public String createGET(@RequestParam(value = "create", defaultValue = "0") Integer create, HttpSession session,
			Model model) {
		log("Action 'create'");
		if (Login.checkLogin(session) == "0")
			return JSP_LOGIN;
		User user = Login.getUserLogin(session);
		user=userService.findById(user.getId());
		Integer yearBirth=user.getDayOfBirth().getYear();
		Date date=new Date();
		Integer now= date.getYear();
		Integer age= now-yearBirth;
		System.out.println(age);
		if(age<15){
			model.addAttribute("age", 4);
		}else if(age>=15 && age<20){
			model.addAttribute("age", 3);
		}else if(age>=20 && age<25){
			model.addAttribute("age", 2);
		}else{
			model.addAttribute("age", 1);
		}
		model.addAttribute("author_level", user.getAuthorLevel());
		model.addAttribute("activeMenu", "my_book");
		model.addAttribute("genre_list", categoryService.findByGroupId(2));
		model.addAttribute("age_group_list", categoryService.findByGroupId(1));
		model.addAttribute("league_list", categoryService.findByGroupId(10));
		model.addAttribute("keyword_1", categoryService.findByGroupId(6));
		model.addAttribute("keyword_2", categoryService.findByGroupId(7));
		model.addAttribute("keyword_3", categoryService.findByGroupId(8));
		model.addAttribute("keyword_4", categoryService.findByGroupId(9));
		model.addAttribute("image_default", categoryService.findByGroupId(11));
		return JSP_BOOK_CREATE;
	}

	@RequestMapping(value = "/book_create", method = RequestMethod.POST) 
	public String createPOST(@RequestParam(value = "title", defaultValue = "") String title,
			@RequestParam(value = "genre", defaultValue = "") String genre,
			@RequestParam(value = "adult", defaultValue = "") String adult,
			@RequestParam(value = "age_group", defaultValue = "") String age_group,
			@RequestParam(value = "day_of_week", defaultValue = "") String[] day_of_week,
			@RequestParam(value = "introduce", defaultValue = "") String introduce,
			@RequestParam(value = "keyword1", defaultValue = "") String keyword1,
			@RequestParam(value = "keyword2", defaultValue = "") String keyword2,
			@RequestParam(value = "keyword3", defaultValue = "") String keyword3,
			@RequestParam(value = "keyword4", defaultValue = "") String keyword4,
			@RequestParam(value = "basic_image", defaultValue = "") Integer basic_image,
			@RequestParam(value = "basic_url", defaultValue = "") String basic_url,
			@RequestParam(value = "file") MultipartFile file, HttpSession session, Model model) {
		log("Action 'create'");
		if (Login.checkLogin(session) == "0")
			return JSP_LOGIN;
		model.addAttribute("activeMenu", "my_book");
		try {
			if(title!=null && genre!=null && day_of_week!=null){
			User user = Login.getUserLogin(session);
			user=userService.findById(user.getId());
			Book book = new Book();
			book.setId(0);
			book.setUserId(user.getId());
			book.setTitle(title);
			try {
				String[] genre_split = genre.split("@");
				book.setGenreId(Utils.parseInt(genre_split[0]));
				book.setGenreName(genre_split[1]);
			} catch (Exception e) {
				System.out.println(e);
			}
			
			if(adult==null){
				adult="일반";
			}
			book.setAdult(adult);
			user= userService.findById(user.getId());
			if(user.getAuthorLevel()==ApplicationDefine.AUTHOR_OFFICAL_AUTHOR_LEVEL){
				book.setLeagueId(ApplicationDefine.BOOK_OFFICAL_AUTHOR_LEVEL);
				book.setLeagueName(ApplicationDefine.BOOK_OFFICAL_AUTHOR_NAME);
			}else{
				book.setLeagueId(ApplicationDefine.BOOK_CHALLENGE_LEAGUE_LEVEL);
				book.setLeagueName(ApplicationDefine.BOOK_CHALLENGE_LEAGUE_NAME);
			}
			try {
				String[] age_group_split = age_group.split("@");
				book.setAgeGroupId(Utils.parseInt(age_group_split[0]));
				book.setAgeGroupName(age_group_split[1]);
			} catch (Exception e) {
				// TODO: handle exception
			}
			book.setAgeGroupName("");
			book.setEpisodeNumber(0);
			book.setHitsNo(0);
			book.setInterestedBookNo(0);
			book.setRecommendationNo(0);
			book.setEpisodeNumber(0);
			String str = "";
			if (day_of_week.length > 0) {
				for (int i = 0; i < day_of_week.length; i++) {
					if (i == 0) {
						str += day_of_week[i];
					} else {
						str += ", " + day_of_week[i];
					}
				}
			}
			if (basic_image!=null && basic_image != 1) {
				if (file.getSize() > 0) {
					String path = FileUtils.saveFileOrigin(file, servletContext);
					book.setCoverImage(path);
				}
				
			} else {
				book.setCoverImage(basic_url);
			}
			book.setDayOfWeek(str);
			book.setIntroduce(introduce);
			book.setKeyword1(keyword1);
			book.setKeyword2(keyword2);
			book.setKeyword3(keyword3);
			book.setKeyword4(keyword4);
			book.setUpdateDate(new Date());
			book.setCreateDate(new Date());
			book.setIsDelete(0);
			book.setComeplete(0);
			book.setHitsWeekly(0);
			book.setInterestedWeekly(0);
			book.setRecommendationWeekly(0);
			book.setHitsNo(0);
			book.setRecommendationNo(0);	
			book.setInterestedBookNo(0);
			book.setUpdateDate(new Date());
			book.setCreateDate(new Date());
			try {
				Book create = bookService.create(book);
				session.setAttribute("book_episode_upload_id", create.getId());
				User u = Login.getUserLogin(session);
				session.setAttribute("author_level", user.getAuthorLevel());
				return "redirect:/my_book/episode_upload/"+create.getId();
			} catch (Exception e) {
				user=userService.findById(user.getId());
				Integer yearBirth=user.getDayOfBirth().getYear();
				Date date=new Date();
				Integer now= date.getYear();
				Integer age= now-yearBirth;
				System.out.println(age);
				if(age<15){
					model.addAttribute("age", 4);
				}else if(age>=15 && age<20){
					model.addAttribute("age", 3);
				}else if(age>=20 && age<25){
					model.addAttribute("age", 2);
				}else{
					model.addAttribute("age", 1);
				}
				model.addAttribute("author_level", user.getAuthorLevel());
				model.addAttribute("activeMenu", "my_book");
				model.addAttribute("genre_list", categoryService.findByGroupId(2));
				model.addAttribute("age_group_list", categoryService.findByGroupId(1));
				model.addAttribute("league_list", categoryService.findByGroupId(10));
				model.addAttribute("keyword_1", categoryService.findByGroupId(6));
				model.addAttribute("keyword_2", categoryService.findByGroupId(7));
				model.addAttribute("keyword_3", categoryService.findByGroupId(8));
				model.addAttribute("keyword_4", categoryService.findByGroupId(9));
				model.addAttribute("image_default", categoryService.findByGroupId(11));
				model.addAttribute("b", book);
				model.addAttribute("content_error", 1);
				System.err.println(">>> Error in create book: "+e);
			}
			return JSP_BOOK_CREATE;
			
			}else{
				return JSP_BOOK_CREATE;
			}
			
		} catch (Exception e) {
			
			e.printStackTrace();
			return "redirect:/my_book";
		}
	}
	
	//Decription: Edit book in my book
		//Url: 		http://kwebsosul.com/my_book/book_edit/{id}
	@RequestMapping(value = "/book_edit/{id}", method = RequestMethod.GET) 
	public String editGET(
			@RequestParam(value = "create", defaultValue = "0") Integer create,
			@PathVariable("id") Integer id,
			HttpSession session,
			Model model) {
		log("Action 'create'");
		if (Login.checkLogin(session) == "0")
			return JSP_LOGIN;
		User user=Login.getUserLogin(session);
		user=userService.findById(user.getId());
		BookEntity bookEntity =bookService.findOne(id);
		Integer yearBirth=user.getDayOfBirth().getYear();
		Date date=new Date();
		Integer now= date.getYear();
		Integer age= now-yearBirth;
		System.out.println(age);
		if(age<15){
			model.addAttribute("age", 4);
		}else if(age>=15 && age<20){
			model.addAttribute("age", 3);
		}else if(age>=20 && age<25){
			model.addAttribute("age", 2);
		}else{
			model.addAttribute("age", 1);
		}
		
		model.addAttribute("author_level", user.getAuthorLevel());
		model.addAttribute("b", bookEntity);
		model.addAttribute("activeMenu", "my_book");
		model.addAttribute("genre_list", categoryService.findByGroupId(2));
		model.addAttribute("age_group_list", categoryService.findByGroupId(1));
		model.addAttribute("league_list", categoryService.findByGroupId(10));
		model.addAttribute("keyword_1", categoryService.findByGroupId(6));
		model.addAttribute("keyword_2", categoryService.findByGroupId(7));
		model.addAttribute("keyword_3", categoryService.findByGroupId(8));
		model.addAttribute("keyword_4", categoryService.findByGroupId(9));
		model.addAttribute("image_default", categoryService.findByGroupId(11));
		return JSP_BOOK_EDIT;
	}
	//Decription: Edit book
	@RequestMapping(value = "/book_edit/{id}", method = RequestMethod.POST) 
	public String editPOST(@RequestParam(value = "title", defaultValue = "") String title,
			@RequestParam(value = "genre", defaultValue = "") String genre,
			@RequestParam(value = "adult", defaultValue = "") String adult,
			@RequestParam(value = "age_group", defaultValue = "") String age_group,
			@RequestParam(value = "day_of_week", defaultValue = "") String[] day_of_week,
			@RequestParam(value = "introduce", defaultValue = "") String introduce,
			@RequestParam(value = "keyword1", defaultValue = "") String keyword1,
			@RequestParam(value = "keyword1", defaultValue = "") String keyword2,
			@RequestParam(value = "keyword3", defaultValue = "") String keyword3,
			@RequestParam(value = "keyword4", defaultValue = "") String keyword4,
			@RequestParam(value = "basic_image", defaultValue = "") Integer basic_image,
			@RequestParam(value = "basic_url", defaultValue = "") String basic_url,
			@PathVariable("id") Integer id,
			@RequestParam(value = "file") MultipartFile file, HttpSession session, Model model) {
		log("Action 'create'");
		if (Login.checkLogin(session) == "0")
			return JSP_LOGIN;
		model.addAttribute("activeMenu", "my_book");
		Book book = bookService.findById(id);
		try {
			User user = Login.getUserLogin(session);
			
			book.setUserId(user.getId());
			book.setTitle(title);
			try {
				String[] genre_split = genre.split("@");
				book.setGenreId(Utils.parseInt(genre_split[0]));
				book.setGenreName(genre_split[1]);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			book.setAdult(adult);
			try {
				String[] age_group_split = age_group.split("@");
				book.setAgeGroupId(Utils.parseInt(age_group_split[0]));
				book.setAgeGroupName(age_group_split[1]);
			} catch (Exception e) {
				// TODO: handle exception
			}
			
			
			String str = "";
			if (day_of_week.length > 0) {
				for (int i = 0; i < day_of_week.length; i++) {
					if (i == 0) {
						str += day_of_week[i];
					} else {
						str += ", " + day_of_week[i];
					}
				}
			}
			if ( basic_image!=null && basic_image == 1) {
				book.setCoverImage(basic_url);
			} else {
				if (file.getSize() > 0) {
					String path = FileUtils.saveFileOrigin(file, servletContext);
					book.setCoverImage(path);
				}
			}
			book.setDayOfWeek(str);
			book.setIntroduce(introduce);
			book.setKeyword1(keyword1);
			book.setKeyword2(keyword2);
			book.setKeyword3(keyword3);
			book.setKeyword4(keyword4);
			book.setIsDelete(0);
			book.setComeplete(0);
			book.setUpdateDate(new Date());
			Book edit = bookService.update(book);
			
			return "redirect:/my_book/book_detail/"+book.getId();
		} catch (Exception e) {
			model.addAttribute("content_error", 1);
			User user = Login.getUserLogin(session);
			user=userService.findById(user.getId());
			BookEntity bookEntity =bookService.findOne(id);
			bookServiceMapper.mapBookToBookEntity(book, bookEntity);;;
			Integer yearBirth=user.getDayOfBirth().getYear();
			Date date=new Date();
			Integer now= date.getYear();
			Integer age= now-yearBirth;
			System.out.println(age);
			if(age<15){
				model.addAttribute("age", 4);
			}else if(age>=15 && age<20){
				model.addAttribute("age", 3);
			}else if(age>=20 && age<25){
				model.addAttribute("age", 2);
			}else{
				model.addAttribute("age", 1);
			}
			
			model.addAttribute("author_level", user.getAuthorLevel());
			model.addAttribute("b", bookEntity);
			model.addAttribute("activeMenu", "my_book");
			model.addAttribute("genre_list", categoryService.findByGroupId(2));
			model.addAttribute("age_group_list", categoryService.findByGroupId(1));
			model.addAttribute("league_list", categoryService.findByGroupId(10));
			model.addAttribute("keyword_1", categoryService.findByGroupId(6));
			model.addAttribute("keyword_2", categoryService.findByGroupId(7));
			model.addAttribute("keyword_3", categoryService.findByGroupId(8));
			model.addAttribute("keyword_4", categoryService.findByGroupId(9));
			model.addAttribute("image_default", categoryService.findByGroupId(11));
			return JSP_BOOK_EDIT;
		}
	}
	
	//Decription: Create new episode
	//Url:
	@RequestMapping(value = "/episode_upload/{book_id}")
	public String episode_upload(@RequestParam(value = "price", defaultValue = "") Integer price,
			@RequestParam(value = "complete", defaultValue = "0") Integer complete,
			@PathVariable("book_id") Integer book_id,
			@RequestParam(value = "title", defaultValue = "") String title,
			@RequestParam(value = "content", defaultValue = "") String content,
			@RequestParam(value = "epilogue", defaultValue = "") String epilogue,
			@RequestParam(value = "temporary_save", defaultValue = "0") Integer temporary_save,
			@RequestParam(value = "cancel", defaultValue = "0") Integer cancel,
			@RequestParam(value = "upload", defaultValue = "0") Integer upload, Model model, HttpSession session) {

		if (Login.checkLogin(session) == "0")
			return JSP_LOGIN;
		Book b = bookService.findById(book_id);
		if (b == null) {
			return "redirect:/my_book";
		}
		User user=Login.getUserLogin(session);
		user=userService.findById(user.getId());
		model.addAttribute("content_error", 0);
		model.addAttribute("author_level", user.getAuthorLevel());
		model.addAttribute("activeMenu", "my_book");
		model.addAttribute("book", b);
		model.addAttribute("number", b.getEpisodeNumber() + 1);
		Episode e = new Episode();
		try {
			
			if (temporary_save > 0) {
				e.setId(null);
				e.setBookId(b.getId());
				e.setPrice(price);
				e.setTitle(title);
				e.setContent(content);
				e.setEpilogue(epilogue);
				e.setComplete(0);
				e.setTemporarySave(0);
				e.setViewNo(0);
				e.setReviewNo(0);
				e.setRecommondationNo(0);
				e.setHitsNo(0);
				e.setIsDelete(0);
				e.setIsShow(0);
				e.setRatio(50);
				e.setTemporarySave(1);
				e.setCreateDate(new Date());
				e.setUpdateDate(new Date());
				Episode ok = episodeService.create(e);
				model.addAttribute("temporary", 1);
				model.addAttribute("e", e);
				return "redirect:/my_book/book_detail/" + b.getId()+"?active=temporary";
			} else if (upload > 0) {
				try {
					e.setId(null);
					e.setBookId(b.getId());
					if ((b.getEpisodeNumber() + 1) > 6) {
						e.setPrice(price);
					} else {
						e.setPrice(0);
					}

					e.setTitle(title);
					e.setContent(content);
					e.setEpilogue(epilogue);
					e.setComplete(complete);
					e.setHitsNo(0);
					e.setRecommondationNo(0);
					e.setReviewNo(0);
					e.setViewNo(0);
					e.setIsDelete(0);
					e.setCreateDate(new Date());
					e.setUpdateDate(new Date());
					e.setRatio(50);
					e.setSalesNumber(0);
					e.setAmount(0.0);
					e.setIsShow(1);
					e.setTemporarySave(0);
					e.setEpisodeNumber(b.getEpisodeNumber() + 1);
					Episode ok = episodeService.create(e);
					if(complete==1){
						if(b.getComeplete()==0){
							b.setComeplete(1);
						}
					}
					Integer totalEpisode=episodeService.totalEpisode_ByBookId(book_id);
					b.setEpisodeNumber(totalEpisode);
					bookService.update(b);
				} catch (Exception e2) {
					// TODO: handle exception
				}
				
				
				return "redirect:/my_book/book_detail/" + b.getId()+"?active=episode";
			} else if (cancel == 1) {
				
				e.setId(null);
				e.setBookId(b.getId());
				e.setPrice(price);
				e.setTitle(title);
				e.setContent(content);
				e.setEpilogue(epilogue);
				e.setComplete(0);
				e.setIsDelete(0);
				e.setIsShow(0);
				e.setViewNo(0);
				e.setTemporarySave(1);
				e.setCreateDate(new Date());
				e.setUpdateDate(new Date());
				e.setRatio(50);
				e.setTemporarySave(1);
				e.setReviewNo(0);
				e.setRecommondationNo(0);
				e.setHitsNo(0);
				Episode ok = episodeService.create(e);
				model.addAttribute("temporary", 1);
				model.addAttribute("e", e);
				return "redirect:/my_book/book_detail/" + b.getId()+"?active=temporary";
			}
			return JSP_EPISODE_UPLOAD;

		} catch (Exception ex) {
			model.addAttribute("e", e);
			model.addAttribute("content_error", 1);
			System.out.println(ex);
			return JSP_EPISODE_UPLOAD;

		}

	}
	//Decription: Create edit episode
	//Url: 		http://kwebsosul.com/my_book/episode_edit/{id}
	@RequestMapping(value = "/episode_edit/{id}")
	public String episode_edit(
			@RequestParam(value = "price", defaultValue = "0") Integer price,
			@RequestParam(value = "complete", defaultValue = "0") Integer complete,
			@RequestParam(value = "title", defaultValue = "") String title,
			@RequestParam(value = "content", defaultValue = "") String content,
			@RequestParam(value = "epilogue", defaultValue = "") String epilogue,
			@RequestParam(value = "root", defaultValue = "") String root,
			@RequestParam(value = "temporary_save", defaultValue = "0") Integer temporary_save,
			@RequestParam(value = "cancel", defaultValue = "0") Integer cancel,
			@RequestParam(value = "upload", defaultValue = "0") Integer upload, @PathVariable("id") Integer id,
			Model model, HttpSession session) {

		if (Login.checkLogin(session) == "0")
			return JSP_LOGIN;
		User user=Login.getUserLogin(session);
		user=userService.findById(user.getId());
		model.addAttribute("author_level", user.getAuthorLevel());
		EpisodeEntity entity = episodeService.findOne(id);
		Episode e=episodeServiceMapper.mapEpisodeEntityToEpisode(entity);
		Book book=bookService.findById(e.getBookId());
		model.addAttribute("activeMenu", "my_book");
		model.addAttribute("e", entity);
		
		try {
//			if(title!=null && title.contains("󰊱")){
//				title= title.replace("󰊱", "");
//			}
//			if(content!=null && content.contains("󰊱")){
//				content= content.replace("󰊱", "");
//			}
//			if(epilogue!=null && epilogue.contains("󰊱")){
//				epilogue= epilogue.replace("󰊱", "");
//			}
			if (temporary_save > 0) {
				e.setPrice(price);
				e.setTitle(title);
				e.setContent(content);
				e.setEpilogue(epilogue);
				e.setComplete(complete);
				e.setUpdateDate(new Date());
				e.setTemporarySave(1);
				e.setEpisodeNumber(1);
				Episode ok = episodeService.update(e);
				model.addAttribute("temporary", 1);
				return "redirect:/my_book/book_detail/" + e.getBookId()+"?active=temporary";
			} else if (upload > 0) {
				if(e.getTemporarySave()==1){
					e.setEpisodeNumber(book.getEpisodeNumber()+1);
					book.setEpisodeNumber(book.getEpisodeNumber()+1);
					e.setTemporarySave(0);
					book=bookService.update(book);
				}
				e.setPrice(price);
				e.setTitle(title);
				e.setContent(content);
				e.setEpilogue(epilogue);
				e.setComplete(complete);
				e.setUpdateDate(new Date());
				e.setIsShow(1);
				Episode ok = episodeService.update(e);
				if(complete==1 && book.getComeplete()==0 ){
					if(book.getComeplete()==0){
						book.setComeplete(1);
						bookService.update(book);
					}
				}else{
					Integer total=episodeService.totalEpisodeComplete(book.getId());
					if(total==0){
						book.setComeplete(0);
						bookService.update(book);
					}
				}
				return "redirect:/my_book/book_detail/" + e.getBookId()+"?active=episode";
			} else if (cancel == 1) {
				e.setPrice(price);
				e.setTitle(title);
				e.setContent(content);
				e.setEpilogue(epilogue);
				e.setComplete(0);
				e.setIsDelete(0);
				e.setIsShow(0);
				e.setTemporarySave(1);
				e.setCreateDate(new Date());
				e.setUpdateDate(new Date());
				Episode ok = episodeService.update(e);
				model.addAttribute("temporary", 1);
				model.addAttribute("e", e);
				return "redirect:/my_book/book_detail/" + e.getBookId()+"?active=temporary";
			}
			return JSP_EPISODE_EDIT;

		} catch (Exception ex) {
			entity.setTitle(title);
			entity.setContent(content);
			entity.setComplete(complete);
			entity.setEpilogue(epilogue);
			model.addAttribute("e", entity);
			model.addAttribute("content_error", 1);
			System.out.println(ex);
			return JSP_EPISODE_EDIT;

		}

	}
	//Decription: List all book in bookmark
	//Url: 		http://kwebsosul.com/my_book/book_mark
	@RequestMapping("/book_mark")
	public String detail(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="delete_all",defaultValue="0") Integer delete_all,
			@RequestParam(value="delete",defaultValue="0") Integer delete,
			HttpSession session,
			Model model) {
		if(Login.checkLogin(session)=="0")
			return JSP_LOGIN;
		List<BookmarkEntity> listPage = null;
		User user = Login.getUserLogin(session);
		if(delete_all>0){
			bookmarkService.deleteBy_UserId(user.getId());
		}
		if(delete>0){
			bookmarkService.delete(delete);
		}
		listPage=bookmarkService.findBy_UserId(user.getId());
		model.addAttribute("total", listPage.size());	
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("activePage", nav);
		model.addAttribute("activeMenu", "book_mark");
		return JSP_BOOKMARK;
	}
	//Decription: List all book in bookmark
	//Url: 		http://kwebsosul.com/my_book/book_mark
	@RequestMapping("/interest_book")
	public String interest_book(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="delete_all",defaultValue="0") Integer delete_all,
			@RequestParam(value="delete",defaultValue="0") Integer delete,
			HttpSession session,
			Model model) {
		if(Login.checkLogin(session)=="0")
			return JSP_LOGIN;
		List<InterestedBookEntity> listPage = null;
		User user = Login.getUserLogin(session);
		if(delete_all>0){
			interestedBookService.deleteBy_UserId(user.getId());
		}
		if(delete>0){
			interestedBookService.delete(delete);
		}
		listPage=interestedBookService.findBy_UserId(user.getId());
		model.addAttribute("total", listPage.size());	
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("activePage", nav);
		model.addAttribute("activeMenu", "interest_book");
		return JSP_INTEREST;
	}
	
	

	
	
}
