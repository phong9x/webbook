/*
 * Created on 22 Dec 2015 ( Time 09:23:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.web.controller;

import java.util.List;
import java.util.ArrayList;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

//--- Common classes
import org.trams.webbook.web.common.AbstractController;
import org.trams.webbook.web.common.ApplicationDefine;
import org.trams.webbook.web.common.FormMode;
import org.trams.webbook.web.common.Pager;
import org.trams.webbook.web.common.Login;
import org.trams.webbook.web.common.Message;
import org.trams.webbook.web.common.MessageType;
import org.trams.webbook.bean.jpa.BookmarkEntity;
import org.trams.webbook.bean.jpa.CategoryEntity;
import org.trams.webbook.bean.jpa.CommentEntity;
import org.trams.webbook.bean.jpa.CouponUsedEntity;
import org.trams.webbook.bean.jpa.EpisodeEntity;
import org.trams.webbook.bean.jpa.InterestedBookEntity;
import org.trams.webbook.bean.jpa.LikeHistoryEntity;
import org.trams.webbook.bean.Book;
import org.trams.webbook.bean.BookViewing;
import org.trams.webbook.bean.Bookmark;
import org.trams.webbook.bean.Comment;
import org.trams.webbook.bean.CouponUsed;
//--- Entities
import org.trams.webbook.bean.Episode;
import org.trams.webbook.bean.Post;
import org.trams.webbook.bean.Report;
import org.trams.webbook.bean.User;
import org.trams.webbook.business.service.BookService;
import org.trams.webbook.business.service.BookmarkService;
import org.trams.webbook.business.service.CategoryService;
import org.trams.webbook.business.service.CommentService;
import org.trams.webbook.business.service.CouponUsedService;
//--- Services 
import org.trams.webbook.business.service.EpisodeService;
import org.trams.webbook.business.service.InterestedBookService;
import org.trams.webbook.business.service.LikeHistoryService;
import org.trams.webbook.business.service.ReportService;
import org.trams.webbook.business.service.UserService;
import org.trams.webbook.business.service.mapping.EpisodeServiceMapper;

/**
 * Spring MVC controller for 'Episode' management.
 */
@Controller
@RequestMapping("/episode")
public class EpisodeController extends AbstractController {

	// --- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "episode";
	private static final String MAIN_LIST_NAME = "list";

	private static final String TOTAL_PAGE = "pages";

	private static final String CURRENT_PAGE = "pageNumber";

	private static final String LIST_PAGES = "listPages";

	private static final Integer PAGE_SIZE = 15;

	private static String nav = "episode";

	// --- JSP pages names ( View name in the MVC model )
	private static final String JSP_CREATE = "episode/create";
	private static final String JSP_LIST = "episode/list";
	private static final String JSP_PAGING = "episode";
	private static final String JSP_EDIT = "episode/edit";
	private static final String JSP_DETAIL = "episode/detail";
	private static final String JSP_LOGIN = "redirect:/login";

	// --- Main entity service
	@Resource
	private EpisodeService episodeService; // Injected by Spring
	@Resource
	private CouponUsedService couponUsedService;
	@Resource
	private UserService userService;
	@Resource
	private BookmarkService bookmarkService;
	@Resource
	private LikeHistoryService likeHistoryService;
	@Resource
	private InterestedBookService interestedBookService;
	@Resource
	private CommentService commentService;
	@Resource
	private ReportService reportService;
	@Resource
	private CategoryService categoryService;
	@Resource
	private BookService bookService;
	@Resource
	private EpisodeServiceMapper episodeServiceMapper;
	// --- Other service(s)

	// --------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public EpisodeController() {
		super(EpisodeController.class, MAIN_ENTITY_NAME);
		log("EpisodeController created.");
	}

	@RequestMapping("/list")
	public String list(@RequestParam(value = "page", defaultValue = "1") Integer page,
			@RequestParam(value = "type", defaultValue = "id") String type,
			@RequestParam(value = "key", defaultValue = "") String key, HttpSession session, Model model) {
		if (Login.checkLogin(session) == "0")
			return JSP_LOGIN;
		Page<EpisodeEntity> listPage = null;
		listPage = episodeService.findAll(page);
		model.addAttribute(MAIN_LIST_NAME, listPage);
		model.addAttribute("key", key);
		model.addAttribute("type", type);
		model.addAttribute("activePage", nav);
		model.addAttribute("pagination_navigator", "/episode/list");
		new Pager<EpisodeEntity>(listPage).setSetting(model, "type=" + type + "&amp;key=" + key + "&amp;");
		return JSP_LIST;
	}

	
	
	
	//Decription:get next or previous episode number when  click next or previous button in episode detail page
	//Url: 		http://kwebsosul.com/episode/detail/32
	@RequestMapping("/detail_number/{id}")
	public String detail(
			@RequestParam(value = "next", defaultValue = "0") Integer next,
			@RequestParam(value = "pre", defaultValue = "0") Integer pre,
			@RequestParam(value = "episode_pay_id", defaultValue = "0") Integer episode_pay_id,
			@RequestParam(value = "delete_comment", defaultValue = "0") Integer delete_comment,
			@RequestParam(value="add_comment",defaultValue="0") Integer add_comment,
			@RequestParam(value="content",defaultValue="") String content,
			@RequestParam(value="book_id",defaultValue="0") Integer book_id,
			@RequestParam(value = "price", defaultValue = "0") Integer price, Model model, HttpSession session,
			@PathVariable("id") Integer id) {
		if (Login.checkLogin(session) == "0")
			return JSP_LOGIN;
		EpisodeEntity episode;
		Book book=bookService.findById(book_id);
		if(next>0 || pre>0){
			if(next>0 && next<=book.getEpisodeNumber()){
				while(next>0 && next<=book.getEpisodeNumber()){
					episode = episodeService.findByEpisodeNumber(next,book_id);
					if(episode!=null){
						return "redirect:/episode/detail/"+episode.getId();
					}
					next++;
				}
				return "redirect:/episode/detail/"+id;
			}else{
				if(pre>0 && pre<=book.getEpisodeNumber()){
					while(pre>0 && pre<=book.getEpisodeNumber()){
						episode = episodeService.findByEpisodeNumber(pre,book_id);
						if(episode!=null){
							return "redirect:/episode/detail/"+episode.getId();
						}
						pre--;
					}
					return "redirect:/episode/detail/"+id;
				}else{
					return "redirect:/episode/detail/"+id;
				}
			}
			
		}else{
			return "redirect:/episode/detail/"+id;
		}
		}
	
	//Decription:get detail episode
	//Url: 		http://kwebsosul.com/episode/detail/32
	@RequestMapping("/detail/{id}")
	public String detail(
			@RequestParam(value = "episode_pay_id", defaultValue = "0") Integer episode_pay_id,
			@RequestParam(value = "delete_comment", defaultValue = "0") Integer delete_comment,
			@RequestParam(value="add_comment",defaultValue="0") Integer add_comment,
			@RequestParam(value="content",defaultValue="") String content,
			@RequestParam(value = "price", defaultValue = "0") Integer price, Model model, HttpSession session,
			@PathVariable("id") Integer id) {
		
		User user =Login.getUserLogin(session);
		EpisodeEntity episode = null;
		
		
		try {
			episode = episodeService.findOne(id);
			Episode e= episodeServiceMapper.mapEpisodeEntityToEpisode(episode);
			if(episode==null){
				return "redirect:/search";
			}
			
			
			if (episode_pay_id > 0) {
				if (Login.checkLogin(session) == "0")
					return JSP_LOGIN;
				CouponUsedEntity couponUsed = couponUsedService.findBy_UserId_EpisodeId(user.getId(), id);
				if(couponUsed==null){
				try {
					CouponUsed c = new CouponUsed();
					c.setBookId(episode.getBook().getId());
					c.setChargeAmount(price);
					c.setEpisodeId(episode_pay_id);
					c.setIsDelete(0);
					c.setUserId(user.getId());
					c.setUpdateDate(new Date());
					c.setCreateDate(new Date());
					couponUsedService.create(c);
					user.setTotalCoupon(user.getTotalCoupon() - price);
					User u = userService.update(user);
					Login.save(user, session);
					
					BookmarkEntity bookmark = bookmarkService.findBy_UserId_EpisodeId(user.getId(), episode.getId());
					if (bookmark != null) {
						model.addAttribute("bookmark", 1);
					}
					List<CommentEntity> listComment = commentService.findAllBy_ParentId_Type(id, ApplicationDefine.COMMENT_EPISODE_TYPE);
					model.addAttribute("listComment", listComment);
					model.addAttribute("total_comment", listComment.size());
					model.addAttribute("pay_success", 1);
					model.addAttribute("pay_price", price);
					model.addAttribute("total_coupon", u.getTotalCoupon());
					model.addAttribute("book_id", episode.getBook().getId());
				} catch (Exception e2) {
					System.out.println(e2);
				}
				}
			}
			
			CouponUsedEntity couponUsed = null;
			if(user!=null){
				couponUsed = couponUsedService.findBy_UserId_EpisodeId(user.getId(), id);
			}
			if (couponUsed != null || episode.getPrice() == 0) {
				if(episode.getViewNo()==null ||episode.getViewNo()<=0 ){
					e.setViewNo(1);
				}else{
					e.setViewNo(episode.getViewNo()+1);
				}
				
			try {
				episodeService.update(e);
				Integer totalView =episodeService.totalEpisode_ViewNo_ByBookId(e.getBookId());
				Book book =bookService.findById(e.getBookId());
				book.setHitsNo(totalView);
				bookService.update(book);
			} catch (Exception e2) {
				System.err.println(e2);
			}
			
				model.addAttribute("e", episode);
				
				LikeHistoryEntity recomment= null;
				List<InterestedBookEntity> findBy_UserId_EpisodeId =null;
				try {
					recomment =likeHistoryService.findBy_UserId_EpisodeId(user.getId(),episode.getId(),2);
				} catch (Exception e2) {
					// TODO: handle exception
				}
				try {
					findBy_UserId_EpisodeId =interestedBookService.findBy_UserId_BookId(user.getId(), episode.getBook().getId());
				} catch (Exception e2) {
					// TODO: handle exception
				}
				 
				InterestedBookEntity interrest = null;
				
				if(findBy_UserId_EpisodeId != null && findBy_UserId_EpisodeId.size() > 0){
					model.addAttribute("interrest", 1);
				}else{
					model.addAttribute("interrest", 0);
				}
				
				//InterestedBookEntity interrest= interestedBookService.findBy_UserId_EpisodeId(user.getId(), episode.getId());
				if(recomment!=null){
					model.addAttribute("recomment", 1);
				}else{
					model.addAttribute("recomment", 0);
				}
				BookmarkEntity bookmark = null;
				try {
					bookmark = bookmarkService.findBy_UserId_EpisodeId(user.getId(), episode.getId());
				} catch (Exception e2) {
					// TODO: handle exception
				}
				 
				if (bookmark != null) {
					model.addAttribute("bookmark", 1);
				}else{
					model.addAttribute("bookmark", 0);
				}
				List<CommentEntity> listComment = commentService.findAllBy_ParentId_Type(id, ApplicationDefine.COMMENT_EPISODE_TYPE);
				model.addAttribute("listComment", listComment);
				model.addAttribute("total_comment", listComment.size());
				model.addAttribute("book_id", episode.getBook().getId());
				
				List<CategoryEntity> reportReason = new ArrayList<CategoryEntity>();
				reportReason = categoryService.findByGroupId(ApplicationDefine.GROUP_REPORT_REASON);
				model.addAttribute("reportReason", reportReason);
				model.addAttribute("user", user);
				model.addAttribute("pay_coupon", 0);
				model.addAttribute("book_id", episode.getId());
				return JSP_DETAIL;
			} else {
				model.addAttribute("e", episode);
				if (episode.getPrice() > user.getTotalCoupon()) {
					model.addAttribute("pay_coupon", 2);
				} else {
					model.addAttribute("pay_coupon", 1);
					model.addAttribute("price_episode", episode.getPrice());
				}
				
				return JSP_DETAIL;
			}
		} catch (Exception e) {
			System.err.println(e);
			return JSP_DETAIL;
		}
	}
	
	//Decription:report comment in episode detail page
	@RequestMapping(value="/report",method=RequestMethod.POST)
	public String report(
			@RequestParam(value="comment_id",defaultValue="0") Integer comment_id,
			@RequestParam(value="post_id",defaultValue="0") Integer episode_id,
			@RequestParam(value="reason",defaultValue="") String reason,
			@RequestParam(value="other_reason",defaultValue="") String other_reason,
			HttpSession session, Model model) {
		
		Comment comment = null;
	
		try {
			if(Login.checkLogin(session)=="0")
				return "redirect:/login";
			
			User user = Login.getUserLogin(session);
			
			if(user != null){
				comment = commentService.findById(comment_id);
				Report report = reportService.findByUserParrentType(user.getId(), comment.getId(), ApplicationDefine.REPORT_COMMENT_EPISODE);
				if(report == null){
					report = new Report();
					report.setId(0);
					report.setIsDelete(0);
					report.setUserId(user.getId());
					report.setParentId(comment_id);
					
					if(reason.equals("기타")){
						report.setReason(other_reason);
					}else{
						report.setReason(reason);
					}
					
					report.setTypeKey( ApplicationDefine.REPORT_COMMENT_EPISODE);
					report.setUpdateDate(new Date());
					report.setCreateDate(new Date());
					
					reportService.create(report);
					
					comment.setReportNumber(comment.getReportNumber()+1);
					commentService.update(comment);
				}else{
					if(reason.equals("기타")){
						report.setReason(other_reason);
					}else{
						report.setReason(reason);
					}
					
					report.setUpdateDate(new Date());
					
					reportService.update(report);
				}
				
				return "redirect:/episode/detail/"+episode_id;
				 
			}else{
				return "redirect:/login";
			}
		} catch (Exception e) {
			System.out.println(e.toString());
		}
		
		return "redirect:/episode/detail/"+episode_id;
	}

}
