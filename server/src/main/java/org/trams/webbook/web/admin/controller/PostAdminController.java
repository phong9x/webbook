/*
 * Created on 22 Dec 2015 ( Time 09:23:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.web.admin.controller;

import java.util.List;
import java.util.Locale.Category;
import java.io.File;
import java.util.ArrayList;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.apache.commons.io.FilenameUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

//--- Common classes
import org.trams.webbook.web.common.AbstractController;
import org.trams.webbook.web.common.ApplicationDefine;
import org.trams.webbook.web.common.FileUtils;
import org.trams.webbook.web.common.FormMode;
import org.trams.webbook.web.common.Pager;
import org.trams.webbook.web.common.Utils;
import org.trams.webbook.web.common.Login;
import org.trams.webbook.web.common.Message;
import org.trams.webbook.web.common.MessageType;
import org.trams.webbook.bean.jpa.CommentEntity;
import org.trams.webbook.bean.jpa.PostEntity;
import org.trams.webbook.bean.jpa.ReportEntity;
import org.trams.webbook.bean.Book;
import org.trams.webbook.bean.Comment;
//--- Entities
import org.trams.webbook.bean.Post;
import org.trams.webbook.bean.User;
import org.trams.webbook.business.service.CategoryService;
import org.trams.webbook.business.service.CommentService;
//--- Services 
import org.trams.webbook.business.service.PostService;
import org.trams.webbook.business.service.ReportService;
import org.trams.webbook.business.service.mapping.PostServiceMapper;


/**
 * Spring MVC controller for 'Post' management.
 */
@Controller
@RequestMapping("/admin/post")
public class PostAdminController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "post";
	private static final String MAIN_LIST_NAME = "list";
	private static final String MAIN_LIST_NAME2 = "list2";
	
	private static final String MAIN_LIST_COMMENT = "list_comment";
	private static final String MAIN_LIST_POST = "list_post";

	private static final String TOTAL_PAGE   = "pages";

	private static final String CURRENT_PAGE   = "pageNumber";

	private static final String LIST_PAGES   = "listPages";

	private static final Integer PAGE_SIZE   = 10;

	private static String nav = "post";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_CREATE   = "admin/post/create";
	private static final String JSP_LIST   = "admin/post/list";
	private static final String JSP_REPORT   = "admin/post/report";
	private static final String JSP_PAGING   = "admin/post";
	private static final String JSP_EDIT   = "admin/post/edit";
	private static final String JSP_DETAIL   = "admin/post/detail";
	private static final String JSP_LOGIN   = "redirect:/admin/login";
	private static final String JSP_WRITE   = "admin/post/write";

	//--- Main entity service
	@Resource
    private PostService postService; // Injected by Spring
	
	@Resource
    private ReportService reportService; // Injected by Spring
	
	@Resource
    private CategoryService categoryService; // Injected by Spring

	@Resource
	private PostServiceMapper postServiceMapper;
	
	@Resource
	private CommentService commentService;
	//--- Other service(s)
	@Autowired
	ServletContext servletContext;
	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public PostAdminController() {
		super(PostAdminController.class, MAIN_ENTITY_NAME );
		log("PostAdminController created.");
	}
	//Decription: Get list all post
	//Url: http://kwebsosul.com/admin/post/list
	@RequestMapping("/list")
	public String list(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="type",defaultValue="0") Integer type,
			@RequestParam(value="key",defaultValue="") String key,
			@RequestParam(value="delete",defaultValue="0") Integer delete,
			@RequestParam(value="search",defaultValue="0") Integer search,
			@RequestParam(value="filter",defaultValue="0") Integer filter,
			@RequestParam(value="bulletinName",defaultValue="") String bulletin_Name,
			HttpSession session,
			Model model) {
		if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
		if(delete > 0){
			Post p = postService.findById(delete);
			p.setIsDelete(1);
			postService.update(p);
		}
		Page<PostEntity> listPage = null;
		String nickname = "";
		String title = "";
		String bulletinName = "";
		if(bulletinName != null){	
			bulletinName = bulletin_Name;
		}
		if(key != null){
			if(type == 0){
				nickname = key;
			}if(type == 1){
				title = key;
			}
		}if(key == null || key == ""){
			key="";
		}
		
		if(bulletin_Name != "" && bulletin_Name!=null ){
			listPage = postService.listPagingSearch("%"+bulletinName+"%", "%"+nickname+"%", "%"+title+"%", page, PAGE_SIZE);
 		}else{
			listPage = postService.listPaging(page, PAGE_SIZE);
		}
		
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("bulletin_list", categoryService.findByGroupId(3));
		model.addAttribute("key", key);
		model.addAttribute("bulletin_Name", bulletin_Name);
		model.addAttribute("type", type);
		model.addAttribute("activePage", nav);
		model.addAttribute("pagination_navigator", "/admin/post/list");
		new Pager<PostEntity>(listPage).setSetting(model, "type="+type+"&amp;key="+key+"&amp;");		
		return JSP_LIST;
	}
	//Decription: Show report for post
		//Url: http://kwebsosul.com/admin/report
	@RequestMapping("/report")
	public String report(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="page1",defaultValue="1") Integer page1,
			@RequestParam(value="page2",defaultValue="1") Integer page2,
			@RequestParam(value="delete_post",defaultValue="0") Integer delete_post,
			@RequestParam(value="delete_comment",defaultValue="0") Integer delete_comment,
			@RequestParam(value="listpopcomment",defaultValue="0") Integer listpopcomment,
			HttpSession session,
			Model model) {
		if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
		Page<PostEntity> listPage1 = reportService.listPostReport(page1, PAGE_SIZE);
		Page<CommentEntity> listPage2 = reportService.listCommentReport(page2, PAGE_SIZE);
		if(delete_post > 0){
			Post p = postService.findById(delete_post);
			p.setIsDelete(1);
			postService.update(p);
			return "redirect:/admin/post/report";
		}
		if(delete_comment > 0){
			Comment c = commentService.findById(delete_comment);
			c.setIsDelete(1);
			commentService.update(c);
			return "redirect:/admin/post/report";
		}
		model.addAttribute(MAIN_LIST_NAME, listPage1);
		model.addAttribute(MAIN_LIST_NAME2, listPage2);
		model.addAttribute("activePage", nav);
		model.addAttribute("page1", page1);
		model.addAttribute("page2", page2);
		model.addAttribute("pagination_navigator", "/admin/post/report");
		new Pager<PostEntity>(listPage1).setSetting(model, "");		
		new Pager<CommentEntity>(listPage2).setSettingSecondList(model, "");	
		return JSP_REPORT;
	}
	
	@RequestMapping("/detail/{id}")
	public String detail(
	Model model,
	HttpSession session,
	@RequestParam(value="delete_post",defaultValue="0") Integer delete_post,
	@RequestParam(value="delete_comment",defaultValue="0") Integer delete_comment,
	@PathVariable("id") Integer id) {
		if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
		model.addAttribute("activePage", nav);
		PostEntity postEntity = postService.findOne(id);
		model.addAttribute("post", postEntity);
		Page<CommentEntity> comment = commentService.findAllBy_ParentId_Type(id, ApplicationDefine.COMMENT_POST_TYPE,1,100);
		new Pager<CommentEntity>(comment).setSetting(model, "");
		if(delete_comment > 0){
			Comment c = commentService.findById(delete_comment);
			c.setIsDelete(1);
			commentService.update(c);
		}
		if(delete_post > 0){
			Post p = postService.findById(delete_post);
			p.setIsDelete(1);
			postService.update(p);
			return "redirect:/admin/post/list";
		}
		postEntity = postService.findOne(id);
		return JSP_DETAIL;
	}
	//Decription: edit post
	//Url: http://kwebsosul.com/admin/post/edit/{id}
	@RequestMapping(value = "/edit/{id}")
	public String update(
	@RequestParam(value="edit",defaultValue="0") Integer edit,
	@RequestParam(value="delete_image1",defaultValue="0") Integer delete_image1,
	@RequestParam(value="delete_image2",defaultValue="0") Integer delete_image2,
	@RequestParam(value="title", defaultValue="") String title,
	@RequestParam(value="contents", defaultValue="") String contents,
	@RequestParam(value="image1", defaultValue="") String image1,
	@RequestParam(value="image2", defaultValue="") String image2,
	HttpSession session,
	@PathVariable("id") Integer id,
	Model model  ) {
		if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
		model.addAttribute("activePage", nav);
		try {
			if(edit > 0){
				Post post = postService.findById(id);
				post = postService.update(post);
				post.setUpdateDate(new Date());
				post.setTitle(title);
				post.setContents(contents);
				post=postService.update(post);
			}
			if(delete_image1 > 0){
				Post post = postService.findById(id);
				post.setImage1("");
				post=postService.update(post);
			}if(delete_image2 > 0){
				Post post = postService.findById(id);
				post.setImage2("");
				post=postService.update(post);
			}
			PostEntity postEntity = postService.findOne(id);
			model.addAttribute("item", postEntity);
			String baseName1 = FilenameUtils.getBaseName(postEntity.getImage1());
		    String extension1 = FilenameUtils.getExtension(postEntity.getImage1());
		    String baseName2 = FilenameUtils.getBaseName(postEntity.getImage2());
		    String extension2 = FilenameUtils.getExtension(postEntity.getImage2());
			model.addAttribute("image_default", categoryService.findByGroupId(11));
			if(postEntity.getImage1()==null ||postEntity.getImage1().trim().length()==0 ){
				model.addAttribute("image_name1","");
			}else{
				model.addAttribute("image_name1",baseName1+"."+extension1);
			}
			if(postEntity.getImage2()==null ||postEntity.getImage2().trim().length()==0 ){
				model.addAttribute("image_name2","");
			}else{
				model.addAttribute("image_name2",baseName2+"."+extension2);
			}
			return JSP_EDIT;
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	@RequestMapping(value = "/create" ) // GET or POST
	public String create(
			@RequestParam(value="create",defaultValue="0") Integer create,
			HttpSession session,
			Model model) {
		log("Action 'create'");
		if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
		try {
			if(create>0){
			Post post = new Post();
			
			post.setUpdateDate(new Date());
			post.setCreateDate(new Date());
			postService.create(post);
			}
			return JSP_LIST;
		} catch(Exception e) {
			return JSP_CREATE;
		}
	}
	//Decription: create post
		//Url: http://kwebsosul.com/admin/post/write
	@RequestMapping(value = "/write", method = RequestMethod.POST) // GET or POST
	public String post(
			@RequestParam(value="create",defaultValue="0") Integer create,
			@RequestParam(value="bulletin", defaultValue="") String bulletin,
			@RequestParam(value="title", defaultValue="") String title,
			@RequestParam(value="ckbody", defaultValue="") String ckbody,
			@RequestParam(value = "file1") MultipartFile file1,
			@RequestParam(value = "file2") MultipartFile file2,
			HttpSession session,
			Model model) {
		if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
		model.addAttribute("bulletin_list", categoryService.findByGroupId(3));
		try{
				User u = Login.getAdminLogin(session);
				Post p = new Post();
				p.setUserId(u.getId());
				String[] split1=bulletin.split("`");
				p.setBulletinId(Utils.parseInt(split1[0]));
				p.setBulletinName(split1[1]);
				p.setTitle(title);
				p.setContents(ckbody);
				if(file1.getSize()>0){
					p.setImage1(FileUtils.saveFileOrigin(file1, servletContext));
				}if(file2.getSize()>0){
					p.setImage2(FileUtils.saveFileOrigin(file2, servletContext));
				}
				p.setCreateDate(new Date());
				p.setUpdateDate(new Date());
				p.setReportNumber(0);
				p.setViewsNumber(0);
				p.setIsDelete(0);
				postService.create(p);
				return "redirect:/admin/post/list";
		}catch(Exception e){
			return JSP_WRITE;
		}
	}
	
	@RequestMapping(value = "/write", method = RequestMethod.GET) // GET or POST
	public String get(
			
			HttpSession session,
			Model model) {
		if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
		model.addAttribute("bulletin_list", categoryService.findByGroupId(3));
		return JSP_WRITE;
	}
	
}
