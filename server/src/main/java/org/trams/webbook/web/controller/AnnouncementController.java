/*
 * Created on 22 Dec 2015 ( Time 09:23:10 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.web.controller;

import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

//--- Common classes
import org.trams.webbook.web.common.AbstractController;
import org.trams.webbook.web.common.Login;
//--- Entities
import org.trams.webbook.bean.Announcement;
import org.trams.webbook.bean.Book;
//--- Services 
import org.trams.webbook.business.service.AnnouncementService;
import org.trams.webbook.business.service.BookService;


/**
 * Spring MVC controller for 'Announcement' management.
 */
@Controller
@RequestMapping("/my_book")
public class AnnouncementController extends AbstractController {


	// --- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "book";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_CREATE   = "my_book/announcement_write";
	private static final String JSP_EDIT   = "my_book/announcement_edit";
	private static final String JSP_DETAIL   = "my_book/announcement_detail";
	private static final String JSP_LOGIN   = "redirect:/login";

	// --- Main entity service
	@Resource
    private AnnouncementService announcementService; // Injected by Spring
	//--- Other service(s)
	@Resource
    private BookService bookService;
	
	@Autowired
	ServletContext servletContext;

	// --------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public AnnouncementController() {
		super(AnnouncementController.class, MAIN_ENTITY_NAME);
		log("MyBookAnnouncementController created.");
	}
	
	//Decription:Create announcement for my book
	@RequestMapping(value="/announcement_write/{id}",method=RequestMethod.GET)
	public String writeIndex(@PathVariable("id") Integer id,HttpSession session, Model model) {
		Book book = bookService.findById(id);
		model.addAttribute("activeMenu", "my_book");
		if(book == null){
			return "redirect:/my_book/book_detail/"+id;
			
		}else{
			model.addAttribute("book", book);
		}
		
		return JSP_CREATE;
	}
	
	//Decription:Get detail announcement for my book
	@RequestMapping(value="/announcement_detail/{id}/{aid}",method=RequestMethod.GET)
	public String announcement_detail(
			@PathVariable("id") Integer book_id,
			@PathVariable("aid") Integer annucement_id,
			HttpSession session, Model model) {
		Announcement a = announcementService.findById(annucement_id);
		if(a.getHitsNo()==null){
			a.setHitsNo(1);
		}else{
			a.setHitsNo(a.getHitsNo()+1);
		}
		announcementService.update(a);
		Book b=bookService.findById(book_id);
		model.addAttribute("e", a);
		model.addAttribute("b", b);
		return JSP_DETAIL;
	}
	//Decription:Get write announcement for my book
	@RequestMapping(value = "/announcement_write/{id}", method = RequestMethod.POST) 
	public String createPOST(@PathVariable("id") Integer id,
			@RequestParam(value = "title", defaultValue = "") String title,
			@RequestParam(value = "content", defaultValue = "") String content,
			@RequestParam(value = "epilogue", defaultValue = "") String epilogue,
			 HttpSession session, Model model) {
		log("Action 'create'");
		
		if (Login.checkLogin(session) == "0")
			return JSP_LOGIN;
		
		model.addAttribute("activeMenu", "my_book");
		
		try {
			
			Book book = bookService.findById(id);
			
			if(book != null){

				Announcement announcement = new Announcement();
				announcement.setBookId(book.getId());
				announcement.setId(id);
				announcement.setTitle(title);
				announcement.setContents(content);
				announcement.setEpilogue(epilogue);
				announcement.setHitsNo(0);
				announcement.setIsDelete(0);
				announcement.setUpdateDate(new Date());
				announcement.setCreateDate(new Date());
				
				announcementService.create(announcement);
			} 
			model.addAttribute("activeMenu", "my_book");
			return "redirect:/my_book/book_detail/"+id+"?active=announcement";
			
		} catch (Exception e) {
			System.out.println(e);
			return "redirect:/my_book/book_detail/"+id+"?active=announcement";
		}
	}
	//Decription:Edit announcement for my book
	@RequestMapping(value="/announcement_edit/{id}/{aid}",method=RequestMethod.GET)
	public String editIndex(@PathVariable("id") Integer id,@PathVariable("aid") Integer aid,HttpSession session, Model model) {
		Book book=bookService.findById(id);
		try {
			Announcement an = announcementService.findById(aid);
			if(an != null){
				model.addAttribute("an", an);
			}else{
				return "redirect:/my_book/book_detail/"+id+"?active=announcement";
			}
			
		} catch (Exception e) {
		}
		model.addAttribute("book", book);
		model.addAttribute("activeMenu", "my_book");
		return JSP_EDIT;
	}
	//Decription:Edit announcement in my book page
	@RequestMapping(value = "/announcement_edit/{id}/{aid}", method = RequestMethod.POST) 
	public String editPOST(
			@PathVariable("id") Integer id,
			@PathVariable("aid") Integer aid,
			@RequestParam(value = "title", defaultValue = "") String title,
			@RequestParam(value = "content", defaultValue = "") String content,
			@RequestParam(value = "epilogue", defaultValue = "") String epilogue,
			HttpSession session, Model model) {
		
		log("Action 'create'");
		
		if (Login.checkLogin(session) == "0")
			return JSP_LOGIN;
		
		model.addAttribute("activeMenu", "my_book");
		
		try {
			
			Announcement announcement = announcementService.findById(aid);
			
			if(announcement != null){
				announcement.setTitle(title);
				announcement.setContents(content);
				announcement.setEpilogue(epilogue);
				announcement.setIsDelete(0);
				announcement.setUpdateDate(new Date());
				
				announcement = announcementService.update(announcement);
				
				if(announcement != null){
					model.addAttribute("an", announcement);
					return "redirect:/my_book/book_detail/"+id+"?active=announcement";
				}else{
					return "redirect:/my_book/announcement_edit/"+id+"/"+aid;
				}
			}else{
				return "redirect:/my_book/book_detail/"+id+"?active=announcement";
			}
		} catch (Exception e) {
			System.out.println(e);
			return "redirect:/my_book/book_detail/"+id+"?active=announcement";
		}
	}
}
