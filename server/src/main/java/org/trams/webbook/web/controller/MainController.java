/*

 * Created on 15 Dec 2015 ( Time 14:50:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.web.controller;

import java.util.List;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.net.InetAddress;
import java.net.URL;
import java.net.URLEncoder;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import javax.annotation.Resource;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.apache.commons.fileupload.util.mime.MimeUtility;
import org.apache.commons.httpclient.HttpRecoverableException;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

//--- Common classes
import org.trams.webbook.web.common.AbstractController;
import org.trams.webbook.web.common.ApplicationDefine;
import org.trams.webbook.web.common.FormMode;
import org.trams.webbook.web.common.Pager;
import org.trams.webbook.web.common.Login;
import org.trams.webbook.web.common.Message;
import org.trams.webbook.web.common.MessageType;
import org.trams.webbook.bean.jpa.AnnouncementEntity;
import org.trams.webbook.bean.jpa.BookEntity;
import org.trams.webbook.bean.jpa.PostEntity;
import org.trams.webbook.bean.jpa.UserEntity;
import org.trams.webbook.bean.jpa.VisitorEntity;
import org.trams.webbook.web.common.Utils;
import org.trams.webbook.bean.Announcement;
import org.trams.webbook.bean.Banner;
//--- Entities
import org.trams.webbook.bean.User;
import org.trams.webbook.bean.Visitor;
import org.trams.webbook.business.service.AnnouncementService;
import org.trams.webbook.business.service.BannerService;
import org.trams.webbook.business.service.BookService;
import org.trams.webbook.business.service.PostService;
//--- Services 
import org.trams.webbook.business.service.UserService;
import org.trams.webbook.business.service.VisitorService;
import org.trams.webbook.business.service.mapping.UserServiceMapper;
import org.trams.webbook.business.service.mapping.VisitorServiceMapper;

/**
 * Spring MVC controller for 'User' management.
 */
@Controller
@RequestMapping("")
public class MainController extends AbstractController {

	// --- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "user";
	private static final String MAIN_LIST_NAME = "list";

	private static final String TOTAL_PAGE = "pages";
	private static final String JSP_FIND_ID  = "findid";
	private static final String JSP_FIND  = "find";
	private static final String JSP_FIND_PASSWORD  = "findpassword";
	private static final String CURRENT_PAGE = "pageNumber";

	private static final String LIST_PAGES = "listPages";

	private static final Integer PAGE_SIZE = 15;

	private static String nav = "index";

	// --- JSP pages names ( View name in the MVC model )
	private static final String JSP_LOGIN = "login";
	private static final String JSP_LOGIN_REDIRECT = "redirect:/login";
	private static final String term_of_use = "term_of_use";
	private static final String privacy_policy = "privacy_policy";
	private static final String office_announcement = "office_announcement";
	private static final String office_announcement_view = "office_announcement/view";
	// --- SAVE ACTION ( in the HTML form )
	private static final String SAVE_ACTION_CREATE = "/user/create";
	private static final String SAVE_ACTION_UPDATE = "/user/update";
	
	// --- Main entity service
	@Resource
	private UserService userService; // Injected by Spring
	@Resource
	private UserServiceMapper userServiceMapper;
	@Resource
	private BookService bookService; // Injected by Spring
	@Resource
	private BannerService bannerService;
	@Resource
	private AnnouncementService announcementService;
	@Resource
	private PostService postService;
	@Resource
	private VisitorService visitorService;
	@Resource
	private VisitorServiceMapper visitorServiceMapper;
	// --- Other service(s)

	// --------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public MainController() {
		super(MainController.class, MAIN_ENTITY_NAME);
		log("UserController created.");
	}

	// --------------------------------------------------------------------------------------
	// Spring MVC model management
	// --------------------------------------------------------------------------------------

	/**
	 * Populates the Spring MVC model with the given entity and eventually other
	 * useful data
	 * 
	 * @param model
	 * @param user
	 */
	//Decription: Login
	//Url: 		http://kwebsosul.com/login
	
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public String login(
			@RequestParam(value = "username", defaultValue = "") String username,
			@RequestParam(value = "password", defaultValue = "") String password,
			@RequestParam(value = "remember", defaultValue = "") String remember, HttpSession session,
			HttpServletRequest request, HttpServletResponse response, Model model) {
		try {
			
			if (username != null && password != null && username != "" && password != "") {
				String md5 = Utils.getMD5(password);
				UserEntity userEntity = userService.login(username, md5, 0);
				
				if (userEntity != null) {
					User user=userService.findById(userEntity.getId());
					if(user.getActive()==0){
						user.setActive(1);
						user= userService.update(user);
					}
					Login.save(user, session);
					if (remember != null && remember.equalsIgnoreCase("on")) {
						Cookie name = new Cookie("username", username);
						Cookie pass = new Cookie("password", password);
						// Set expiry date after 24 Hrs for both the cookies.
						name.setMaxAge(60 * 60 * 24);
						pass.setMaxAge(60 * 60 * 24);
						// Add both the cookies in the response header.
						response.addCookie(name);
						response.addCookie(pass);
						model.addAttribute("user", user);
					}
					return "redirect:/index";

				} else {
					model.addAttribute("username", username);
					model.addAttribute("err", "nouser");
					model.addAttribute("activePage", nav);
					return JSP_LOGIN;
				}
			}
		} catch (Exception e) {
			System.out.println(e);
			model.addAttribute("err", "err");
			return JSP_LOGIN;
		}
		return JSP_LOGIN;
	}

	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String login3(HttpSession session, HttpServletRequest servletRequest, Model model) {
		if (Login.checkLogin(session) == "0") {
			Cookie[] cookies = servletRequest.getCookies();
			if (cookies != null) {
				for (Cookie cookie : cookies) {
					if (cookie.getName().equals("username")) {
						model.addAttribute("username", cookie.getValue());
					}
					if (cookie.getName().equals("password")) {
						model.addAttribute("password", cookie.getValue());
					}
				}
			}
			return JSP_LOGIN;

		} else {

			return JSP_LOGIN;
		}

	}

	@RequestMapping(value = "/logout")
	public String logout(HttpSession session) {
		session.removeAttribute("login");
		return "redirect:/";
	}
	//Decription: index page
	//Url: http://kwebsosul.com/index
	@RequestMapping(value = "/index")
	public String index(HttpSession session, Model model) {
		try {
			if(Login.checkLogin(session)=="0"){
				Login.save(null, session);
			}
			Banner banner=bannerService.findAll().get(0);
			Visitor visitor =null;
			try {
				VisitorEntity  list= visitorService.listPaging(1, 1).getContent().get(0);
				visitor=visitorServiceMapper.mapVisitorEntityToVisitor(list);
				if(visitor.getTodayVisitor()==null ){
					visitor.setTodayVisitor(1);
				}else{
					visitor.setTodayVisitor(visitor.getTodayVisitor()+1);
				}
				if(visitor.getTotalVisitor()==null){
					visitor.setTodayVisitor(0);
				}else{
					visitor.setTotalVisitor(visitor.getTotalVisitor()+1);
				}
				visitorService.update(visitor);
				
			} catch (Exception e) {
				visitor=new Visitor();
				visitor.setId(1);
				visitor.setTodayVisitor(1);
				visitor.setTotalVisitor(1);
				visitorService.create(visitor);
			}
			
			List<BookEntity> listTop= bookService.list_15_Book_Weekly_Hit(ApplicationDefine.BOOK_OFFICAL_AUTHOR_LEVEL,15);
			List<BookEntity> league_1_1=bookService.list_Weekly_By_AgeGroup_League(24, 1);
			List<BookEntity> league_1_2= bookService.list_Weekly_By_AgeGroup_League(25, 1);
//			try {
//				List<BookEntity> newList = new ArrayList<BookEntity>(league_1_1);
//				newList.addAll(league_1_2);
//			} catch (Exception e) {
//				System.err.println(e);
//			}
//			
			List<BookEntity> league_2_1= bookService.list_Weekly_By_AgeGroup_League(24, 2);
			List<BookEntity> league_2_2= bookService.list_Weekly_By_AgeGroup_League(25, 2);
			List<BookEntity> league_3_1= bookService.list_Weekly_By_AgeGroup_League(24, 3);
			List<BookEntity> league_3_2= bookService.list_Weekly_By_AgeGroup_League(25, 3);
			List<BookEntity> league_4_1= bookService.list_Weekly_By_AgeGroup_League(24, 4);
			List<BookEntity> league_4_2= bookService.list_Weekly_By_AgeGroup_League(25, 4);
			List<PostEntity> listAnnouncement=postService.findByBulletin(13, 1, 3, "createDate").getContent();
			List<PostEntity> listFreeboard = postService.findByBulletin(9, 1, 3, "createDate").getContent();
			List<PostEntity> listAppreciation = postService.findByBulletin(10, 1, 3, "createDate").getContent();
			model.addAttribute("listAnnouncement", listAnnouncement);
			model.addAttribute("listFreeboard", listFreeboard);
			model.addAttribute("listAppreciation", listAppreciation);
			model.addAttribute("b", banner);
			model.addAttribute("listTop", listTop);
			model.addAttribute("league_1_1", league_1_1);
			model.addAttribute("league_1_2", league_1_2);
			model.addAttribute("league_2_1", league_2_1);
			model.addAttribute("league_2_2", league_2_2);
			model.addAttribute("league_3_1", league_3_1);
			model.addAttribute("league_3_2", league_3_2);
			model.addAttribute("league_4_1", league_4_1);
			model.addAttribute("league_4_2", league_4_2);
			model.addAttribute("activePage", nav);
		} catch (Exception e) {
			// TODO: handle exception
		}
		return "index";
	}
	//Decription: signup
	//Url: http://kwebsosul.com/signup
	@RequestMapping(value = "/signup", method = RequestMethod.POST) // GET or
	public String create(
			@RequestParam(value = "username", defaultValue = "") String username,
			@RequestParam(value = "fullname", defaultValue = "") String fullname,
			@RequestParam(value = "nickname", defaultValue = "") String nickname,
			@RequestParam(value = "password1", defaultValue = "") String password1,	
			@RequestParam(value = "password2", defaultValue = "") String password2,
			@RequestParam(value = "email", defaultValue = "") String email,
			@RequestParam(value = "phone", defaultValue = "") String phone,
			@RequestParam(value = "year", defaultValue = "") Integer year,
			@RequestParam(value = "month", defaultValue = "") Integer month,
			@RequestParam(value = "day", defaultValue = "") Integer day,
			@RequestParam(value = "gender", defaultValue = "") String gender, HttpSession session, Model model) {
		Date nowDate = new Date();
		Calendar c = new GregorianCalendar();
		c.setTime(nowDate);
		int nowYear = c.get(Calendar.YEAR);
		model.addAttribute("year", nowYear);
		model.addAttribute("required", 0);
		model.addAttribute("success", 0);
		try {
			if (username != null && fullname != null && nickname != null && password1 != null && password2 != null
					&& nickname != null && email != null && phone != null) {
				try {
					User user = new User();
					user.setUsername(username);
					user.setFullname(fullname);
					user.setNickname(nickname);
					user.setPassword(Utils.getMD5(password1));
					user.setEmail(email);
					user.setPhone(phone);
					user.setGender(gender);
					user.setTotalCoupon(0);
					user.setAdultVerification(0);
					Calendar calendar = Calendar.getInstance();
					calendar.set(Calendar.YEAR, year);
					calendar.set(Calendar.MONTH, month-1);
					calendar.set(Calendar.DAY_OF_MONTH, day);
					Calendar c1 = Calendar.getInstance();
					int age = c1.get(Calendar.YEAR)-year;
					if(age<15){
						user.setAgeGroupId(4);
						user.setAgeGroupName("로우틴");
					}else if(age>=15 && age<20){
						user.setAgeGroupId(3);
						user.setAgeGroupName("하이틴");
					}else if(age>=20 && age<25){
						user.setAgeGroupId(2);
						user.setAgeGroupName("유니티");
					}else{
						user.setAgeGroupId(1);
						user.setAgeGroupName("제너맨");
					}
					Date d = calendar.getTime();
					user.setDayOfBirth(d);
					user.setAuthorLevel(27);
					user.setAuthorName("리그&공모");
					user.setIsDelete(0);
					user.setCreateDate(new Date());
					user.setUpdateDate(new Date());
					user.setActive(0);
					user.setRole(0);
					User u=userService.create(user);
					session.removeAttribute("login");
					Login.save(u, session);
				} catch (Exception e) {
					model.addAttribute("required", 1);
				}
				
				return "redirect:/signup?success=1";
			} else {
				model.addAttribute("required", 1);
				return "signup";
			}

		} catch (Exception e) {
			return "signup";
		}
	}

	@RequestMapping(value = "/signup", method = RequestMethod.GET)
	public String signup(
			@RequestParam(value = "success", defaultValue = "0") Integer success,
			HttpSession session, Model model) {
		Date date = new Date();
		Calendar calendar = new GregorianCalendar();
		calendar.setTime(date);
		int year = calendar.get(Calendar.YEAR);
		model.addAttribute("success", success);
		model.addAttribute("year", year);
		return "signup";
	}
	
	@RequestMapping("")
	public String login2(HttpSession session) {
		return "index";
	}
	
	@RequestMapping("/")
	public String login4(HttpSession session) {
			return "redirect:/index";
	}
	
	@RequestMapping(value="/findid",method=RequestMethod.GET)
	public String findIDGet(
			Model model) {
				model.addAttribute("status", "nostatus");
				model.addAttribute("type", 1);
		return JSP_FIND;
	}
	
	@RequestMapping(value="/findpassword",method=RequestMethod.GET)
	public String findPassGet(
			Model model) {
				model.addAttribute("status", "nostatus");
				model.addAttribute("type", 2);
		return JSP_FIND;
	}
	@RequestMapping(value="/term_of_use",method=RequestMethod.GET)
	public String term_of_use(
			Model model) {
		return term_of_use;
	}
	
	@RequestMapping(value="/privacy_policy",method=RequestMethod.GET)
	public String privacy_policy(
			Model model) {
				
		return privacy_policy;
	}
	
	@RequestMapping(value="/office_announcement",method=RequestMethod.GET)
	public String office_announcement(
			Model model) {
				
		return office_announcement;
	}
	
	@RequestMapping("office_announcement/view/{id}")
	public String office_announcement_view(
			Model model) {
				
		return office_announcement_view;
	}
	@RequestMapping(value="/find",method=RequestMethod.GET)
	public String findId(
			Model model) {
		model.addAttribute("type", 1);
		return JSP_FIND;
	}
	//Decription:  find by password or by id
	//Url: http://kwebsosul.com/find
	@RequestMapping(value="/find",method=RequestMethod.POST)
	public String findId(
			@RequestParam(value="username", defaultValue="") String username,
			@RequestParam(value="fullname", defaultValue="") String fullname,
			@RequestParam(value="email", defaultValue="") String email,
			@RequestParam(value="button", defaultValue="") String button,
			Model model) {
		if(button.equalsIgnoreCase("findid")){
			try {
				if( fullname!=null && email!=null){
					List<UserEntity> user =userService.findByFullnameEmail(fullname.trim(), email.trim());
					if(user != null && user.size() > 0){
						if(user.get(0).getUsername().length() >3){
							String id = Utils.getHiddentString(user.get(0).getUsername(), 3);
							model.addAttribute("id",id );
						}else{
							String id = Utils.getHiddentString(user.get(0).getUsername(), 2);
							model.addAttribute("id",id );
						}
						model.addAttribute("status", "success_findid");
						
					}else{
						//model.addAttribute("fullname",fullname );
						model.addAttribute("status", "notmatch_finid");
					}
				}else{
					model.addAttribute("fullname",fullname );
					model.addAttribute("status", "notmatch_finid");
				}
			} catch (Exception e) {
			}
			model.addAttribute("type", 1);
		}else{
			try {
				if(username!=null && fullname!=null && email!=null){
					UserEntity user =userService.findByUsernameFullnameEmail(username, fullname, email);
					User u= userServiceMapper.mapUserEntityToUser(user);
					if(user!=null){
						Date date=new Date();
						
						String temp= Utils.getAuthPhoneCode(user.getUsername(), String.valueOf(date.getTime()));
						Boolean ok=org.trams.webbook.common.mail.Utils.sendMail(u.getEmail(),temp);
						if(ok==true){
							u.setPassword(Utils.getMD5(temp));
							userService.update(u);
							System.out.println(" success");
						}else{
							System.out.println("Not sucess");
						}
						model.addAttribute("status", "success_findpassword");
					}else{
						//model.addAttribute("fullname",fullname );
						//model.addAttribute("username",username );
						model.addAttribute("status", "notmatch_findpassword");
					}
				}else{
					model.addAttribute("status", "notmatch_findpassword");
				}
			} catch (Exception e) {
				System.out.println(e);
			}
			model.addAttribute("type", 2);
		}
		return JSP_FIND;
	}
	@RequestMapping(value="/uploadwork",method=RequestMethod.GET)
	public String uploadwork(
			HttpSession session,
			Model model) {
		if(Login.checkLogin(session)=="0")
			return JSP_LOGIN_REDIRECT;
		User user =Login.getUserLogin(session);
		List<BookEntity> list = bookService.listMyBoook(user.getId(), 1, 2).getContent();
		if(list==null || list.size()==0){
			return "redirect:my_book/book_create";
		}
		if(list.size()>0){
			return "redirect:my_book/book_detail/"+list.get(0).getId();
		}
		model.addAttribute("status", "nostatus");
		model.addAttribute("type", 1);
		return JSP_FIND;
	}
	
	@RequestMapping(value="/test_adult_auth",method=RequestMethod.GET)
	public String test_adult_auth(
			HttpSession session,
			Model model) {
		com.sci.v2.pcc.secu.SciSecuManager seed  = new com.sci.v2.pcc.secu.SciSecuManager();
		model.addAttribute("seed", seed);
		return "test_adult_auth";
	}
	
	@RequestMapping(value = "/files", method = RequestMethod.GET)
	public void getFile(
		@RequestParam(value="url", defaultValue="") String url,
		@RequestParam(value="name", defaultValue="") String name,
		HttpServletRequest request,
	    HttpServletResponse response) {
	    try {
	        URL link = new URL(url);           
	        String file_name= URLEncoder.encode(name,"UTF-8");
	        String replaceAll = file_name.replaceAll("\\+","%20");
	        response.setHeader("Content-disposition", "attachment;filename=" +replaceAll );
	        response.setHeader("Content-disposition", "attachment;filename=" +replaceAll );
	        response.setContentType ("text/html;charset=utf-8");
	        InputStream is = link.openStream();
	        BufferedOutputStream outs = new BufferedOutputStream(response.getOutputStream());
	        int len;
	        byte[] buf = new byte[1024];
	        while ( (len = is.read(buf)) > 0 ) {
	            outs.write(buf, 0, len);
	        }
	        outs.close();
	    } catch (IOException ex) {
	      throw new RuntimeException("IOError writing file to output stream");
	    }

	}
	
}
