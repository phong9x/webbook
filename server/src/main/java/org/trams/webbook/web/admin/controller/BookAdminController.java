/*
 * Created on 22 Dec 2015 ( Time 09:23:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.web.admin.controller;

import java.util.List;
import java.util.ArrayList;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.apache.commons.io.FilenameUtils;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

//--- Common classes
import org.trams.webbook.web.common.AbstractController;
import org.trams.webbook.web.common.FileUtils;
import org.trams.webbook.web.common.FormMode;
import org.trams.webbook.web.common.Pager;
import org.trams.webbook.web.common.Utils;
import org.trams.webbook.web.common.Login;
import org.trams.webbook.web.common.Message;
import org.trams.webbook.web.common.MessageType;
import org.trams.webbook.bean.jpa.AnnouncementEntity;
import org.trams.webbook.bean.jpa.BookEntity;
import org.trams.webbook.bean.jpa.CommentEntity;
import org.trams.webbook.bean.jpa.EpisodeEntity;
import org.trams.webbook.bean.jpa.PostEntity;
import org.trams.webbook.bean.jpa.ReportEntity;
import org.trams.webbook.bean.Announcement;
//--- Entities
import org.trams.webbook.bean.Book;
import org.trams.webbook.bean.Comment;
import org.trams.webbook.bean.Episode;
import org.trams.webbook.bean.Post;
import org.trams.webbook.bean.User;
import org.trams.webbook.business.service.AnnouncementService;
//--- Services 
import org.trams.webbook.business.service.BookService;
import org.trams.webbook.business.service.CategoryService;
import org.trams.webbook.business.service.CommentService;
import org.trams.webbook.business.service.EpisodeService;


/**
 * Spring MVC controller for 'Book' management.
 */
@Controller
@RequestMapping("/admin/book")
public class BookAdminController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "book";
	private static final String MAIN_LIST_NAME = "list";

	private static final String TOTAL_PAGE   = "pages";

	private static final String CURRENT_PAGE   = "pageNumber";

	private static final String LIST_PAGES   = "listPages";

	private static final Integer PAGE_SIZE   = 10;

	private static String nav = "book";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_CREATE   = "admin/book/create";
	private static final String JSP_LIST   = "admin/book/list";
	private static final String JSP_REPORT   = "admin/book/report";
	private static final String JSP_PAGING   = "admin/book";
	private static final String JSP_EDIT   = "admin/book/edit";
	private static final String JSP_DETAIL   = "admin/book/detail";
	private static final String JSP_LOGIN   = "redirect:/admin/login";

	//--- Main entity service
	@Resource
    private BookService bookService; // Injected by Spring
	@Resource
	private CategoryService categoryService;
	@Resource
	private EpisodeService episodeService; // Injected by Spring
	@Resource
	private AnnouncementService announcementService;
	@Resource
	private CommentService commentService;
	
	//--- Other service(s)
	@Autowired 
	ServletContext servletContext;
	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public BookAdminController() {
		super(BookAdminController.class, MAIN_ENTITY_NAME );
		log("BookAdminController created.");
	}
	//Decription: Show all book
	//Url: http://kwebsosul.com/admin/book/list
	@RequestMapping("/list")
	public String list(
			@RequestParam(value="age_group",defaultValue="") String age_group,
			@RequestParam(value="genre",defaultValue="") String genre,
			@RequestParam(value="league",defaultValue="") String league,
			@RequestParam(value="complete",defaultValue="0") Integer complete,
			@RequestParam(value="adult",defaultValue="") String adult,
			@RequestParam(value="key",defaultValue="") String key,
			@RequestParam(value="filter",defaultValue="0") Integer filter,
			@RequestParam(value="search",defaultValue="0") Integer search,
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="type",defaultValue="0") Integer type,
			HttpSession session,
			Model model) {
		if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
		Page<BookEntity> listPage = null;
		String nickname="";
		String bookname="";
		String genre_name="";
		String age_group_name="";
		String league_name="";
		String adult_name="";	
		if(genre!=null){
			genre_name= genre;
		}
		if(age_group!=null){
			age_group_name= age_group;
		}
		if(league!=null){
			league_name= league;
		}
		if(adult!=null){
			adult_name= adult.trim();
		}
		if(key!=null){
			if(type==0 ){
				nickname=key;
			}else{
				bookname=key;
			}
		}else{
			key="";
		}
		
		if(nickname!="" || bookname!="" || genre_name!="" || age_group_name!="" || league_name!="" || adult_name!=""){
			if(complete>0){
				listPage=bookService.listPagingSearchBookComplete("%"+genre_name+"%","%"+age_group_name+"%" ,"%"+league_name+"%" , "%"+adult_name+"%" , "%"+nickname+"%" ,"%"+bookname+"%" , page, PAGE_SIZE);
			}else{
				listPage=bookService.listPagingSearchAll("%"+genre_name+"%", "%"+age_group_name+"%", "%"+league_name+"%", "%"+adult_name+"%", "%"+nickname+"%", "%"+bookname+"%", page, PAGE_SIZE);
			}
		}else{
			listPage=bookService.listPaging(page, PAGE_SIZE);
		}
 		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("genre_list", categoryService.findByGroupId(2));
		model.addAttribute("age_group_list", categoryService.findByGroupId(1));
		model.addAttribute("league_list", categoryService.findByGroupId(4));
		model.addAttribute("genre", genre);
		model.addAttribute("age_group", age_group);
		model.addAttribute("league", league);
		model.addAttribute("complete", complete);
		model.addAttribute("adult", adult);
		if(key!=null){
			model.addAttribute("key", key);
		}else{
			model.addAttribute("key", "");
		}
		model.addAttribute("type", type);
		model.addAttribute("total", listPage.getTotalElements());
		model.addAttribute("activePage", nav);
		model.addAttribute("pagination_navigator", "/admin/book/list");
		new Pager<BookEntity>(listPage).setSetting(model, "adult="+adult_name+"&amp;age_group="+age_group_name+"&amp;complete="+complete+"&amp;genre="+genre_name+"&amp;type="+type+"&amp;key="+key+"&amp;");		
		return JSP_LIST;
	}
	//Decription: Show report book
	//Url: http://kwebsosul.com/admin/book/report
	@RequestMapping("/report")
	public String report(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="type",defaultValue="0") Integer type,
			@RequestParam(value="key",defaultValue="") String key,
			@RequestParam(value="delete",defaultValue="0") Integer delete,
			HttpSession session,
			Model model) {
		if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
		Page<CommentEntity> listPage = bookService.listCommentReport("EPISODE", page, PAGE_SIZE);
		if(delete > 0){
			Comment c = commentService.findById(delete);
			c.setIsDelete(1);
			commentService.update(c);
			return "redirect:/admin/book/report";
		}
		model.addAttribute(MAIN_LIST_NAME, listPage);
		model.addAttribute("activePage", nav);
		model.addAttribute("page", page);
		model.addAttribute("pagination_navigator", "/admin/book/report");
		new Pager<CommentEntity>(listPage).setSetting(model, "type="+type+"&amp;key="+key+"&amp;");
		return JSP_REPORT;
	}
	//Decription: Show detail book
	//Url: http://kwebsosul.com/admin/book/detail/{id}
	@RequestMapping("/detail/{id}")
	public String detail(
			@RequestParam(value = "page1", defaultValue = "1") Integer page_episode,
			@RequestParam(value = "page2", defaultValue = "1") Integer page_announcement,
			@RequestParam(value = "page3", defaultValue = "1") Integer page_temporary,
			@RequestParam(value = "order", defaultValue = "asc") String order,
			@RequestParam(value = "active", defaultValue = "episode") String active,
			@RequestParam(value = "delete_episode", defaultValue = "0") Integer delete_episode,
			@RequestParam(value = "delete_announcement", defaultValue = "0") Integer delete_announcement,
			@RequestParam(value = "delete_book", defaultValue = "0") Integer delete_book,
			@RequestParam(value = "delete_temporary", defaultValue = "0") Integer delete_temporary, Model model,
			HttpSession session, @PathVariable("id") Integer id) {
		if (Login.checkAdminLogin(session) == "0")
			return JSP_LOGIN;

		BookEntity book = bookService.findOne(id);
		model.addAttribute("active", active);
			if (delete_episode > 0) {
				Episode episode = episodeService.findById(delete_episode);
				book.setEpisodeNumber(book.getEpisodeNumber() - 1);
				episode.setIsDelete(1);
				episodeService.update(episode);
				model.addAttribute("active", "episode");
			}
			if (delete_announcement > 0) {
				Announcement announcement = announcementService.findById(delete_announcement);
				announcement.setIsDelete(1);
				announcementService.update(announcement);
				model.addAttribute("active", "announcement");
			}
			if (delete_temporary > 0) {
				Episode episode = episodeService.findById(delete_temporary);
				episode.setIsDelete(1);
				episodeService.update(episode);
				model.addAttribute("active", "temporary");
			}
			PageRequest pageable = null;
			if(delete_book>0){
				bookService.delete(id);
				pageable = new PageRequest(0, 1000);
				Page<EpisodeEntity> listEpisode = episodeService.listPagingByBookId(id, pageable);
				for (EpisodeEntity episodeEntity : listEpisode) {
					episodeService.delete(episodeEntity.getId());
				}
				return "redirect:/admin/book/list";
			}
			if (order.equalsIgnoreCase("desc")) {
				pageable = new PageRequest(page_episode - 1, PAGE_SIZE, new Sort(new Order(Direction.DESC, "id")));
				model.addAttribute("order", "desc");
			} else {
				pageable = new PageRequest(page_episode - 1, PAGE_SIZE, new Sort(new Order(Direction.ASC, "id")));
				model.addAttribute("order", "asc");
			}
			
			Page<EpisodeEntity> listEpisode = episodeService.listPagingByBookId(id, pageable);
			Page<AnnouncementEntity> listAnnouncement=announcementService.listPagingByBookId(id, page_announcement, PAGE_SIZE);
			Page<AnnouncementEntity> announcement=announcementService.listPagingByBookId(id, 1, 1);
			if(announcement.getTotalElements()>0){
				model.addAttribute("a", announcement.getContent().get(0));
			}
			Page<EpisodeEntity> listEpisodeTemporary = episodeService.listPagingByBookId_Temporary_Save(id,
					page_episode, PAGE_SIZE);
			new Pager<EpisodeEntity>(listEpisode).setSetting(model, "");
			new Pager<AnnouncementEntity>(listAnnouncement).setSettingSecondList(model, "");
			new Pager<EpisodeEntity>(listEpisodeTemporary).setSettingThirdList(model, "");
			model.addAttribute("activePage", nav);
			model.addAttribute("pagination_navigator", "/admin/book/detail/" + id);
			model.addAttribute("page1", page_episode);
			model.addAttribute("page2", page_announcement);
			model.addAttribute("page3", page_temporary);
			model.addAttribute("book", book);
			return JSP_DETAIL;
		

	}
	//Decription: Edit book
	//Url: http://kwebsosul.com/admin/book/edit/{id}
	@RequestMapping(value = "/edit/{id}",method=RequestMethod.GET)
	public String updateGet(
	HttpSession session,
	@PathVariable("id") Integer id,
	Model model  ) {
	if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
	Book book = bookService.findById(id);
	String baseName = FilenameUtils.getBaseName(book.getCoverImage());
    String extension = FilenameUtils.getExtension(book.getCoverImage());
    model.addAttribute("activePage", nav);
	model.addAttribute("image_default", categoryService.findByGroupId(11));
    model.addAttribute("image_name",baseName+"."+extension);
    model.addAttribute("league_list", categoryService.findByGroupId(4));
	model.addAttribute("genre", categoryService.findByGroupId(2));
	model.addAttribute("age_group", categoryService.findByGroupId(1));
	model.addAttribute("keyword_1", categoryService.findByGroupId(6));
	model.addAttribute("keyword_2", categoryService.findByGroupId(7));
	model.addAttribute("keyword_3", categoryService.findByGroupId(8));
	model.addAttribute("keyword_4", categoryService.findByGroupId(9));
	model.addAttribute("item", book);
	return JSP_EDIT;
	}
	
	@RequestMapping(value = "/edit/{id}",method=RequestMethod.POST)
	public String updatePost(
	@RequestParam(value="title",defaultValue="") String title,
	@RequestParam(value="genre",defaultValue="") String genre,
	@RequestParam(value="adult",defaultValue="") String adult,
	@RequestParam(value="age_group",defaultValue="") String age_group,
	@RequestParam(value="league",defaultValue="") String league,
	@RequestParam(value="day_of_week",defaultValue="") String[] day_of_week,
	@RequestParam(value="introduce",defaultValue="") String introduce,
	@RequestParam(value="keyword1",defaultValue="") String keyword1,
	@RequestParam(value="keyword2",defaultValue="") String keyword2,
	@RequestParam(value="keyword3",defaultValue="") String keyword3,
	@RequestParam(value="keyword4",defaultValue="") String keyword4,
	@RequestParam(value="edit_image",defaultValue="0") Integer edit_image,
	@RequestParam(value="image_url",defaultValue="") String image_url,
	@RequestParam(value="file") MultipartFile file,
	@RequestParam(value="edit",defaultValue="0") Integer edit,

	HttpSession session,
	@PathVariable("id") Integer id,
	Model model  ) {
	if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
	Book book = bookService.findById(id);
		try {
			if(edit>0){
				book.setTitle(title);
				String[] genre_split=genre.split("@");
				book.setGenreId(Utils.parseInt(genre_split[0]));
				book.setGenreName(genre_split[1]);
				book.setAdult(adult);
				if(age_group!=null){
					String[] age_group_split=age_group.split("@");
					book.setAgeGroupId(Utils.parseInt(age_group_split[0]));
					book.setAgeGroupName(age_group_split[1]);
				}else{
					book.setAgeGroupId(null);
					book.setAgeGroupName(null);
				}
				
				String[] league_split=league.split("@");
				book.setLeagueId(Utils.parseInt(league_split[0]));
				book.setLeagueName(league_split[1]);
				
				String str="";
				if(day_of_week.length>0){
					for(int i=0;i<day_of_week.length;i++){
						if(i==0){
							str+=day_of_week[i];
						}else{
							str+=", "+day_of_week[i];
						}
					}
				}
				book.setDayOfWeek(str);
				book.setIntroduce(introduce);
				book.setKeyword1(keyword1);
				book.setKeyword2(keyword2);
				book.setKeyword3(keyword3);
				book.setKeyword4(keyword4);
				book.setIsDelete(0);
				if(file.getSize()>0){
					String path= FileUtils.saveFileOrigin(file, servletContext);
					book.setCoverImage(path);
				}
			}
			if(edit_image>0){
				book.setCoverImage(image_url);
			}
				book.setUpdateDate(new Date());
				book = bookService.update(book);
		        String baseName = FilenameUtils.getBaseName(book.getCoverImage());
		        String extension = FilenameUtils.getExtension(book.getCoverImage());
		        model.addAttribute("image_name",baseName+"."+extension);
				model.addAttribute("image_default", categoryService.findByGroupId(11));
				model.addAttribute("activePage", nav);
				model.addAttribute("league_list", categoryService.findByGroupId(4));
			model.addAttribute("genre", categoryService.findByGroupId(2));
			model.addAttribute("age_group", categoryService.findByGroupId(1));
			model.addAttribute("keyword_1", categoryService.findByGroupId(6));
			model.addAttribute("keyword_2", categoryService.findByGroupId(7));
			model.addAttribute("keyword_3", categoryService.findByGroupId(8));
			model.addAttribute("keyword_4", categoryService.findByGroupId(9));
			model.addAttribute("item", book);
			return "redirect:/admin/book/detail/"+id;
		} catch(Exception e) {
			System.out.println(e);
			return JSP_LIST;
		}
	}
	
	@RequestMapping(value = "/create" ) // GET or POST
	public String create(
			@RequestParam(value="create",defaultValue="0") Integer create,
			HttpSession session,
			Model model) {
		log("Action 'create'");
		if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
		try {
			if(create>0){
			Book book = new Book();
			
			book.setUpdateDate(new Date());
			book.setCreateDate(new Date());
			bookService.create(book);
			}
			return JSP_LIST;
		} catch(Exception e) {
			
			return JSP_CREATE;
		}
	}



}
