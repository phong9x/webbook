/*
 * Created on 22 Dec 2015 ( Time 09:23:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.web.controller;

import java.util.List;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

//--- Common classes
import org.trams.webbook.web.common.AbstractController;
import org.trams.webbook.web.common.FormMode;
import org.trams.webbook.web.common.Pager;
import org.trams.webbook.web.common.Utils;
import org.trams.webbook.web.common.Login;
import org.trams.webbook.web.common.Message;
import org.trams.webbook.web.common.MessageType;
import org.trams.webbook.bean.jpa.CouponPurchaseEntity;
import org.trams.webbook.bean.jpa.CouponUsedEntity;
import org.trams.webbook.bean.jpa.ProfitRefundEntity;
import org.trams.webbook.bean.CouponPurchase;
import org.trams.webbook.bean.CouponUsed;
//--- Entities
import org.trams.webbook.bean.ProfitRefund;
import org.trams.webbook.bean.User;
import org.trams.webbook.business.service.CategoryService;
import org.trams.webbook.business.service.CouponPurchaseService;
import org.trams.webbook.business.service.CouponUsedService;
//--- Services 
import org.trams.webbook.business.service.ProfitRefundService;


/**
 * Spring MVC controller for 'ProfitRefund' management.
 */
@Controller
@RequestMapping("")
public class SalesProfitController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "profitRefund";
	private static final String MAIN_LIST_NAME = "list";

	private static final String TOTAL_PAGE   = "pages";

	private static final String CURRENT_PAGE   = "pageNumber";

	private static final String LIST_PAGES   = "listPages";

	private static final Integer PAGE_SIZE   = 10;

	private static String nav = "sales";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_CREATE   = "profitRefund/create";
	private static final String JSP_LIST   = "sales_profit";
	private static final String JSP_PAGING   = "profitRefund";
	private static final String JSP_EDIT   = "profitRefund/edit";
	private static final String JSP_DETAIL   = "profitRefund/detail";
	private static final String JSP_LOGIN   = "redirect:/login";

	//--- Main entity service
	@Resource
    private ProfitRefundService profitRefundService; // Injected by Spring
	@Resource
    private CouponUsedService couponUsedService;
	@Resource
    private CouponPurchaseService couponPurchaseService;
	@Resource
    private CategoryService categoryService;
	//--- Other service(s)

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public SalesProfitController() {
		super(SalesProfitController.class, MAIN_ENTITY_NAME );
		log("ProfitRefundController created.");
	}
	//Decription: Show sales and profit page
	//Url       : http://kwebsosul.com/sales_profit
	@RequestMapping("/sales_profit")
	public String list(
			@RequestParam(value="page1",defaultValue="1") Integer page1,
			@RequestParam(value="page2",defaultValue="1") Integer page2,
			@RequestParam(value="year",defaultValue="0") Integer year,
			@RequestParam(value="month",defaultValue="0") Integer month,
			@RequestParam(value="depositAmount",defaultValue="0") Double depositAmount,
			@RequestParam(value="name",defaultValue="") String name,
			@RequestParam(value="residentNumber",defaultValue="") String residentNumber,
			@RequestParam(value="cellPhone",defaultValue="") String cellPhone,
			@RequestParam(value="email",defaultValue="") String email,
			@RequestParam(value="address1",defaultValue="") String address1,
			@RequestParam(value="address2",defaultValue="") String address2,
			@RequestParam(value="accountHolderName",defaultValue="") String accountHolderName,
			@RequestParam(value="relationship",defaultValue="") String relationship,
			@RequestParam(value="bank",defaultValue="") String bank,
			@RequestParam(value="accountNumber",defaultValue="") String accountNumber,
			@RequestParam(value="refund",defaultValue="0") Integer refund,
			HttpSession session,
			Model model) {
		if(Login.checkLogin(session)=="0")
			return JSP_LOGIN;
		User u = Login.getUserLogin(session);
		Integer totalCharge=couponUsedService.totalChargeAmountBy_UserId(u.getId());
		Integer totalRefund=profitRefundService.totalRefundBy_UserId(u.getId());
		model.addAttribute("total", totalCharge-totalRefund);
		if(refund>0 && depositAmount<=(totalCharge-totalRefund)){
			ProfitRefund p =new ProfitRefund();
			p.setDepositAmount(depositAmount);
			p.setName(name);
			p.setAccountNumber(accountNumber);
			p.setAddress(address1+" "+address2);
			p.setAccountHolderName(accountHolderName);
			String[] split = bank.split("`");
			p.setBankId(Utils.parseInt(split[0].trim()));
			p.setBankName(split[1].trim());
			p.setCellPhone(cellPhone);
			p.setCreateDate(new Date());
			p.setEmail(email);
			p.setIsDelete(0);
			p.setRelationship(relationship);
			p.setResidentNumber(residentNumber);
			p.setUpdateDate(new Date());
			p.setUserId(u.getId());
			p.setApplicationDate(new Date());
			p.setDeposited(0);
			profitRefundService.create(p);
		}
		List<CouponUsedEntity> listPage = null;
		Page<ProfitRefundEntity> listPage2 = null;
		Calendar c = Calendar.getInstance();
		int now_year = c.get(Calendar.YEAR);
		int now_month = c.get(Calendar.MONTH)+1;
		if(year==0 && month==0){
			year=now_year;
			month=now_month;
		}
		listPage=couponUsedService.listBy_AuthorId_Month_Year(u.getId(), month, year, page1, PAGE_SIZE);
		listPage2 =profitRefundService.listPagingBy_UserId(u.getId(), page2, PAGE_SIZE);		
		Integer count_all=couponUsedService.totalPageBy_AuthorId_Month_Year(u.getId(), month, year);
		 Integer total_page=0;
		 total_page=count_all/PAGE_SIZE;
		 if(count_all%PAGE_SIZE!=0){
			 total_page=total_page+1;
		 }	
		
		model.addAttribute("totalPages", total_page);
		if(page1==1){
			model.addAttribute("currentIndex", 1);
		}else if(page1==total_page){
			model.addAttribute("currentIndex", total_page);
		}else{
			model.addAttribute("currentIndex", page1);
		}
		model.addAttribute("endIndex", 1);
	    model.addAttribute("endIndex", total_page);
	   
	    //model.addAttribute("pagination_navigator", "/admin/sales_profit");
	    
		model.addAttribute(MAIN_LIST_NAME, listPage);
		model.addAttribute("page1", page1);
		model.addAttribute("page2", page2);
		model.addAttribute("year", year);
		model.addAttribute("month", month);
		model.addAttribute("now_year", now_year);
		model.addAttribute("now_month", now_month);
		model.addAttribute("list_bank", categoryService.findByGroupId(15));
		model.addAttribute("activePage", nav);
		model.addAttribute("activeMenu", nav);
		model.addAttribute("pagination_navigator", "/sales_profit");
		model.addAttribute("parameter", "year="+year+"&amp;month="+month);
		
		new Pager<ProfitRefundEntity>(listPage2).setSettingSecondList(model, "");
		return JSP_LIST;
	}

	//Decription: Show detail sales and profit page
	//Url       : http://kwebsosul.com/detail/{id}
	@RequestMapping("/detail/{id}")
	public String detail(
	Model model, 
	HttpSession session,
	@PathVariable("id") Integer id) {
		if(Login.checkLogin(session)=="0")
			return JSP_LOGIN;
		ProfitRefund profitRefund = profitRefundService.findById(id);
		model.addAttribute("activePage", nav);
		model.addAttribute("profitRefund", profitRefund);
		return JSP_DETAIL;
	}
	
	@RequestMapping(value = "/edit/{id}")
	public String update(
	@RequestParam(value="edit",defaultValue="0") Integer edit,
	HttpSession session,
	@PathVariable("id") Integer id,
	Model model  ) {
	if(Login.checkLogin(session)=="0")
			return JSP_LOGIN;
ProfitRefund profitRefund = profitRefundService.findById(id);
		try {
			if(edit>0){
				profitRefund = profitRefundService.update(profitRefund);
				profitRefund.setUpdateDate(new Date());
				
			}
			model.addAttribute("item", profitRefund);
			return JSP_EDIT;
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	@RequestMapping(value = "/create" ) // GET or POST
	public String create(
			@RequestParam(value="create",defaultValue="0") Integer create,
			HttpSession session,
			Model model) {
		log("Action 'create'");
		if(Login.checkLogin(session)=="0")
			return JSP_LOGIN;
		try {
			if(create>0){
			ProfitRefund profitRefund = new ProfitRefund();
			
			profitRefund.setUpdateDate(new Date());
			profitRefund.setCreateDate(new Date());
			profitRefundService.update(profitRefund);
			model.addAttribute("activeMenu", nav);
			}
			return JSP_LIST;
		} catch(Exception e) {
			
			return JSP_CREATE;
		}
	}

	@RequestMapping(value = "/delete/{id}")
	public String delete(
	Model model, 
	HttpSession session,
	@PathVariable("id") Integer id ) {
	if(Login.checkLogin(session)=="0")
			return JSP_LOGIN;
		profitRefundService.delete(id);
		return JSP_LIST;
	}

}
