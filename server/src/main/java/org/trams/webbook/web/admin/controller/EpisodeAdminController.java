/*
 * Created on 22 Dec 2015 ( Time 09:23:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.web.admin.controller;

import java.util.List;
import java.util.ArrayList;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

//--- Common classes
import org.trams.webbook.web.common.AbstractController;
import org.trams.webbook.web.common.FormMode;
import org.trams.webbook.web.common.Pager;
import org.trams.webbook.web.common.Login;
import org.trams.webbook.web.common.Message;
import org.trams.webbook.web.common.MessageType;
import org.trams.webbook.bean.jpa.BookEntity;
import org.trams.webbook.bean.jpa.EpisodeEntity;
import org.trams.webbook.bean.Book;
//--- Entities
import org.trams.webbook.bean.Episode;
import org.trams.webbook.business.service.BookService;
//--- Services 
import org.trams.webbook.business.service.EpisodeService;
import org.trams.webbook.business.service.mapping.BookServiceMapper;


/**
 * Spring MVC controller for 'Episode' management.
 */
@Controller
@RequestMapping("/admin/episode")
public class EpisodeAdminController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "episode";
	private static final String MAIN_LIST_NAME = "list";

	private static final String TOTAL_PAGE   = "pages";

	private static final String CURRENT_PAGE   = "pageNumber";

	private static final String LIST_PAGES   = "listPages";

	private static final Integer PAGE_SIZE   = 15;

	private static String nav = "episode";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_CREATE   = "admin/episode/create";
	private static final String JSP_LIST   = "admin/episode/list";
	private static final String JSP_PAGING   = "admin/episode";
	private static final String JSP_EDIT   = "admin/episode/edit";
	private static final String JSP_DETAIL   = "admin/episode/detail";
	private static final String JSP_LOGIN   = "redirect:/admin/login";

	//--- Main entity service
	@Resource
    private EpisodeService episodeService; // Injected by Spring
	@Resource
    private BookService bookService;
	@Resource
    private BookServiceMapper bookServiceMapper;
	//--- Other service(s)

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public EpisodeAdminController() {
		super(EpisodeAdminController.class, MAIN_ENTITY_NAME );
		log("EpisodeAdminController created.");
	}
	
	@RequestMapping("/list")
	public String list(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="type",defaultValue="id") String type,
			@RequestParam(value="key",defaultValue="") String key,
			HttpSession session,
			Model model) {
		if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
		Page<EpisodeEntity> listPage = null;
		listPage=episodeService.findAll(page);
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("key", key);
		model.addAttribute("type", type);
		model.addAttribute("activePage", nav);
		model.addAttribute("pagination_navigator", "/episode/list");
		new Pager<EpisodeEntity>(listPage).setSetting(model, "type="+type+"&amp;key="+key+"&amp;");		
		return JSP_LIST;
	}

	
	@RequestMapping(value = "/detail/{id}")
	public String detail(
	@RequestParam(value="delete",defaultValue="0") Integer delete,
	@RequestParam(value = "price", defaultValue = "0") Integer price,
	@RequestParam(value = "complete", defaultValue = "0") Integer complete,
	@RequestParam(value = "title", defaultValue = "") String title,
	@RequestParam(value = "content", defaultValue = "") String content,
	@RequestParam(value = "epilogue", defaultValue = "") String epilogue,
	HttpSession session,
	@PathVariable("id") Integer id,
	Model model  ) {
	if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
	
		Episode e = episodeService.findById(id);
		BookEntity book = bookService.findOne(e.getBookId());
		try {
			if(delete>0){
				episodeService.delete(id);
				book.setEpisodeNumber(book.getEpisodeNumber()-1);
				bookService.update(bookServiceMapper.mapBookEntityToBook(book));
				return "redirect:/admin/book/detail/"+book.getId();
			}
			model.addAttribute("book", book);
			model.addAttribute("e", e);
			return JSP_DETAIL;
		} catch(Exception ex) {
			return JSP_LIST;
		}
	}
	//Decription: Edit episode
	//Url: http://kwebsosul.com/admin/episode/edit/{id}
	@RequestMapping(value = "/edit/{id}")
	public String update(
	@RequestParam(value="edit",defaultValue="0") Integer edit,
	@RequestParam(value="delete",defaultValue="0") Integer delete,
	@RequestParam(value = "price", defaultValue = "0") Integer price,
	@RequestParam(value = "complete", defaultValue = "0") Integer complete,
	@RequestParam(value = "title", defaultValue = "") String title,
	@RequestParam(value = "content", defaultValue = "") String content,
	@RequestParam(value = "epilogue", defaultValue = "") String epilogue,
	HttpSession session,
	@PathVariable("id") Integer id,
	Model model  ) {
	if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
	
		Episode e = episodeService.findById(id);
		BookEntity book = bookService.findOne(e.getBookId());
		try {
			if(edit>0){
				e.setPrice(price);
				e.setTitle(title);
				e.setContent(content);
				e.setEpilogue(epilogue);
				e.setComplete(complete);
				e.setUpdateDate(new Date());
				e.setIsShow(1);
				e.setTemporarySave(0);
				Episode ok = episodeService.update(e);
				e = episodeService.update(e);
				return "redirect:/admin/episode/detail/"+e.getId();
			}
			if(delete>0){
				episodeService.delete(id);
				book.setEpisodeNumber(book.getEpisodeNumber()-1);
				bookService.update(bookServiceMapper.mapBookEntityToBook(book));
				return "redirect:/admin/book/detail/"+book.getId();
			}
			model.addAttribute("book", book);
			model.addAttribute("e", e);
			return JSP_EDIT;
		} catch(Exception ex) {
			return JSP_LIST;
		}
	}
	
	@RequestMapping(value = "/create" ) // GET or POST
	public String create(
			@RequestParam(value="create",defaultValue="0") Integer create,
			HttpSession session,
			Model model) {
		log("Action 'create'");
		if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
		try {
			if(create>0){
			Episode episode = new Episode();
			
			episode.setUpdateDate(new Date());
			episode.setCreateDate(new Date());
			episodeService.create(episode);
			}
			return JSP_LIST;
		} catch(Exception e) {
			
			return JSP_CREATE;
		}
	}

	
}
