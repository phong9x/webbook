/*
 * Created on 22 Dec 2015 ( Time 09:23:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.web.controller;

import java.util.List;
import java.util.Random;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;

import javax.annotation.Resource;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

//--- Common classes
import org.trams.webbook.web.common.AbstractController;
import org.trams.webbook.web.common.FormMode;
import org.trams.webbook.web.common.Pager;
import org.trams.webbook.web.common.Utils;
import org.trams.webbook.web.common.Login;
import org.trams.webbook.web.common.Message;
import org.trams.webbook.web.common.MessageType;
import org.trams.webbook.bean.jpa.UserEntity;

//--- Entities
import org.trams.webbook.bean.User;
import org.trams.webbook.business.service.CategoryService;
//--- Services 
import org.trams.webbook.business.service.UserService;

/**
 * Spring MVC controller for 'User' management.
 */
@Controller
@RequestMapping("")
public class MyInfoController extends AbstractController {

	// --- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "user";
	private static final String MAIN_LIST_NAME = "list";

	private static final String TOTAL_PAGE = "pages";

	private static final String CURRENT_PAGE = "pageNumber";

	private static final String LIST_PAGES = "listPages";

	private static final Integer PAGE_SIZE = 10;

	private static String nav = "my_page";
	private static String mav = "my_info";

	// --- JSP pages names ( View name in the MVC model )
	private static final String JSP_MY_INFO = "my_info";
	private static final String JSP_MEMBER_WITHDRAW = "my_info/member_withdraw";
	private static final String JSP_LOGIN = "redirect:/login";

	// --- Main entity service
	@Resource
	private UserService userService; // Injected by Spring
	@Resource
	private CategoryService categoryService; // Injected by Spring
	// --- Other service(s)

	// --------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public MyInfoController() {
		super(MyInfoController.class, MAIN_ENTITY_NAME);
		log("UserController created.");
	}
	//Decription: Create my info
	//Url       : http://kwebsosul.com/my_info
	@RequestMapping("/my_info")
	public String detail(
	@RequestParam(value="auth", defaultValue="0") Integer auth,
	@RequestParam(value="edit",defaultValue="0") Integer edit,
	@RequestParam(value = "fullname", defaultValue = "") String fullname,
	@RequestParam(value = "nickname", defaultValue = "") String nickname,
	@RequestParam(value = "password1", defaultValue = "") String password1,
	@RequestParam(value = "password2", defaultValue = "") String password2,
	@RequestParam(value = "email", defaultValue = "") String email,
	@RequestParam(value = "phone", defaultValue = "") String phone,
	@RequestParam(value = "year", defaultValue = "") Integer year,
	@RequestParam(value = "month", defaultValue = "") Integer month,
	@RequestParam(value = "day", defaultValue = "") Integer day,
	@RequestParam(value = "gender", defaultValue = "") String gender,
	@RequestParam(value = "check_adult", defaultValue = "0") Integer check_adult,
		Model model, 
	HttpSession session,HttpServletResponse response,HttpServletRequest request
	) {
		if(Login.checkLogin(session)=="0")
			return JSP_LOGIN;
		System.out.println("==========================================");
		model.addAttribute("auth", auth);
		User u = Login.getUserLogin(session);
		User user =userService.findById(u.getId());
		
		SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
	    String birthDay = sdf2.format(user.getDayOfBirth().getTime());
	    String birthDay2 = sdf2.format(user.getDayOfBirth());
	    System.out.println("birthDay: "+ birthDay);
	    System.out.println("birthDay2: "+ birthDay2);
	    
		Date nowDate = new Date();
		Calendar c = new GregorianCalendar();
		c.setTime(nowDate);
		int nowYear = c.get(Calendar.YEAR);
		model.addAttribute("year", nowYear);
		model.addAttribute("u", user);
		model.addAttribute("activePage", nav);
		model.addAttribute("activeMenu", mav);
		Calendar e = new GregorianCalendar();
		e.setTime(user.getDayOfBirth());
		model.addAttribute("yearBirth",  e.get(Calendar.YEAR));
		model.addAttribute("monthBirth", e.get(Calendar.MONTH)+1);
		model.addAttribute("dayBirth",  e.get(Calendar.DATE));
		model.addAttribute("check_adult",  check_adult);
		model.addAttribute("adult_success", null);
		//Set Value Process Adult Certification
		Calendar today = Calendar.getInstance();
        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
        String nowday = sdf.format(today.getTime());
        java.util.Random ran = new Random();
        //랜덤 문자 길이
        int numLength = 6;
        String randomStr = "";

        for (int i = 0; i < numLength; i++) {
            //0 ~ 9 랜덤 숫자 생성
            randomStr += ran.nextInt(10);
        }
	        Cookie ck = new Cookie("reqNum", nowday + randomStr);
	    	//c.setMaxAge(1800);  // <== 필요시 설정(초단위로 설정됩니다)
	    	response.addCookie(ck);

	        //01. 암호화 모듈 선언
	    	com.sci.v2.pcc.secu.SciSecuManager seed  = new com.sci.v2.pcc.secu.SciSecuManager();

	    	//02. 1차 암호화
	    	String id="SUTX001";
	    	String srvNo="003001";
	    	String req_Num=nowday + randomStr;
	    	String cert_Date=nowday;
	    	String cert_Gb="H";
	    	String add_Var="";
	    	String exVar="0000000000000000";
	    	String encStr = "";
	    	String reqInfo      = id+"^"+srvNo+"^"+req_Num+"^"+cert_Date+"^"+cert_Gb+"^"+add_Var+"^"+exVar;  // 데이터 암호화
	    	encStr              = seed.getEncPublic(reqInfo);

	    	//03. 위변조 검증 값 생성
	    	com.sci.v2.pcc.secu.hmac.SciHmac hmac = new com.sci.v2.pcc.secu.hmac.SciHmac();
	    	String hmacMsg = hmac.HMacEncriptPublic(encStr);

	    	//03. 2차 암호화
	    	reqInfo  = seed.getEncPublic(encStr + "^" + hmacMsg + "^" + "0000000000000000");  //2차암호화
	        model.addAttribute("reqInfo", reqInfo);

	        //End Process Adult Certification
	        ///******************************************************************************************************************//
	        // Process result adult return
	        if(check_adult==1){
	        	model.addAttribute("check_adult", 0);
			 	String retInfo		= "";																// 결과정보
				String name			= "";                                                               //성명
				String sex			= "";																//성별
				String birYMD		= "";																//생년월일
				String fgnGbn		= "";																//내외국인 구분값
			    String di			= "";																//DI
			    String ci1			= "";																//CI
			    String ci2			= "";																//CI
			    String civersion    = "";                                                               //CI Version
			    String reqNum		= "";                                                               // 본인확인 요청번호
			    String result		= "";                                                               // 본인확인결과 (Y/N)
			    String certDate		= "";                                                               // 검증시간
			    String certGb		= "";                                                               // 인증수단
				String cellNo		= "";																// 핸드폰 번호
				String cellCorp		= "";																// 이동통신사
				String addVar		= "";

				//복화화용 변수
				String encPara		= "";
				String encMsg		= "";
				String msgChk       = "N";  
			
				Cookie[] cookies = request.getCookies();
			    String cookiename = "";
			    String cookiereqNum = "";
				if(cookies!=null){
					for (int i = 0; i < cookies.length; i++){
						Cookie cook = cookies[i];
						cookiename = cook.getName();
						cookiereqNum = cook.getValue();
						if(cookiename.compareTo("reqNum")==0) break;
						cookiereqNum = null;
					}
				}
				try {
					retInfo  = request.getParameter("retInfo").trim();
					
					com.sci.v2.pcc.secu.SciSecuManager sciSecuMg = new com.sci.v2.pcc.secu.SciSecuManager();
			        //쿠키에서 생성한 값을 Key로 생성 한다.
			        retInfo  = sciSecuMg.getDec(retInfo, cookiereqNum);
			        System.out.println("retInfo:"+retInfo);
			        // 2.1차 파싱---------------------------------------------------------------
			        String[] aRetInfo1 = retInfo.split("\\^");

					encPara  = aRetInfo1[0];         //암호화된 통합 파라미터
			        encMsg   = aRetInfo1[1];    //암호화된 통합 파라미터의 Hash값
					
					String  encMsg2   = sciSecuMg.getMsg(encPara);
						// 3.위/변조 검증 ---------------------------------------------------------------
			        if(encMsg2.equals(encMsg)){
			            msgChk="Y";
			            
			        }

					if(msgChk.equals("N")){
						System.out.println("Not Success!");
					}
					retInfo  = sciSecuMg.getDec(encPara, cookiereqNum);
					
			        String[] aRetInfo = retInfo.split("\\^");
			        name		= aRetInfo[0];
					birYMD		= aRetInfo[1];
			        sex			= aRetInfo[2];        
			        fgnGbn		= aRetInfo[3];
			        di			= aRetInfo[4];
			        ci1			= aRetInfo[5];
			        ci2			= aRetInfo[6];
			        civersion	= aRetInfo[7];
			        reqNum		= aRetInfo[8];
			        result		= aRetInfo[9];
			        certGb		= aRetInfo[10];
					cellNo		= aRetInfo[11];
					cellCorp	= aRetInfo[12];
			        certDate	= aRetInfo[13];
					addVar		= aRetInfo[14];
		    		//SimpleDateFormat sdf2 = new SimpleDateFormat("yyyyMMdd");
		    	    //String birthDay = sdf2.format(user.getDayOfBirth().getTime());
					System.out.println("name:"+name);
					System.out.println("nameData:"+user.getFullname());
					System.out.println("birYMD:"+birYMD);
					System.out.println("birthDay:"+birthDay);
					System.out.println("sex:"+sex);
					System.out.println("di:"+di);
					System.out.println("ci1:"+ci1);
					System.out.println("ci2:"+ci2);
					System.out.println("civersion:"+civersion);
					System.out.println("reqNum:"+reqNum);
					System.out.println("result:"+result);
					System.out.println("certGb:"+certGb);
					System.out.println("cellNo:"+cellNo);
					System.out.println("cellCorp:"+cellCorp);
					System.out.println("certDate:"+certDate);
					System.out.println("addVar:"+addVar);
		    	    Integer check=0;
					if(result.equalsIgnoreCase("Y")){
							System.out.println("Result is yes!");
						if(name.equalsIgnoreCase(user.getFullname()) && birthDay.equalsIgnoreCase(birYMD)){
							user.setAdultVerification(1);
							user=userService.update(user);
							Login.save(user, session);
							model.addAttribute("u",user);
							System.out.println("Result is Sucess!");
							model.addAttribute("adult_success", 1);
							return JSP_MY_INFO;
						}
					}else if(result.equalsIgnoreCase("N")){
						model.addAttribute("adult_success", 0);
						System.out.println("Result is No!");
						return JSP_MY_INFO;
					}else{
						model.addAttribute("adult_success", 0);
						System.out.println("Result is Failre!");
						return JSP_MY_INFO;
					}
				} catch (Exception ex) {
					model.addAttribute("adult_success", 0);
					System.out.println(">>>>>>Error:"+ex);
					return JSP_MY_INFO;
				}
	        }
	        //End Process result adult return
	        ///******************************************************************************************************************//
			if ( fullname != null && nickname != null 
					&& nickname != null && email != null && phone != null) {
				try {
					user.setFullname(fullname);
					user.setNickname(nickname);
					if(password1!=null ){
						if(password1.trim()!="" && password1.equalsIgnoreCase(password2)){
							user.setPassword(Utils.getMD5(password1));
						}
						
					}
					
					user.setEmail(email);
					user.setPhone(phone);
					user.setGender(gender);
					Calendar calendar = Calendar.getInstance();
					calendar.set(Calendar.YEAR, year);
					calendar.set(Calendar.MONTH, month-1);
					calendar.set(Calendar.DAY_OF_MONTH, day);
					Date d = calendar.getTime();
					user.setDayOfBirth(d);
					user.setUpdateDate(new Date());
					user=userService.update(user);
					Login.save(user, session);
					model.addAttribute("u", user);
					e.setTime(user.getDayOfBirth());
					model.addAttribute("yearBirth",  e.get(Calendar.YEAR));
					model.addAttribute("monthBirth", e.get(Calendar.MONTH)+1 );
					model.addAttribute("dayBirth",  e.get(Calendar.DATE));
				} catch (Exception ex) {
					System.out.println(ex);
					model.addAttribute("required", 1);
				}
				
				return JSP_MY_INFO;
			} else {
				model.addAttribute("required", 1);
				return JSP_MY_INFO;
			}
			
			
		
	}
	
	@RequestMapping("/check_adult")
	public String detail(
	Model model, 
	HttpSession session,HttpServletResponse response,HttpServletRequest request
	) {
		if(Login.checkLogin(session)=="0"){
			return JSP_LOGIN;
		}
		return "redirect:/my_info";
	}
	
	@RequestMapping(value = "/member_withdraw")
	public String update(@RequestParam(value = "username", defaultValue = "") String username,
			@RequestParam(value = "password", defaultValue = "") String password,
			@RequestParam(value = "leave_reason", defaultValue = "") String leave_reason, HttpSession session,
			Model model) {
		if (Login.checkLogin(session) == "0")
			return JSP_LOGIN;
		model.addAttribute("activePage", nav);
		model.addAttribute("activeMenu", mav);
		User user = Login.getUserLogin(session);
		model.addAttribute("listReason", categoryService.findByGroupId(5));
		try {
			if (username != null && password != null) {
				if (user.getUsername().equalsIgnoreCase(username)
						&& user.getPassword().equalsIgnoreCase(Utils.getMD5(password))) {
					user.setUpdateDate(new Date());
					user.setActive(0);
					user.setIsDelete(1);
					user.setLeaveReason(leave_reason);
					user = userService.update(user);
					return "redirect:/login";
				} else {
					model.addAttribute("err", 1);
				}
			}
			model.addAttribute("item", user);
			return JSP_MEMBER_WITHDRAW;
		} catch (Exception e) {
			return JSP_MEMBER_WITHDRAW;
		}
	}

}
