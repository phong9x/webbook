/*
 * Created on 22 Dec 2015 ( Time 09:23:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.web.admin.controller;

import java.util.List;
import java.text.DateFormat;
import java.util.ArrayList;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

//--- Common classes
import org.trams.webbook.web.common.AbstractController;
import org.trams.webbook.web.common.FormMode;
import org.trams.webbook.web.common.Pager;
import org.trams.webbook.web.common.Utils;
import org.trams.webbook.web.common.Login;
import org.trams.webbook.web.common.Message;
import org.trams.webbook.web.common.MessageType;
import org.trams.webbook.bean.jpa.CategoryEntity;
import org.trams.webbook.bean.jpa.CouponUsedEntity;
import org.trams.webbook.bean.jpa.UserEntity;
import org.trams.webbook.bean.CouponPurchase;
import org.trams.webbook.bean.CouponUsed;
//--- Entities
import org.trams.webbook.bean.User;
import org.trams.webbook.business.service.CategoryService;
import org.trams.webbook.business.service.CouponPurchaseService;
import org.trams.webbook.business.service.CouponUsedService;
//--- Services 
import org.trams.webbook.business.service.UserService;


/**
 * Spring MVC controller for 'User' management.
 */
@Controller
@RequestMapping("/admin/user")
public class UserAdminController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "user";
	private static final String MAIN_LIST_NAME = "list";

	private static final String TOTAL_PAGE   = "pages";

	private static final String CURRENT_PAGE   = "pageNumber";

	private static final String LIST_PAGES   = "listPages";

	private static final Integer PAGE_SIZE   = 10;

	private static String nav = "user";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_CREATE   = "admin/user/create";
	private static final String JSP_LIST   = "admin/user/list";
	private static final String JSP_PAGING   = "admin/user";
	private static final String JSP_EDIT   = "admin/user/edit";
	private static final String JSP_DETAIL   = "admin/user/detail";
	private static final String JSP_LOGIN   = "redirect:/admin/login";

	//--- Main entity service
	@Resource
    private UserService userService; // Injected by Spring
	@Resource
    private CategoryService categoryService; // Injected by Spring
	@Resource
    private CouponUsedService couponUsedService; // Injected by Spring
	@Resource
    private CouponPurchaseService couponPurchaseService; // Injected by Spring
	//--- Other service(s)

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public UserAdminController() {
		super(UserAdminController.class, MAIN_ENTITY_NAME );
		log("UserAdminController created.");
	}
	//Decription: show list user
	//Url: http://kwebsosul.com/admin/uesr/list
	@RequestMapping("/list")
	public String list(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="age_group",defaultValue="") String age_group,
			@RequestParam(value="auhor_name",defaultValue="") String auhor_name,
			@RequestParam(value="type",defaultValue="0") Integer type,
			@RequestParam(value="key",defaultValue="") String key,
			@RequestParam(value="delete",defaultValue="0") Integer delete,
			@RequestParam(value="search",defaultValue="0") Integer search,
			@RequestParam(value="filter",defaultValue="0") Integer filter,
			HttpSession session,
			Model model) {
		if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
		if(delete > 0){
			User u = userService.findById(delete);
			u.setIsDelete(1);
			userService.update(u);
		}
		Page<UserEntity> listPage = null;
		String username = "";
		String nickname = "";
		String fullname = "";
		if(age_group == null){
			age_group = "";
		}
		if(auhor_name ==null ){
			auhor_name = "";
		}
		if(key != null){
			if(type==0){
				username = key;
			}if(type == 1){
				fullname = key;
			}if(type == 2){
				nickname = key;
			}
		}
		if(key==null){
			key="";
		}
		if(search > 0 || filter > 0){
				listPage = userService.listPagingSearch("%"+age_group+"%", "%"+auhor_name+"%", "%"+username+"%", "%"+nickname+"%", "%"+fullname+"%", page, PAGE_SIZE);
		}else{
			listPage = userService.listPaging(page, PAGE_SIZE);
		}
		model.addAttribute(MAIN_LIST_NAME, listPage);
		model.addAttribute("age_group_list", categoryService.findByGroupId(1));
		List<CategoryEntity> author_list=categoryService.findByGroupId(10);
		for (CategoryEntity categoryEntity : author_list) {
			if(categoryEntity.getId()==26){
				categoryEntity.setCatname("작가");
			}
		}
		model.addAttribute("author_list", author_list);
		model.addAttribute("age_group", age_group);
		model.addAttribute("author_name", auhor_name);
		model.addAttribute("key", key);
		model.addAttribute("type", type);
		
		model.addAttribute("activePage", nav);
		model.addAttribute("pagination_navigator", "/admin/user/list");
		new Pager<UserEntity>(listPage).setSetting(model, "type="+type+"&amp;key="+key+"&amp;");		
		return JSP_LIST;
	}
	//Decription: show detail user
	//Url: http://kwebsosul.com/admin/uesr/detail/{id}
	
	@RequestMapping("/detail/{id}")
	public String detail(
	Model model,
	HttpSession session,
	@RequestParam(value="fullname", defaultValue="")String fullname,
	@RequestParam(value="nickname", defaultValue="")String nickname,
	@RequestParam(value="age_group", defaultValue="")String age_group,
	@RequestParam(value="author", defaultValue="")String author,
	@RequestParam(value="email", defaultValue="")String email,
	@RequestParam(value="phone", defaultValue="")String phone,
	@RequestParam(value="dayOfBirth", defaultValue="")String dayOfBirth,
	@RequestParam(value="gender", defaultValue="")String gender,
	@RequestParam(value="adult",defaultValue="0") Integer adult,
	@RequestParam(value="update", defaultValue="0")Integer update,
	@RequestParam(value="changeAmount", defaultValue="0")Integer changeAmount,
	@RequestParam(value="calculate",defaultValue="0") Integer calculate,
	@RequestParam(value="params",defaultValue="0") Integer params,
	@RequestParam(value="totalCoupon",defaultValue="0") Integer totalCoupon,
	
	@PathVariable("id") Integer id) {
		if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
		User user = userService.findById(id);
		CouponUsed couponused = couponUsedService.findById(id);
		if(update > 0){
			
			user.setFullname(fullname);
			user.setNickname(nickname);
			String[] split1=age_group.split("`");
			user.setAgeGroupId(Utils.parseInt(split1[0]));
			user.setAgeGroupName(split1[1]);
			String[] split2=author.split("`");
			user.setAuthorLevel(Utils.parseInt(split2[0]));
			user.setAuthorName(split2[1]);
			user.setEmail(email);
			user.setPhone(phone);
			Date d = new Date();
			d = Utils.convertStringtoUtilDate(dayOfBirth, "yyyy-MM-dd");
			user.setDayOfBirth(d);
			user.setGender(gender);
			user.setAdultVerification(adult);
			userService.update(user);
			return "redirect:/admin/user/list";
		}
		if(changeAmount >0 && calculate == 0){
			user.setTotalCoupon(user.getTotalCoupon()+params);
			user=userService.update(user);
		}if(changeAmount >0 && calculate != 0){
			user.setTotalCoupon(user.getTotalCoupon()-params);
			user=userService.update(user);
		}
		model.addAttribute("adult", adult);
		model.addAttribute("user", user);
		model.addAttribute("totalAmountUserID", couponUsedService.totalChargeAmountBy_UserId(id));
		model.addAttribute("totalAmountPurchaseUserID", couponPurchaseService.totalAmountPurchase_UserId(id));
		model.addAttribute("coupon", couponused);
		model.addAttribute("calculate", calculate);
		model.addAttribute("params", params);
		model.addAttribute("age_group_list", categoryService.findByGroupId(1));
		model.addAttribute("author_list", categoryService.findByGroupId(10));
		return JSP_DETAIL;
	}
	//Decription: edit user
	//Url: http://kwebsosul.com/admin/uesr/edit/{id}
	@RequestMapping(value = "/edit/{id}")
	public String update(
	@RequestParam(value="edit",defaultValue="0") Integer edit,
	HttpSession session,
	@PathVariable("id") Integer id,
	Model model  ) {
	if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
	model.addAttribute("activePage", nav);
User user = userService.findById(id);
		try {
			if(edit>0){
				user = userService.update(user);
				user.setUpdateDate(new Date());
				
			}
			model.addAttribute("item", user);
			return JSP_EDIT;
		} catch(Exception e) {
			return JSP_LIST;
		}
	}
	
	@RequestMapping(value = "/create" ) // GET or POST
	public String create(
			@RequestParam(value="create",defaultValue="0") Integer create,
			HttpSession session,
			Model model) {
		log("Action 'create'");
		if(Login.checkAdminLogin(session)=="0")
			return JSP_LOGIN;
		try {
			if(create>0){
			User user = new User();
			
			user.setUpdateDate(new Date());
			user.setCreateDate(new Date());
			userService.create(user);
			}
			return JSP_LIST;
		} catch(Exception e) {
			
			return JSP_CREATE;
		}
	}

	
}
