/*

 * Created on 15 Dec 2015 ( Time 14:50:18 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.web.admin.controller;

import java.util.List;
import java.util.ArrayList;
import java.util.Calendar;

import javax.annotation.Resource;
import javax.servlet.http.Cookie;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;
import org.springframework.data.domain.Page;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

//--- Common classes
import org.trams.webbook.web.common.AbstractController;
import org.trams.webbook.web.common.FormMode;
import org.trams.webbook.web.common.Pager;
import org.trams.webbook.web.common.Login;
import org.trams.webbook.web.common.Message;
import org.trams.webbook.web.common.MessageType;
import org.trams.webbook.bean.jpa.UserEntity;
import org.trams.webbook.web.common.Utils;
import org.trams.webbook.web.item.StatisticBook;
import org.trams.webbook.web.item.StatisticCoupon;
import org.trams.webbook.web.item.StatisticEpisode;
import org.trams.webbook.web.item.StatisticMember;
import org.trams.webbook.bean.CouponPurchase;
//--- Entities
import org.trams.webbook.bean.User;
import org.trams.webbook.business.service.BookService;
import org.trams.webbook.business.service.CouponPurchaseService;
import org.trams.webbook.business.service.EpisodeService;
//--- Services 
import org.trams.webbook.business.service.UserService;
import org.trams.webbook.data.repository.jpa.BookJpaRepository;


/**
 * Spring MVC controller for 'User' management.
 */
@Controller
@RequestMapping("/admin")
public class MainAdminController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "user";
	private static final String MAIN_LIST_NAME = "list";

	private static final String TOTAL_PAGE   = "pages";

	private static final String CURRENT_PAGE   = "pageNumber";

	private static final String LIST_PAGES   = "listPages";

	private static final Integer PAGE_SIZE   = 15;

	private static String nav = "home";

	//--- JSP pages names ( View name in the MVC model )
	private static final String JSP_LOGIN   = "admin/login";

	//--- SAVE ACTION ( in the HTML form )
	private static final String SAVE_ACTION_CREATE   = "/user/create";
	private static final String SAVE_ACTION_UPDATE   = "/user/update";

	//--- Main entity service
	@Resource
    private UserService userService; // Injected by Spring
	@Resource
	private CouponPurchaseService couponPurchaseService;
	@Resource
	private EpisodeService episodeService;
	@Resource
	private BookService bookService;
	//--- Other service(s)

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public MainAdminController() {
		super(MainAdminController.class, MAIN_ENTITY_NAME );
		log("UserController created.");
	}

	//--------------------------------------------------------------------------------------
	// Spring MVC model management
	//--------------------------------------------------------------------------------------

	/**
	 * Populates the Spring MVC model with the given entity and eventually other useful data
	 * @param model
	 * @param user
	 */
	@RequestMapping(value = "/login", method = RequestMethod.POST)
	public String login(@RequestParam(value = "username", defaultValue = "") String username,
			@RequestParam(value = "password", defaultValue = "") String password,
			@RequestParam(value = "remember", defaultValue = "") String remember, HttpSession session,
			HttpServletRequest request, HttpServletResponse response, Model model) {
		try {
			if (username != null && password != null && username != "" && password != "") {
				String md5 = Utils.getMD5(password);
				UserEntity userEntity = userService.login(username, md5, 1);
				
				if (userEntity != null) {
					User user = userService.findById(userEntity.getId());
					Login.saveAdmin(user, session);
					if (remember != null && remember.equalsIgnoreCase("on")) {
						Cookie name = new Cookie("username", username);
						Cookie pass = new Cookie("password", password);
						// Set expiry date after 24 Hrs for both the cookies.
						name.setMaxAge(60 * 60 * 24);
						pass.setMaxAge(60 * 60 * 24);
						// Add both the cookies in the response header.
						response.addCookie(name);
						response.addCookie(pass);
						model.addAttribute("user", user);
					}
					return "redirect:/admin/";

				} else {
					model.addAttribute("err", "nouser");
					model.addAttribute("username", username);
					model.addAttribute("activePage", nav);
					return JSP_LOGIN;
				}
			}
		} catch (Exception e) {
			System.out.println(e);
			model.addAttribute("err", "err");
			return JSP_LOGIN;
		}
		return JSP_LOGIN;

	}

	@RequestMapping(value = "/login", method = RequestMethod.GET)
	public String login3(HttpSession session, HttpServletRequest servletRequest,Model model) {
		if (Login.checkAdminLogin(session) == "0") {
			Cookie[] cookies = servletRequest.getCookies();
			if (cookies != null) {
				for (Cookie cookie : cookies) {
					if (cookie.getName().equals("username")) {
							model.addAttribute("username",cookie.getValue());
					}
					if (cookie.getName().equals("password")) {
						model.addAttribute("password",cookie.getValue());
					}
				}
			}			
		} 
		return JSP_LOGIN;
	}
	

	@RequestMapping(value = "/logout")
	public String logout(HttpSession session) {
		session.removeAttribute("admin");
		return "redirect:/admin/login";
	}


	@RequestMapping("/")
	public String login4(HttpSession session,Model model) {
		if (Login.checkAdminLogin(session) == "0") {
			return "admin/login";
		} else {
			StatisticMember m=new StatisticMember();
			StatisticCoupon c=new StatisticCoupon();
			StatisticEpisode e=new StatisticEpisode();
			StatisticBook b =new StatisticBook();
			try {
				m=userService.calculateMember();
				model.addAttribute("m", m);
				e=episodeService.caculateEpisode();
				model.addAttribute("e", e);
				b=bookService.calculateBook();
				model.addAttribute("b", b);
				c=couponPurchaseService.calculateCoupon();
				model.addAttribute("c", c);
			} catch (Exception e2) {
				System.out.println(e2);
			}
			Calendar date = Calendar.getInstance();
			int now_year = date.get(Calendar.YEAR);
			int now_month = date.get(Calendar.MONTH)+1;
			List<Integer> report_member=userService.reportMember12Month(now_month, now_year);
			List<Integer> report_withdraw=userService.reportMember_WithRaw_Number_By_12Month(now_month, now_year);
			List<Integer> report_active=userService.reportMember_Active_Number_By_12Month(now_month, now_year);
			List<Integer> report_conversion=userService.report_Conversion_Rate_By_12Month(now_month, now_year);
			List<Integer> report_charged=userService.reportMember_Charge_Number_By_12Month(now_month, now_year);
			List<Integer> report_total=userService.reportMember_Coupon_Charge_Total_By_12Month(now_month, now_year);
			
			model.addAttribute("report_member",report_member );
			model.addAttribute("report_withdraw",report_withdraw );
			model.addAttribute("report_active",report_active );
			model.addAttribute("report_conversion",report_conversion );
			model.addAttribute("report_charged",report_charged );
			model.addAttribute("report_total",report_total );
			model.addAttribute("activePage", nav);
			
			return "admin/index";
		}

	}

	
	@RequestMapping("")
	public String login2(HttpSession session) {
		if (Login.checkAdminLogin(session) == "0") {
			return "admin/login";
		} else {
			return "redirect:/admin/";
		}
	}
	
	

}
