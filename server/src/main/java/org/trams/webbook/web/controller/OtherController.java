/*
 * Created on 22 Dec 2015 ( Time 09:23:11 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.web.controller;

import java.util.List;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.ServletContext;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;
import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

//--- Common classes
import org.trams.webbook.web.common.AbstractController;
import org.trams.webbook.web.common.ApplicationDefine;
import org.trams.webbook.web.common.FileUtils;
import org.trams.webbook.web.common.FormMode;
import org.trams.webbook.web.common.Pager;
import org.trams.webbook.web.common.Utils;
import org.trams.webbook.web.common.Login;
import org.trams.webbook.web.common.Message;
import org.trams.webbook.web.common.MessageType;
import org.trams.webbook.bean.jpa.AnnouncementEntity;
import org.trams.webbook.bean.jpa.CategoryEntity;
import org.trams.webbook.bean.jpa.CommentEntity;
import org.trams.webbook.bean.jpa.ContactUsEntity;
import org.trams.webbook.bean.jpa.PostEntity;
import org.trams.webbook.bean.Announcement;
import org.trams.webbook.bean.Comment;
import org.trams.webbook.bean.ContactUs;
//--- Entities
import org.trams.webbook.bean.Post;
import org.trams.webbook.bean.User;
import org.trams.webbook.business.service.AnnouncementService;
import org.trams.webbook.business.service.CommentService;
import org.trams.webbook.business.service.ContactUsService;
//--- Services 
import org.trams.webbook.business.service.PostService;
import org.trams.webbook.business.service.mapping.ContactUsServiceMapper;
import org.trams.webbook.business.service.mapping.PostServiceMapper;


/**
 * Spring MVC controller for 'Post' management.
 */
@Controller
@RequestMapping("/other")
public class OtherController extends AbstractController {

	//--- Variables names ( to be used in JSP with Expression Language )
	private static final String MAIN_ENTITY_NAME = "other";
	private static final String MAIN_LIST_NAME = "list";

	private static final String TOTAL_PAGE   = "pages";

	private static final String CURRENT_PAGE   = "pageNumber";

	private static final String LIST_PAGES   = "listPages";

	private static final Integer PAGE_SIZE   = 10;

	private static String nav = "other";

	//--- JSP pages names ( View name in the MVC model )

	private static final String JSP_NOTICE   = "/other/notice";
	private static final String JSP_NOTICE_DETAIL   = "/other/notice/detail";
	private static final String JSP_EVENT   = "/other/event";
	private static final String JSP_FAQ   = "/other/faq";
	private static final String JSP_FAQ_DETAIL   = "/other/faq/detail";
	private static final String JSP_QUESTION   = "/other/question";
	private static final String JSP_QUESTION_VIEW   = "/other/question/view";
	private static final String JSP_QUESTION_WRITE   = "/other/question/write";
	private static final String JSP_QUESTION_EDIT   = "/other/question/edit";
	private static final String JSP_EVENT_VIEW   = "/other/event/view";
	private static final String JSP_EVENT_WRITE   = "/other/event/write";
	private static final String JSP_EVENT_EDIT   = "/other/event/edit";
	private static final String JSP_LOGIN   = "redirect:/login";

	//--- Main entity service
	@Resource
    private AnnouncementService announcementService; // Injected by Spring
	@Resource
    private PostService postService; // Injected by Spring
	@Resource
    private PostServiceMapper postServiceMapper;
	@Resource
    private ContactUsService contactUsService;
	@Resource
    private CommentService commentService;
    @Resource
    private ContactUsServiceMapper contactUsServiceMapper;
    @Autowired 
	ServletContext servletContext;
	//--- Other service(s)

	//--------------------------------------------------------------------------------------
	/**
	 * Default constructor
	 */
	public OtherController() {
		super(OtherController.class, MAIN_ENTITY_NAME );
		log("PostController created.");
	}
	//Decription: Show notice
	//Url       : http://kwebsosul.com/other/notice
	@RequestMapping("/notice")
	public String announcemnet_top(
			@RequestParam(value="page",defaultValue="1") Integer page,
			HttpSession session,
			Model model) {

		Page<PostEntity> listPage = null;
		listPage=postService.findByBulletin(ApplicationDefine.BULLETIN_NOTICE_DOCUMENT, page, PAGE_SIZE, "createDate");
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("activeMenu", "announcement");
		model.addAttribute("pagination_navigator", "/other/notice");
		new Pager<PostEntity>(listPage).setSetting(model, "");		
		return JSP_NOTICE;
	}
	
	@RequestMapping("/notice/detail/{id}")
	public String announcemnet_detail(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@PathVariable("id") Integer id,
			HttpSession session,
			Model model) {

		PostEntity postEntity=postService.findOne(id);
		Post post =postServiceMapper.mapPostEntityToPost(postEntity);
		if(post.getViewsNumber()==null){
			post.setViewsNumber(1);
		}else{
			post.setViewsNumber(post.getViewsNumber()+1);
		}
		postService.update(post);
		model.addAttribute("p", postEntity);
		return JSP_NOTICE_DETAIL;
	}

	//Decription: Show question 1:1문의
	//Url       : http://kwebsosul.com/other/question
	@RequestMapping("/question")
	public String question(
			@RequestParam(value="page",defaultValue="1") Integer page,
			HttpSession session,
			Model model) {
		Page<ContactUsEntity> list =contactUsService.listPaging(page, PAGE_SIZE); 
		new Pager<ContactUsEntity>(list).setSetting(model, "");
		model.addAttribute("activeMenu", "question");
		return JSP_QUESTION;
	}
	//Decription: Show detail question
	//Url       : http://kwebsosul.com/other/question/view/{id}
	@RequestMapping(value="/question/view/{id}")
	public String view(
			@PathVariable("id") Integer id,
			@RequestParam(value="page",defaultValue="1") Integer page,
			@RequestParam(value="action",defaultValue="") String action,
			@RequestParam(value="delete_post",defaultValue="0") Integer delete_post,
			HttpSession session, Model model) {
		if(delete_post>0){
			ContactUs cu =contactUsService.findById(id);
			cu.setIsDelete(1);
			contactUsService.update(cu);
			return "redirect:/other/question";
		}
		ContactUsEntity post = null;
		try {
			post = contactUsService.findOne(id);
		} catch (Exception e) {
			System.out.println(e);
		}
		if(post.getViewsNumber()==null){
			post.setViewsNumber(1);
		}else{
			post.setViewsNumber(post.getViewsNumber()+1);
		}
		Page<CommentEntity> listComment =commentService.findAllBy_ParentId_Type(id, "CONTACT", 1, 1);
		List<CommentEntity> list=null; 
		if(listComment.getContent().size()>0){
			list= listComment.getContent();
		}
		model.addAttribute("list", list);
		ContactUs p=contactUsServiceMapper.mapContactUsEntityToContactUs(post);
		p=contactUsService.update(p);
		model.addAttribute("post", post);
		model.addAttribute("activeMenu", "question");
		return JSP_QUESTION_VIEW;
	}
	//Decription: Createl question
	//Url       : http://kwebsosul.com/other/question/write
	@RequestMapping(value="/question/write",method=RequestMethod.GET)
	public String writeIndex(HttpSession session, Model model) {
		if(Login.checkLogin(session)=="0")
			return "redirect:/login";
		model.addAttribute("activeMenu", "question");
		return JSP_QUESTION_WRITE;
	}
	
	@RequestMapping(value="/question/write",method=RequestMethod.POST)
	public String write(
			@RequestParam(value="title",defaultValue="") String title,
			@RequestParam(value="content",defaultValue="") String content,
			@RequestParam(value="file_attach_1") MultipartFile file_attach_1,
			@RequestParam(value="file_attach_2") MultipartFile file_attach_2,
			HttpSession session, Model model) {
		try {
			if(Login.checkLogin(session)=="0")
				return "redirect:/login";
			model.addAttribute("required", 0);
			if(title != null && content != null){
				User user = Login.getUserLogin(session);
				if(user != null){
					ContactUs post = new ContactUs();
					post.setTitle(title);
					post.setContents(content);
					int size=3*1024*1024;
					if(file_attach_1.getSize()>size || file_attach_2.getSize()>size){
						model.addAttribute("required", 2);
						return JSP_QUESTION_WRITE;
					}
					post.setUserId(user.getId());
					post.setReportNumber(0);
					post.setIsDelete(0);
					post.setViewsNumber(0);
					post.setUpdateDate(new Date());
					post.setCreateDate(new Date());
					try {
							if(file_attach_1.getSize()>0){
								String path = FileUtils.saveFileOrigin(file_attach_1, servletContext);
								post.setFile1(path);
							}
					} catch (Exception e) {
						System.out.println(e.toString());
					}
					try {
						
							if(file_attach_2.getSize()>0){
								String path = FileUtils.saveFileOrigin(file_attach_2, servletContext);
								post.setFile2(path);
							}
					
					} catch (Exception e) {
						System.out.println(e.toString());
					}
					ContactUs createNew = contactUsService.create(post);
					if(createNew != null){
						return "redirect:/other/question/view/"+createNew.getId();
					}else{
						return "redirect:/other/question/write";
					}
				}
			}else{
				model.addAttribute("required", 3);
			}
			
		} catch (Exception e) {
			System.out.println(e.toString());
		}
		
		return JSP_QUESTION_WRITE;
	}
	//Decription: Edit question
	//Url       : http://kwebsosul.com/other/question/edit/{id}
	@RequestMapping(value="/question/edit/{id}",method=RequestMethod.GET)
	public String editIndex(
			@PathVariable("id") Integer id,
			HttpSession session, Model model) {
		ContactUsEntity post = null;
		try {
			if(Login.checkLogin(session)=="0")
				return "redirect:/login";
			post = contactUsService.findOne(id);
			User editor = Login.getUserLogin(session);
			Integer userId=Utils.parseInt( editor.getId());
			Integer postId=Utils.parseInt(post.getUser().getId());
			if(post == null || (userId !=postId) ){
				return "redirect:/other/question";
			}
		} catch (Exception e) {
		}
		
		model.addAttribute("post", post);
		model.addAttribute("activeMenu", "question");
		return JSP_QUESTION_EDIT;
	}
	
	@RequestMapping(value="/question/edit/{id}",method=RequestMethod.POST)
	public String edit(
			@PathVariable("id") Integer id,
			@RequestParam(value="title",defaultValue="") String title,
			@RequestParam(value="content",defaultValue="") String content,
			@RequestParam(value="file_attach_1") MultipartFile file_attach_1,
			@RequestParam(value="file_attach_2") MultipartFile file_attach_2,
			HttpSession session, Model model) {
		
		ContactUs post = null;
		try {
			if(Login.checkLogin(session)=="0")
				return "redirect:/login";
			
			User user = Login.getUserLogin(session);
			
			if(user != null){
				if(title != null && content != null){
					post = contactUsService.findById(id);
					User editor = Login.getUserLogin(session);
					model.addAttribute("required", 0);
					if(post != null && Utils.parseInt(editor.getId()) ==Utils.parseInt(post.getUserId()) ){
						post.setTitle(title);
						post.setContents(content);
						post.setUpdateDate(new Date());
						int size=3*1024*1024;
						if(file_attach_1.getSize()>size || file_attach_2.getSize()>size){
							model.addAttribute("required", 2);
							model.addAttribute("post", post);
							return JSP_QUESTION_EDIT;
						}
						try {
							
							
							if(file_attach_1.getSize()>0){
								String path = FileUtils.saveFileOrigin(file_attach_1, servletContext);
								post.setFile1(path);
							}
						
						
					} catch (Exception e) {
						System.out.println(e.toString());
					}
					
					try {
						
							if(file_attach_2.getSize()>0){
								String path = FileUtils.saveFileOrigin(file_attach_2, servletContext);
								post.setFile2(path);
							}
					
					} catch (Exception e) {
						System.out.println(e.toString());
					}
					
						
						ContactUs editPost = contactUsService.create(post);
						
						if(editPost != null){
							return "redirect:/other/question/view/"+editPost.getId();
						}else{
							
						}
					}else{
						return "redirect:/other/question";
					}
				}else{
					return "redirect:/other/question/view/"+id;
				}
			}else{
				return "redirect:/login";
			}
		} catch (Exception e) {
			System.err.println(e);
		}
		model.addAttribute("post", post);
		model.addAttribute("activeMenu", "question");
		return JSP_QUESTION_EDIT;
	}
	
	
	
	@RequestMapping("/question/detail/{id}")
	public String question_detail(
			@RequestParam(value="page",defaultValue="1") Integer page,
			@PathVariable("id") Integer id,
			HttpSession session,
			Model model) {
		ContactUs c = contactUsService.findById(id);
		
		model.addAttribute("c", c);
		model.addAttribute("activeMenu", "question");
		return JSP_QUESTION;
	}
	//Decription: List all event
	//Url       : http://kwebsosul.com/other/event
	@RequestMapping("/event")
	public String event(
			@RequestParam(value="page",defaultValue="1") Integer page,
			HttpSession session,
			Model model) {
			Page<PostEntity> list = postService.findByBulletin(14, page, PAGE_SIZE, "createDate");
			new Pager<PostEntity>(list).setSetting(model, "");
			Calendar c = Calendar.getInstance();
			c.add(Calendar.DAY_OF_YEAR, -1);
			Date beforeDay = c.getTime();
			model.addAttribute("beforeDay",beforeDay.getTime());
		model.addAttribute("activeMenu", "event");
		return JSP_EVENT;
	}
	
	@RequestMapping(value="/event/view/{id}")
	public String view(
			@PathVariable("id") Integer id,
			@RequestParam(value="action",defaultValue="") String action,
			HttpSession session, Model model) {
		PostEntity post = null;
		User user =Login.getUserLogin(session);
		try {
			post = postService.getById(id);
			if(post == null){
				return "redirect:/other/event";
			}
		} catch (Exception e) {
			System.out.println(e);
		}
		if(post.getViewsNumber()==null){
			post.setViewsNumber(1);
		}else{
			post.setViewsNumber(post.getViewsNumber()+1);
		}
		Post p=postServiceMapper.mapPostEntityToPost(post);
		p=postService.update(p);
		
		model.addAttribute("activePage", nav);
		model.addAttribute("activeMenu", "event");
		model.addAttribute("post", post);
		model.addAttribute("user", user);
		return JSP_EVENT_VIEW;
	}
	
	//Decription: List all question
	//Url       : http://kwebsosul.com/other/faq
	@RequestMapping("/faq")
	public String list(
			@RequestParam(value="page",defaultValue="1") Integer page,
			HttpSession session,
			Model model) {
		
		Page<PostEntity> listPage = null;
		listPage=postService.findByBulletin(12, page, PAGE_SIZE, "createDate");
		model.addAttribute(MAIN_LIST_NAME, listPage);	
		model.addAttribute("activeMenu", "faq");
		model.addAttribute("pagination_navigator", "/other/faq");
		new Pager<PostEntity>(listPage).setSetting(model, "");		
		return JSP_FAQ;
		
	}
	
	@RequestMapping("/faq/detail/{id}")
	public String detail(
	@RequestParam(value="comment",defaultValue="0") Integer comment,
	@RequestParam(value="content",defaultValue="") String content,
	@RequestParam(value="delete_comment",defaultValue="0") Integer delete_comment,
	Model model, 
	HttpSession session,
	@PathVariable("id") Integer id) {
	
		User user = Login.getUserLogin(session);
		if(delete_comment>0){
			Comment comment1 =commentService.findById(delete_comment);
			comment1.setIsDelete(1);
			commentService.update(comment1);
		}
		
		if(comment>0 && content.trim()!=""){
			Comment c = new Comment();
			c.setComment(content);
			c.setCreateDate(new Date());
			c.setIsDelete(0);
			c.setParentId(id);
			c.setReportNumber(0);
			c.setTypeKey(ApplicationDefine.COMMENT_POST_TYPE);
			c.setUpdateDate(new Date());
			c.setUserId(user.getId());
			commentService.create(c);
		}
		
		PostEntity postEntity = postService.findOne(id);
		if(postEntity.getViewsNumber()==null){
			postEntity.setViewsNumber(1);
		}else{
			postEntity.setViewsNumber(postEntity.getViewsNumber()+1);
		}
		Post p=postServiceMapper.mapPostEntityToPost(postEntity);
		p=postService.update(p);
		Post post = postServiceMapper.mapPostEntityToPost(postEntity);
		List<CommentEntity> listComment = commentService.findAllBy_ParentId_Type(id, ApplicationDefine.COMMENT_POST_TYPE);
		model.addAttribute("listComment", listComment);
		model.addAttribute("total_comment", listComment.size());
		model.addAttribute("post", postEntity);
		model.addAttribute("activePage", nav);
		model.addAttribute("activeMenu", "faq");
		model.addAttribute("user", user);
		return JSP_FAQ_DETAIL;
	}
}
