/*
 * Created on 16 Feb 2016 ( Time 10:21:55 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package org.trams.webbook.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "book"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="book", catalog="webbook" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="BookEntity.countAll", query="SELECT COUNT(x) FROM BookEntity x" )
} )
public class BookEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="_id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="TITLE", length=300)
    private String     title        ;

    @Column(name="GENRE_ID")
    private Integer    genreId      ;

    @Column(name="GENRE_NAME", length=300)
    private String     genreName    ;

    @Column(name="ADULT", length=20)
    private String     adult        ;

    @Column(name="DAY_OF_WEEK", length=300)
    private String     dayOfWeek    ;

    @Column(name="AGE_GROUP_ID")
    private Integer    ageGroupId   ;

    @Column(name="AGE_GROUP_NAME", length=100)
    private String     ageGroupName ;

    @Column(name="LEAGUE_ID")
    private Integer    leagueId     ;

    @Column(name="LEAGUE_NAME", length=100)
    private String     leagueName   ;

    @Column(name="INTRODUCE", length=300)
    private String     introduce    ;

    @Column(name="COVER_IMAGE", length=300)
    private String     coverImage   ;

    @Column(name="EPISODE_NUMBER")
    private Integer    episodeNumber ;

    @Column(name="HITS_NO")
    private Integer    hitsNo       ;

    @Column(name="INTERESTED_BOOK_NO")
    private Integer    interestedBookNo ;

    @Column(name="RECOMMENDATION_NO")
    private Integer    recommendationNo ;

    @Column(name="HITS_WEEKLY")
    private Integer    hitsWeekly   ;

    @Column(name="INTERESTED_WEEKLY")
    private Integer    interestedWeekly ;

    @Column(name="RECOMMENDATION_WEEKLY")
    private Integer    recommendationWeekly ;

    @Column(name="KEYWORD_1", length=100)
    private String     keyword1     ;

    @Column(name="KEYWORD_2", length=100)
    private String     keyword2     ;

    @Column(name="KEYWORD_3", length=100)
    private String     keyword3     ;

    @Column(name="KEYWORD_4", length=100)
    private String     keyword4     ;

    @Column(name="COMEPLETE", nullable=false)
    private Integer    comeplete    ;

    @Column(name="IS_DELETE", nullable=false)
    private Integer    isDelete     ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="CREATE_DATE", nullable=false)
    private Date       createDate   ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="UPDATE_DATE", nullable=false)
    private Date       updateDate   ;

	// "userId" (column "USER_ID") is not defined by itself because used as FK in a link 


    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @ManyToOne
    @JoinColumn(name="USER_ID", referencedColumnName="_id")
    private UserEntity user        ;

    @OneToMany(mappedBy="book", targetEntity=CouponUsedEntity.class)
    private List<CouponUsedEntity> listOfCouponUsed;

    @OneToMany(mappedBy="book", targetEntity=EpisodeEntity.class)
    private List<EpisodeEntity> listOfEpisode;

    @OneToMany(mappedBy="book", targetEntity=PostEntity.class)
    private List<PostEntity> listOfPost  ;

    @OneToMany(mappedBy="book", targetEntity=BookViewingEntity.class)
    private List<BookViewingEntity> listOfBookViewing;

    @OneToMany(mappedBy="book", targetEntity=AnnouncementEntity.class)
    private List<AnnouncementEntity> listOfAnnouncement;

    @OneToMany(mappedBy="book", targetEntity=InterestedBookEntity.class)
    private List<InterestedBookEntity> listOfInterestedBook;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public BookEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : TITLE ( VARCHAR ) 
    public void setTitle( String title ) {
        this.title = title;
    }
    public String getTitle() {
        return this.title;
    }

    //--- DATABASE MAPPING : GENRE_ID ( INT ) 
    public void setGenreId( Integer genreId ) {
        this.genreId = genreId;
    }
    public Integer getGenreId() {
        return this.genreId;
    }

    //--- DATABASE MAPPING : GENRE_NAME ( VARCHAR ) 
    public void setGenreName( String genreName ) {
        this.genreName = genreName;
    }
    public String getGenreName() {
        return this.genreName;
    }

    //--- DATABASE MAPPING : ADULT ( VARCHAR ) 
    public void setAdult( String adult ) {
        this.adult = adult;
    }
    public String getAdult() {
        return this.adult;
    }

    //--- DATABASE MAPPING : DAY_OF_WEEK ( VARCHAR ) 
    public void setDayOfWeek( String dayOfWeek ) {
        this.dayOfWeek = dayOfWeek;
    }
    public String getDayOfWeek() {
        return this.dayOfWeek;
    }

    //--- DATABASE MAPPING : AGE_GROUP_ID ( INT ) 
    public void setAgeGroupId( Integer ageGroupId ) {
        this.ageGroupId = ageGroupId;
    }
    public Integer getAgeGroupId() {
        return this.ageGroupId;
    }

    //--- DATABASE MAPPING : AGE_GROUP_NAME ( VARCHAR ) 
    public void setAgeGroupName( String ageGroupName ) {
        this.ageGroupName = ageGroupName;
    }
    public String getAgeGroupName() {
        return this.ageGroupName;
    }

    //--- DATABASE MAPPING : LEAGUE_ID ( INT ) 
    public void setLeagueId( Integer leagueId ) {
        this.leagueId = leagueId;
    }
    public Integer getLeagueId() {
        return this.leagueId;
    }

    //--- DATABASE MAPPING : LEAGUE_NAME ( VARCHAR ) 
    public void setLeagueName( String leagueName ) {
        this.leagueName = leagueName;
    }
    public String getLeagueName() {
        return this.leagueName;
    }

    //--- DATABASE MAPPING : INTRODUCE ( VARCHAR ) 
    public void setIntroduce( String introduce ) {
        this.introduce = introduce;
    }
    public String getIntroduce() {
        return this.introduce;
    }

    //--- DATABASE MAPPING : COVER_IMAGE ( VARCHAR ) 
    public void setCoverImage( String coverImage ) {
        this.coverImage = coverImage;
    }
    public String getCoverImage() {
        return this.coverImage;
    }

    //--- DATABASE MAPPING : EPISODE_NUMBER ( INT ) 
    public void setEpisodeNumber( Integer episodeNumber ) {
        this.episodeNumber = episodeNumber;
    }
    public Integer getEpisodeNumber() {
        return this.episodeNumber;
    }

    //--- DATABASE MAPPING : HITS_NO ( INT ) 
    public void setHitsNo( Integer hitsNo ) {
        this.hitsNo = hitsNo;
    }
    public Integer getHitsNo() {
        return this.hitsNo;
    }

    //--- DATABASE MAPPING : INTERESTED_BOOK_NO ( INT ) 
    public void setInterestedBookNo( Integer interestedBookNo ) {
        this.interestedBookNo = interestedBookNo;
    }
    public Integer getInterestedBookNo() {
        return this.interestedBookNo;
    }

    //--- DATABASE MAPPING : RECOMMENDATION_NO ( INT ) 
    public void setRecommendationNo( Integer recommendationNo ) {
        this.recommendationNo = recommendationNo;
    }
    public Integer getRecommendationNo() {
        return this.recommendationNo;
    }

    //--- DATABASE MAPPING : HITS_WEEKLY ( INT ) 
    public void setHitsWeekly( Integer hitsWeekly ) {
        this.hitsWeekly = hitsWeekly;
    }
    public Integer getHitsWeekly() {
        return this.hitsWeekly;
    }

    //--- DATABASE MAPPING : INTERESTED_WEEKLY ( INT ) 
    public void setInterestedWeekly( Integer interestedWeekly ) {
        this.interestedWeekly = interestedWeekly;
    }
    public Integer getInterestedWeekly() {
        return this.interestedWeekly;
    }

    //--- DATABASE MAPPING : RECOMMENDATION_WEEKLY ( INT ) 
    public void setRecommendationWeekly( Integer recommendationWeekly ) {
        this.recommendationWeekly = recommendationWeekly;
    }
    public Integer getRecommendationWeekly() {
        return this.recommendationWeekly;
    }

    //--- DATABASE MAPPING : KEYWORD_1 ( VARCHAR ) 
    public void setKeyword1( String keyword1 ) {
        this.keyword1 = keyword1;
    }
    public String getKeyword1() {
        return this.keyword1;
    }

    //--- DATABASE MAPPING : KEYWORD_2 ( VARCHAR ) 
    public void setKeyword2( String keyword2 ) {
        this.keyword2 = keyword2;
    }
    public String getKeyword2() {
        return this.keyword2;
    }

    //--- DATABASE MAPPING : KEYWORD_3 ( VARCHAR ) 
    public void setKeyword3( String keyword3 ) {
        this.keyword3 = keyword3;
    }
    public String getKeyword3() {
        return this.keyword3;
    }

    //--- DATABASE MAPPING : KEYWORD_4 ( VARCHAR ) 
    public void setKeyword4( String keyword4 ) {
        this.keyword4 = keyword4;
    }
    public String getKeyword4() {
        return this.keyword4;
    }

    //--- DATABASE MAPPING : COMEPLETE ( INT ) 
    public void setComeplete( Integer comeplete ) {
        this.comeplete = comeplete;
    }
    public Integer getComeplete() {
        return this.comeplete;
    }

    //--- DATABASE MAPPING : IS_DELETE ( INT ) 
    public void setIsDelete( Integer isDelete ) {
        this.isDelete = isDelete;
    }
    public Integer getIsDelete() {
        return this.isDelete;
    }

    //--- DATABASE MAPPING : CREATE_DATE ( DATETIME ) 
    public void setCreateDate( Date createDate ) {
        this.createDate = createDate;
    }
    public Date getCreateDate() {
        return this.createDate;
    }

    //--- DATABASE MAPPING : UPDATE_DATE ( DATETIME ) 
    public void setUpdateDate( Date updateDate ) {
        this.updateDate = updateDate;
    }
    public Date getUpdateDate() {
        return this.updateDate;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setUser( UserEntity user ) {
        this.user = user;
    }
    public UserEntity getUser() {
        return this.user;
    }

    public void setListOfCouponUsed( List<CouponUsedEntity> listOfCouponUsed ) {
        this.listOfCouponUsed = listOfCouponUsed;
    }
    public List<CouponUsedEntity> getListOfCouponUsed() {
        return this.listOfCouponUsed;
    }

    public void setListOfEpisode( List<EpisodeEntity> listOfEpisode ) {
        this.listOfEpisode = listOfEpisode;
    }
    public List<EpisodeEntity> getListOfEpisode() {
        return this.listOfEpisode;
    }

    public void setListOfPost( List<PostEntity> listOfPost ) {
        this.listOfPost = listOfPost;
    }
    public List<PostEntity> getListOfPost() {
        return this.listOfPost;
    }

    public void setListOfBookViewing( List<BookViewingEntity> listOfBookViewing ) {
        this.listOfBookViewing = listOfBookViewing;
    }
    public List<BookViewingEntity> getListOfBookViewing() {
        return this.listOfBookViewing;
    }

    public void setListOfAnnouncement( List<AnnouncementEntity> listOfAnnouncement ) {
        this.listOfAnnouncement = listOfAnnouncement;
    }
    public List<AnnouncementEntity> getListOfAnnouncement() {
        return this.listOfAnnouncement;
    }

    public void setListOfInterestedBook( List<InterestedBookEntity> listOfInterestedBook ) {
        this.listOfInterestedBook = listOfInterestedBook;
    }
    public List<InterestedBookEntity> getListOfInterestedBook() {
        return this.listOfInterestedBook;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(title);
        sb.append("|");
        sb.append(genreId);
        sb.append("|");
        sb.append(genreName);
        sb.append("|");
        sb.append(adult);
        sb.append("|");
        sb.append(dayOfWeek);
        sb.append("|");
        sb.append(ageGroupId);
        sb.append("|");
        sb.append(ageGroupName);
        sb.append("|");
        sb.append(leagueId);
        sb.append("|");
        sb.append(leagueName);
        sb.append("|");
        sb.append(introduce);
        sb.append("|");
        sb.append(coverImage);
        sb.append("|");
        sb.append(episodeNumber);
        sb.append("|");
        sb.append(hitsNo);
        sb.append("|");
        sb.append(interestedBookNo);
        sb.append("|");
        sb.append(recommendationNo);
        sb.append("|");
        sb.append(hitsWeekly);
        sb.append("|");
        sb.append(interestedWeekly);
        sb.append("|");
        sb.append(recommendationWeekly);
        sb.append("|");
        sb.append(keyword1);
        sb.append("|");
        sb.append(keyword2);
        sb.append("|");
        sb.append(keyword3);
        sb.append("|");
        sb.append(keyword4);
        sb.append("|");
        sb.append(comeplete);
        sb.append("|");
        sb.append(isDelete);
        sb.append("|");
        sb.append(createDate);
        sb.append("|");
        sb.append(updateDate);
        return sb.toString(); 
    } 

}
