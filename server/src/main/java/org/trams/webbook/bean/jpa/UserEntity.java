/*
 * Created on 12 Jan 2016 ( Time 15:24:02 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
// This Bean has a basic Primary Key (not composite) 

package org.trams.webbook.bean.jpa;

import java.io.Serializable;

//import javax.validation.constraints.* ;
//import org.hibernate.validator.constraints.* ;

import java.util.Date;
import java.util.List;

import javax.persistence.*;

/**
 * Persistent class for entity stored in table "user"
 *
 * @author Telosys Tools Generator
 *
 */

@Entity
@Table(name="user", catalog="webbook" )
// Define named queries here
@NamedQueries ( {
  @NamedQuery ( name="UserEntity.countAll", query="SELECT COUNT(x) FROM UserEntity x" )
} )
public class UserEntity implements Serializable {

    private static final long serialVersionUID = 1L;

    //----------------------------------------------------------------------
    // ENTITY PRIMARY KEY ( BASED ON A SINGLE FIELD )
    //----------------------------------------------------------------------
    @Id
    @GeneratedValue(strategy=GenerationType.AUTO)
    @Column(name="_id", nullable=false)
    private Integer    id           ;


    //----------------------------------------------------------------------
    // ENTITY DATA FIELDS 
    //----------------------------------------------------------------------    
    @Column(name="USERNAME", nullable=false, length=200)
    private String     username     ;

    @Column(name="PASSWORD", nullable=false, length=100)
    private String     password     ;

    @Column(name="NICKNAME", length=200)
    private String     nickname     ;

    @Column(name="FULLNAME", length=255)
    private String     fullname     ;

    @Column(name="AGE_GROUP_ID")
    private Integer    ageGroupId   ;

    @Column(name="AGE_GROUP_NAME", length=100)
    private String     ageGroupName ;

    @Column(name="AUTHOR_LEVEL")
    private Integer    authorLevel  ;

    @Column(name="AUTHOR_NAME", length=100)
    private String     authorName   ;

    @Column(name="GENDER", length=50)
    private String     gender       ;

    @Temporal(TemporalType.DATE)
    @Column(name="DAY_OF_BIRTH")
    private Date       dayOfBirth   ;

    @Column(name="PHONE", length=200)
    private String     phone        ;

    @Column(name="EMAIL", length=255)
    private String     email        ;

    @Column(name="ADULT_VERIFICATION")
    private Integer    adultVerification ;

    @Column(name="TOTAL_COUPON")
    private Integer    totalCoupon  ;

    @Column(name="LEAVE_REASON", length=300)
    private String     leaveReason  ;

    @Column(name="ACTIVE")
    private Integer    active       ;

    @Column(name="ROLE")
    private Integer    role         ;

    @Column(name="IS_DELETE")
    private Integer    isDelete     ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="CREATE_DATE")
    private Date       createDate   ;

    @Temporal(TemporalType.TIMESTAMP)
    @Column(name="UPDATE_DATE")
    private Date       updateDate   ;



    //----------------------------------------------------------------------
    // ENTITY LINKS ( RELATIONSHIP )
    //----------------------------------------------------------------------
    @OneToMany(mappedBy="user", targetEntity=CouponUsedEntity.class)
    private List<CouponUsedEntity> listOfCouponUsed;

    @OneToMany(mappedBy="user", targetEntity=InterestedBookEntity.class)
    private List<InterestedBookEntity> listOfInterestedBook;

    @OneToMany(mappedBy="user", targetEntity=CommentEntity.class)
    private List<CommentEntity> listOfComment;

    @OneToMany(mappedBy="user", targetEntity=BookEntity.class)
    private List<BookEntity> listOfBook  ;

    @OneToMany(mappedBy="user", targetEntity=PostEntity.class)
    private List<PostEntity> listOfPost  ;

    @OneToMany(mappedBy="user", targetEntity=BookmarkEntity.class)
    private List<BookmarkEntity> listOfBookmark;

    @OneToMany(mappedBy="user", targetEntity=CouponPurchaseEntity.class)
    private List<CouponPurchaseEntity> listOfCouponPurchase;

    @OneToMany(mappedBy="user", targetEntity=ProfitRefundEntity.class)
    private List<ProfitRefundEntity> listOfProfitRefund;

    @OneToMany(mappedBy="user", targetEntity=ReportEntity.class)
    private List<ReportEntity> listOfReport;


    //----------------------------------------------------------------------
    // CONSTRUCTOR(S)
    //----------------------------------------------------------------------
    public UserEntity() {
		super();
    }
    
    //----------------------------------------------------------------------
    // GETTER & SETTER FOR THE KEY FIELD
    //----------------------------------------------------------------------
    public void setId( Integer id ) {
        this.id = id ;
    }
    public Integer getId() {
        return this.id;
    }

    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR FIELDS
    //----------------------------------------------------------------------
    //--- DATABASE MAPPING : USERNAME ( VARCHAR ) 
    public void setUsername( String username ) {
        this.username = username;
    }
    public String getUsername() {
        return this.username;
    }

    //--- DATABASE MAPPING : PASSWORD ( VARCHAR ) 
    public void setPassword( String password ) {
        this.password = password;
    }
    public String getPassword() {
        return this.password;
    }

    //--- DATABASE MAPPING : NICKNAME ( VARCHAR ) 
    public void setNickname( String nickname ) {
        this.nickname = nickname;
    }
    public String getNickname() {
        return this.nickname;
    }

    //--- DATABASE MAPPING : FULLNAME ( VARCHAR ) 
    public void setFullname( String fullname ) {
        this.fullname = fullname;
    }
    public String getFullname() {
        return this.fullname;
    }

    //--- DATABASE MAPPING : AGE_GROUP_ID ( INT ) 
    public void setAgeGroupId( Integer ageGroupId ) {
        this.ageGroupId = ageGroupId;
    }
    public Integer getAgeGroupId() {
        return this.ageGroupId;
    }

    //--- DATABASE MAPPING : AGE_GROUP_NAME ( VARCHAR ) 
    public void setAgeGroupName( String ageGroupName ) {
        this.ageGroupName = ageGroupName;
    }
    public String getAgeGroupName() {
        return this.ageGroupName;
    }

    //--- DATABASE MAPPING : AUTHOR_LEVEL ( INT ) 
    public void setAuthorLevel( Integer authorLevel ) {
        this.authorLevel = authorLevel;
    }
    public Integer getAuthorLevel() {
        return this.authorLevel;
    }

    //--- DATABASE MAPPING : AUTHOR_NAME ( VARCHAR ) 
    public void setAuthorName( String authorName ) {
        this.authorName = authorName;
    }
    public String getAuthorName() {
        return this.authorName;
    }

    //--- DATABASE MAPPING : GENDER ( VARCHAR ) 
    public void setGender( String gender ) {
        this.gender = gender;
    }
    public String getGender() {
        return this.gender;
    }

    //--- DATABASE MAPPING : DAY_OF_BIRTH ( DATE ) 
    public void setDayOfBirth( Date dayOfBirth ) {
        this.dayOfBirth = dayOfBirth;
    }
    public Date getDayOfBirth() {
        return this.dayOfBirth;
    }

    //--- DATABASE MAPPING : PHONE ( VARCHAR ) 
    public void setPhone( String phone ) {
        this.phone = phone;
    }
    public String getPhone() {
        return this.phone;
    }

    //--- DATABASE MAPPING : EMAIL ( VARCHAR ) 
    public void setEmail( String email ) {
        this.email = email;
    }
    public String getEmail() {
        return this.email;
    }

    //--- DATABASE MAPPING : ADULT_VERIFICATION ( INT ) 
    public void setAdultVerification( Integer adultVerification ) {
        this.adultVerification = adultVerification;
    }
    public Integer getAdultVerification() {
        return this.adultVerification;
    }

    //--- DATABASE MAPPING : TOTAL_COUPON ( INT ) 
    public void setTotalCoupon( Integer totalCoupon ) {
        this.totalCoupon = totalCoupon;
    }
    public Integer getTotalCoupon() {
        return this.totalCoupon;
    }

    //--- DATABASE MAPPING : LEAVE_REASON ( VARCHAR ) 
    public void setLeaveReason( String leaveReason ) {
        this.leaveReason = leaveReason;
    }
    public String getLeaveReason() {
        return this.leaveReason;
    }

    //--- DATABASE MAPPING : ACTIVE ( INT ) 
    public void setActive( Integer active ) {
        this.active = active;
    }
    public Integer getActive() {
        return this.active;
    }

    //--- DATABASE MAPPING : ROLE ( INT ) 
    public void setRole( Integer role ) {
        this.role = role;
    }
    public Integer getRole() {
        return this.role;
    }

    //--- DATABASE MAPPING : IS_DELETE ( INT ) 
    public void setIsDelete( Integer isDelete ) {
        this.isDelete = isDelete;
    }
    public Integer getIsDelete() {
        return this.isDelete;
    }

    //--- DATABASE MAPPING : CREATE_DATE ( DATETIME ) 
    public void setCreateDate( Date createDate ) {
        this.createDate = createDate;
    }
    public Date getCreateDate() {
        return this.createDate;
    }

    //--- DATABASE MAPPING : UPDATE_DATE ( DATETIME ) 
    public void setUpdateDate( Date updateDate ) {
        this.updateDate = updateDate;
    }
    public Date getUpdateDate() {
        return this.updateDate;
    }


    //----------------------------------------------------------------------
    // GETTERS & SETTERS FOR LINKS
    //----------------------------------------------------------------------
    public void setListOfCouponUsed( List<CouponUsedEntity> listOfCouponUsed ) {
        this.listOfCouponUsed = listOfCouponUsed;
    }
    public List<CouponUsedEntity> getListOfCouponUsed() {
        return this.listOfCouponUsed;
    }

    public void setListOfInterestedBook( List<InterestedBookEntity> listOfInterestedBook ) {
        this.listOfInterestedBook = listOfInterestedBook;
    }
    public List<InterestedBookEntity> getListOfInterestedBook() {
        return this.listOfInterestedBook;
    }

    public void setListOfComment( List<CommentEntity> listOfComment ) {
        this.listOfComment = listOfComment;
    }
    public List<CommentEntity> getListOfComment() {
        return this.listOfComment;
    }

    public void setListOfBook( List<BookEntity> listOfBook ) {
        this.listOfBook = listOfBook;
    }
    public List<BookEntity> getListOfBook() {
        return this.listOfBook;
    }

    public void setListOfPost( List<PostEntity> listOfPost ) {
        this.listOfPost = listOfPost;
    }
    public List<PostEntity> getListOfPost() {
        return this.listOfPost;
    }

    public void setListOfBookmark( List<BookmarkEntity> listOfBookmark ) {
        this.listOfBookmark = listOfBookmark;
    }
    public List<BookmarkEntity> getListOfBookmark() {
        return this.listOfBookmark;
    }

    public void setListOfCouponPurchase( List<CouponPurchaseEntity> listOfCouponPurchase ) {
        this.listOfCouponPurchase = listOfCouponPurchase;
    }
    public List<CouponPurchaseEntity> getListOfCouponPurchase() {
        return this.listOfCouponPurchase;
    }

    public void setListOfProfitRefund( List<ProfitRefundEntity> listOfProfitRefund ) {
        this.listOfProfitRefund = listOfProfitRefund;
    }
    public List<ProfitRefundEntity> getListOfProfitRefund() {
        return this.listOfProfitRefund;
    }

    public void setListOfReport( List<ReportEntity> listOfReport ) {
        this.listOfReport = listOfReport;
    }
    public List<ReportEntity> getListOfReport() {
        return this.listOfReport;
    }


    //----------------------------------------------------------------------
    // toString METHOD
    //----------------------------------------------------------------------
    public String toString() { 
        StringBuffer sb = new StringBuffer(); 
        sb.append("["); 
        sb.append(id);
        sb.append("]:"); 
        sb.append(username);
        sb.append("|");
        sb.append(password);
        sb.append("|");
        sb.append(nickname);
        sb.append("|");
        sb.append(fullname);
        sb.append("|");
        sb.append(ageGroupId);
        sb.append("|");
        sb.append(ageGroupName);
        sb.append("|");
        sb.append(authorLevel);
        sb.append("|");
        sb.append(authorName);
        sb.append("|");
        sb.append(gender);
        sb.append("|");
        sb.append(dayOfBirth);
        sb.append("|");
        sb.append(phone);
        sb.append("|");
        sb.append(email);
        sb.append("|");
        sb.append(adultVerification);
        sb.append("|");
        sb.append(totalCoupon);
        sb.append("|");
        sb.append(leaveReason);
        sb.append("|");
        sb.append(active);
        sb.append("|");
        sb.append(role);
        sb.append("|");
        sb.append(isDelete);
        sb.append("|");
        sb.append(createDate);
        sb.append("|");
        sb.append(updateDate);
        return sb.toString(); 
    } 

}
