/*
 * Created on 31 Dec 2015 ( Time 09:25:53 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.webbook.bean.Comment;
import org.trams.webbook.bean.jpa.CommentEntity;
import java.util.Date;
import org.trams.webbook.business.service.CommentService;
import org.trams.webbook.business.service.mapping.CommentServiceMapper;
import org.trams.webbook.data.repository.jpa.CommentJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of CommentService
 */
@Component
@Transactional
public class CommentServiceImpl implements CommentService {

	@Resource
	private CommentJpaRepository commentJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private CommentServiceMapper commentServiceMapper;
	
	@Override
	public Comment findById(Integer id) {
		CommentEntity commentEntity = commentJpaRepository.findOne(id);
		return commentServiceMapper.mapCommentEntityToComment(commentEntity);
	}
	@Override
	public CommentEntity findByOne(Integer id) {
		CommentEntity commentEntity = commentJpaRepository.findOne(id);
		return commentEntity;
	}

	@Override
	public Page<CommentEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return commentJpaRepository.findAll(request);
	}

	@Override
	public List<Comment> findAll() {
		Iterable<CommentEntity> entities = commentJpaRepository.findAll();
		List<Comment> beans = new ArrayList<Comment>();
		for(CommentEntity commentEntity : entities) {
			beans.add(commentServiceMapper.mapCommentEntityToComment(commentEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = commentJpaRepository.count();
		return count;
	}

	@Override
	public Comment save(Comment comment) {
		return update(comment) ;
	}

	@Override
	public Comment create(Comment comment) {
/*
		CommentEntity commentEntity = commentJpaRepository.findOne(comment.getId());
		if( commentEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		commentEntity = new CommentEntity();
		commentServiceMapper.mapCommentToCommentEntity(comment, commentEntity);
		CommentEntity commentEntitySaved = commentJpaRepository.save(commentEntity);
		return commentServiceMapper.mapCommentEntityToComment(commentEntitySaved);
*/
		CommentEntity commentEntity = new CommentEntity();
		commentServiceMapper.mapCommentToCommentEntity(comment, commentEntity);
		CommentEntity commentEntitySaved = commentJpaRepository.save(commentEntity);
		return commentServiceMapper.mapCommentEntityToComment(commentEntitySaved);
	}

	@Override
	public Comment update(Comment comment) {
		CommentEntity commentEntity = commentJpaRepository.findOne(comment.getId());
		commentServiceMapper.mapCommentToCommentEntity(comment, commentEntity);
		CommentEntity commentEntitySaved = commentJpaRepository.save(commentEntity);
		return commentServiceMapper.mapCommentEntityToComment(commentEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		commentJpaRepository.delete(id);
	}

	public CommentJpaRepository getCommentJpaRepository() {
		return commentJpaRepository;
	}

	public void setCommentJpaRepository(CommentJpaRepository commentJpaRepository) {
		this.commentJpaRepository = commentJpaRepository;
	}

	public CommentServiceMapper getCommentServiceMapper() {
		return commentServiceMapper;
	}

	public void setCommentServiceMapper(CommentServiceMapper commentServiceMapper) {
		this.commentServiceMapper = commentServiceMapper;
	}

	@Override
	public Page<CommentEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return commentJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<CommentEntity> findAllBy_ParentId_Type(Integer reportId, String typeKey) {
		try {
			PageRequest pageable = new PageRequest(1, 100, new Sort(new Order(Direction.DESC, "createDate")));
			return commentJpaRepository.findAllBy_ParentId_Type(reportId, typeKey);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	@Override
	public Page<CommentEntity> findAllBy_ParentId_Type(Integer parentId, String typeKey,Integer page,Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return commentJpaRepository.findBy_ParentId_Type(parentId, typeKey,pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

}
