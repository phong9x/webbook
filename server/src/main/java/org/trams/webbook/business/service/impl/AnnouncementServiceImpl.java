/*
 * Created on 15 Dec 2015 ( Time 17:20:39 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.webbook.bean.Announcement;
import org.trams.webbook.bean.jpa.AnnouncementEntity;
import java.util.Date;
import org.trams.webbook.business.service.AnnouncementService;
import org.trams.webbook.business.service.mapping.AnnouncementServiceMapper;
import org.trams.webbook.data.repository.jpa.AnnouncementJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of AnnouncementService
 */
@Component
@Transactional
public class AnnouncementServiceImpl implements AnnouncementService {

	@Resource
	private AnnouncementJpaRepository announcementJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private AnnouncementServiceMapper announcementServiceMapper;
	
	@Override
	public Announcement findById(Integer id) {
		AnnouncementEntity announcementEntity = announcementJpaRepository.findOne(id);
		return announcementServiceMapper.mapAnnouncementEntityToAnnouncement(announcementEntity);
	}

	@Override
	public Page<AnnouncementEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return announcementJpaRepository.findAll(request);
	}

	@Override
	public List<Announcement> findAll() {
		Iterable<AnnouncementEntity> entities = announcementJpaRepository.findAll();
		List<Announcement> beans = new ArrayList<Announcement>();
		for(AnnouncementEntity announcementEntity : entities) {
			beans.add(announcementServiceMapper.mapAnnouncementEntityToAnnouncement(announcementEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = announcementJpaRepository.count();
		return count;
	}

	@Override
	public Announcement save(Announcement announcement) {
		return update(announcement) ;
	}

	@Override
	public Announcement create(Announcement announcement) {
/*
		AnnouncementEntity announcementEntity = announcementJpaRepository.findOne(announcement.getId());
		if( announcementEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		announcementEntity = new AnnouncementEntity();
		announcementServiceMapper.mapAnnouncementToAnnouncementEntity(announcement, announcementEntity);
		AnnouncementEntity announcementEntitySaved = announcementJpaRepository.save(announcementEntity);
		return announcementServiceMapper.mapAnnouncementEntityToAnnouncement(announcementEntitySaved);
*/
		AnnouncementEntity announcementEntity = new AnnouncementEntity();
		announcementServiceMapper.mapAnnouncementToAnnouncementEntity(announcement, announcementEntity);
		AnnouncementEntity announcementEntitySaved = announcementJpaRepository.save(announcementEntity);
		return announcementServiceMapper.mapAnnouncementEntityToAnnouncement(announcementEntitySaved);
	}

	@Override
	public Announcement update(Announcement announcement) {
		AnnouncementEntity announcementEntity = announcementJpaRepository.findOne(announcement.getId());
		announcementServiceMapper.mapAnnouncementToAnnouncementEntity(announcement, announcementEntity);
		AnnouncementEntity announcementEntitySaved = announcementJpaRepository.save(announcementEntity);
		return announcementServiceMapper.mapAnnouncementEntityToAnnouncement(announcementEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		announcementJpaRepository.delete(id);
	}

	public AnnouncementJpaRepository getAnnouncementJpaRepository() {
		return announcementJpaRepository;
	}

	public void setAnnouncementJpaRepository(AnnouncementJpaRepository announcementJpaRepository) {
		this.announcementJpaRepository = announcementJpaRepository;
	}

	public AnnouncementServiceMapper getAnnouncementServiceMapper() {
		return announcementServiceMapper;
	}

	public void setAnnouncementServiceMapper(AnnouncementServiceMapper announcementServiceMapper) {
		this.announcementServiceMapper = announcementServiceMapper;
	}

	@Override
	public Page<AnnouncementEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return announcementJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	@Override
	public Page<AnnouncementEntity> listPaging_Order(PageRequest pageable) {
		try {
			
			return announcementJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<AnnouncementEntity> listPagingByBookId(Integer book_id, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "id")));
			return announcementJpaRepository.listPagingByBookId(book_id, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

}
