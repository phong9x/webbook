/*
 * Created on 15 Dec 2015 ( Time 17:20:40 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.webbook.bean.Report;
import org.trams.webbook.bean.jpa.CommentEntity;
import org.trams.webbook.bean.jpa.PostEntity;
import org.trams.webbook.bean.jpa.ReportEntity;
import java.util.Date;
import org.trams.webbook.business.service.ReportService;
import org.trams.webbook.business.service.mapping.ReportServiceMapper;
import org.trams.webbook.data.repository.jpa.ReportJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of ReportService
 */
@Component
@Transactional
public class ReportServiceImpl implements ReportService {

	@Resource
	private ReportJpaRepository reportJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private ReportServiceMapper reportServiceMapper;
	
	@Override
	public Report findById(Integer id) {
		ReportEntity reportEntity = reportJpaRepository.findOne(id);
		return reportServiceMapper.mapReportEntityToReport(reportEntity);
	}

	@Override
	public Page<ReportEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return reportJpaRepository.findAll(request);
	}

	@Override
	public List<Report> findAll() {
		Iterable<ReportEntity> entities = reportJpaRepository.findAll();
		List<Report> beans = new ArrayList<Report>();
		for(ReportEntity reportEntity : entities) {
			beans.add(reportServiceMapper.mapReportEntityToReport(reportEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = reportJpaRepository.count();
		return count;
	}

	@Override
	public Report save(Report report) {
		return update(report) ;
	}

	@Override
	public Report create(Report report) {
/*
		ReportEntity reportEntity = reportJpaRepository.findOne(report.getId());
		if( reportEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		reportEntity = new ReportEntity();
		reportServiceMapper.mapReportToReportEntity(report, reportEntity);
		ReportEntity reportEntitySaved = reportJpaRepository.save(reportEntity);
		return reportServiceMapper.mapReportEntityToReport(reportEntitySaved);
*/
		ReportEntity reportEntity = new ReportEntity();
		reportServiceMapper.mapReportToReportEntity(report, reportEntity);
		ReportEntity reportEntitySaved = reportJpaRepository.save(reportEntity);
		return reportServiceMapper.mapReportEntityToReport(reportEntitySaved);
	}

	@Override
	public Report update(Report report) {
		ReportEntity reportEntity = reportJpaRepository.findOne(report.getId());
		reportServiceMapper.mapReportToReportEntity(report, reportEntity);
		ReportEntity reportEntitySaved = reportJpaRepository.save(reportEntity);
		return reportServiceMapper.mapReportEntityToReport(reportEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		reportJpaRepository.delete(id);
	}

	public ReportJpaRepository getReportJpaRepository() {
		return reportJpaRepository;
	}

	public void setReportJpaRepository(ReportJpaRepository reportJpaRepository) {
		this.reportJpaRepository = reportJpaRepository;
	}

	public ReportServiceMapper getReportServiceMapper() {
		return reportServiceMapper;
	}

	public void setReportServiceMapper(ReportServiceMapper reportServiceMapper) {
		this.reportServiceMapper = reportServiceMapper;
	}

	@Override
	public Page<ReportEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return reportJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Report findByUserParrentType(Integer userid, Integer parrent, String tpye) {
		try {
			ReportEntity pe = reportJpaRepository.findByUserParrentType(userid,parrent,tpye);
			return reportServiceMapper.mapReportEntityToReport(pe);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<ReportEntity> listPagingBy_Type(String type, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return reportJpaRepository.listPagingBy_Type(type, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	@Override
	public Page<CommentEntity> listCommentReport(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return reportJpaRepository.listCommentReport(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	@Override
	public Page<PostEntity> listPostReport(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return reportJpaRepository.listPostReport(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<ReportEntity> listPopupHistory(Integer id,String type) {
		try {
			return reportJpaRepository.listPopupHistory(id, type);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	

}
