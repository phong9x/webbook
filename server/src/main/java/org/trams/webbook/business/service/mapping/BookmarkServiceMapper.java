/*
 * Created on 11 Jan 2016 ( Time 16:14:58 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.webbook.bean.Bookmark;
import org.trams.webbook.bean.jpa.BookmarkEntity;
import org.trams.webbook.bean.jpa.UserEntity;
import org.trams.webbook.bean.jpa.EpisodeEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class BookmarkServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public BookmarkServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'BookmarkEntity' to 'Bookmark'
	 * @param bookmarkEntity
	 */
	public Bookmark mapBookmarkEntityToBookmark(BookmarkEntity bookmarkEntity) {
		if(bookmarkEntity == null) {
			return null;
		}

		//--- Generic mapping 
		Bookmark bookmark = map(bookmarkEntity, Bookmark.class);

		//--- Link mapping ( link to User )
		if(bookmarkEntity.getUser() != null) {
			bookmark.setUserId(bookmarkEntity.getUser().getId());
		}
		//--- Link mapping ( link to Episode )
		if(bookmarkEntity.getEpisode() != null) {
			bookmark.setEpisodeId(bookmarkEntity.getEpisode().getId());
		}
		return bookmark;
	}
	
	/**
	 * Mapping from 'Bookmark' to 'BookmarkEntity'
	 * @param bookmark
	 * @param bookmarkEntity
	 */
	public void mapBookmarkToBookmarkEntity(Bookmark bookmark, BookmarkEntity bookmarkEntity) {
		if(bookmark == null) {
			return;
		}

		//--- Generic mapping 
		map(bookmark, bookmarkEntity);

		//--- Link mapping ( link : bookmark )
		if( hasLinkToUser(bookmark) ) {
			UserEntity user1 = new UserEntity();
			user1.setId( bookmark.getUserId() );
			bookmarkEntity.setUser( user1 );
		} else {
			bookmarkEntity.setUser( null );
		}

		//--- Link mapping ( link : bookmark )
		if( hasLinkToEpisode(bookmark) ) {
			EpisodeEntity episode2 = new EpisodeEntity();
			episode2.setId( bookmark.getEpisodeId() );
			bookmarkEntity.setEpisode( episode2 );
		} else {
			bookmarkEntity.setEpisode( null );
		}

	}
	
	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(Bookmark bookmark) {
		if(bookmark.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Episode id is valid.
	 * @param Episode Episode
	 * @return boolean
	 */
	private boolean hasLinkToEpisode(Bookmark bookmark) {
		if(bookmark.getEpisodeId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}