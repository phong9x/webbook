/*
 * Created on 16 Jan 2016 ( Time 10:42:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.webbook.bean.BookViewing;
import org.trams.webbook.bean.jpa.BookViewingEntity;
import org.trams.webbook.bean.jpa.InterestedBookEntity;

import java.util.Date;
import org.trams.webbook.business.service.BookViewingService;
import org.trams.webbook.business.service.mapping.BookViewingServiceMapper;
import org.trams.webbook.data.repository.jpa.BookViewingJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of BookViewingService
 */
@Component
@Transactional
public class BookViewingServiceImpl implements BookViewingService {

	@Resource
	private BookViewingJpaRepository bookViewingJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private BookViewingServiceMapper bookViewingServiceMapper;
	
	@Override
	public BookViewing findById(Integer id) {
		BookViewingEntity bookViewingEntity = bookViewingJpaRepository.findOne(id);
		return bookViewingServiceMapper.mapBookViewingEntityToBookViewing(bookViewingEntity);
	}

	@Override
	public Page<BookViewingEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return bookViewingJpaRepository.findAll(request);
	}

	@Override
	public List<BookViewing> findAll() {
		Iterable<BookViewingEntity> entities = bookViewingJpaRepository.findAll();
		List<BookViewing> beans = new ArrayList<BookViewing>();
		for(BookViewingEntity bookViewingEntity : entities) {
			beans.add(bookViewingServiceMapper.mapBookViewingEntityToBookViewing(bookViewingEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = bookViewingJpaRepository.count();
		return count;
	}

	@Override
	public BookViewing save(BookViewing bookViewing) {
		return update(bookViewing) ;
	}

	@Override
	public BookViewing create(BookViewing bookViewing) {
/*
		BookViewingEntity bookViewingEntity = bookViewingJpaRepository.findOne(bookViewing.getId());
		if( bookViewingEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		bookViewingEntity = new BookViewingEntity();
		bookViewingServiceMapper.mapBookViewingToBookViewingEntity(bookViewing, bookViewingEntity);
		BookViewingEntity bookViewingEntitySaved = bookViewingJpaRepository.save(bookViewingEntity);
		return bookViewingServiceMapper.mapBookViewingEntityToBookViewing(bookViewingEntitySaved);
*/
		BookViewingEntity bookViewingEntity = new BookViewingEntity();
		bookViewingServiceMapper.mapBookViewingToBookViewingEntity(bookViewing, bookViewingEntity);
		BookViewingEntity bookViewingEntitySaved = bookViewingJpaRepository.save(bookViewingEntity);
		return bookViewingServiceMapper.mapBookViewingEntityToBookViewing(bookViewingEntitySaved);
	}

	@Override
	public BookViewing update(BookViewing bookViewing) {
		BookViewingEntity bookViewingEntity = bookViewingJpaRepository.findOne(bookViewing.getId());
		bookViewingServiceMapper.mapBookViewingToBookViewingEntity(bookViewing, bookViewingEntity);
		BookViewingEntity bookViewingEntitySaved = bookViewingJpaRepository.save(bookViewingEntity);
		return bookViewingServiceMapper.mapBookViewingEntityToBookViewing(bookViewingEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		bookViewingJpaRepository.delete(id);
	}

	public BookViewingJpaRepository getBookViewingJpaRepository() {
		return bookViewingJpaRepository;
	}

	public void setBookViewingJpaRepository(BookViewingJpaRepository bookViewingJpaRepository) {
		this.bookViewingJpaRepository = bookViewingJpaRepository;
	}

	public BookViewingServiceMapper getBookViewingServiceMapper() {
		return bookViewingServiceMapper;
	}

	public void setBookViewingServiceMapper(BookViewingServiceMapper bookViewingServiceMapper) {
		this.bookViewingServiceMapper = bookViewingServiceMapper;
	}

	@Override
	public Page<BookViewingEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return bookViewingJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<BookViewingEntity> findBy_UserId(Integer userId) {
		try {
			return bookViewingJpaRepository.findBy_UserId(userId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
}
