/*
 * Created on 15 Dec 2015 ( Time 17:20:39 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.webbook.bean.Banner;
import org.trams.webbook.bean.jpa.BannerEntity;
import java.util.Date;
import org.trams.webbook.business.service.BannerService;
import org.trams.webbook.business.service.mapping.BannerServiceMapper;
import org.trams.webbook.data.repository.jpa.BannerJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of BannerService
 */
@Component
@Transactional
public class BannerServiceImpl implements BannerService {

	@Resource
	private BannerJpaRepository bannerJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private BannerServiceMapper bannerServiceMapper;
	
	@Override
	public Banner findById(Integer id) {
		BannerEntity bannerEntity = bannerJpaRepository.findOne(id);
		return bannerServiceMapper.mapBannerEntityToBanner(bannerEntity);
	}

	@Override
	public Page<BannerEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return bannerJpaRepository.findAll(request);
	}

	@Override
	public List<Banner> findAll() {
		Iterable<BannerEntity> entities = bannerJpaRepository.findAll();
		List<Banner> beans = new ArrayList<Banner>();
		for(BannerEntity bannerEntity : entities) {
			beans.add(bannerServiceMapper.mapBannerEntityToBanner(bannerEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = bannerJpaRepository.count();
		return count;
	}

	@Override
	public Banner save(Banner banner) {
		return update(banner) ;
	}

	@Override
	public Banner create(Banner banner) {
/*
		BannerEntity bannerEntity = bannerJpaRepository.findOne(banner.getId());
		if( bannerEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		bannerEntity = new BannerEntity();
		bannerServiceMapper.mapBannerToBannerEntity(banner, bannerEntity);
		BannerEntity bannerEntitySaved = bannerJpaRepository.save(bannerEntity);
		return bannerServiceMapper.mapBannerEntityToBanner(bannerEntitySaved);
*/
		BannerEntity bannerEntity = new BannerEntity();
		bannerServiceMapper.mapBannerToBannerEntity(banner, bannerEntity);
		BannerEntity bannerEntitySaved = bannerJpaRepository.save(bannerEntity);
		return bannerServiceMapper.mapBannerEntityToBanner(bannerEntitySaved);
	}

	@Override
	public Banner update(Banner banner) {
		BannerEntity bannerEntity = bannerJpaRepository.findOne(banner.getId());
		bannerServiceMapper.mapBannerToBannerEntity(banner, bannerEntity);
		BannerEntity bannerEntitySaved = bannerJpaRepository.save(bannerEntity);
		return bannerServiceMapper.mapBannerEntityToBanner(bannerEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		bannerJpaRepository.delete(id);
	}

	public BannerJpaRepository getBannerJpaRepository() {
		return bannerJpaRepository;
	}

	public void setBannerJpaRepository(BannerJpaRepository bannerJpaRepository) {
		this.bannerJpaRepository = bannerJpaRepository;
	}

	public BannerServiceMapper getBannerServiceMapper() {
		return bannerServiceMapper;
	}

	public void setBannerServiceMapper(BannerServiceMapper bannerServiceMapper) {
		this.bannerServiceMapper = bannerServiceMapper;
	}

	@Override
	public Page<BannerEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return bannerJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

}
