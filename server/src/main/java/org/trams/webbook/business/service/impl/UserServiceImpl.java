/*
 * Created on 15 Dec 2015 ( Time 17:20:40 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.impl;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.webbook.bean.User;
import org.trams.webbook.bean.jpa.BookEntity;
import org.trams.webbook.bean.jpa.CategoryEntity;
import org.trams.webbook.bean.jpa.UserEntity;
import java.util.Date;
import org.trams.webbook.business.service.UserService;
import org.trams.webbook.business.service.mapping.UserServiceMapper;
import org.trams.webbook.data.repository.jpa.UserJpaRepository;
import org.trams.webbook.rest.controller.CouponPurchaseRestController;
import org.trams.webbook.web.common.Utils;
import org.trams.webbook.web.item.StatisticMember;
import org.apache.poi.ss.formula.functions.Days360;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of UserService
 */
@Component
@Transactional
public class UserServiceImpl implements UserService {

	@Resource
	private UserJpaRepository userJpaRepository;
	

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private UserServiceMapper userServiceMapper;
	
	@Override
	public User findById(Integer id) {
		UserEntity userEntity = userJpaRepository.findOne(id);
		return userServiceMapper.mapUserEntityToUser(userEntity);
	}

	@Override
	public Page<UserEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return userJpaRepository.findAll(request);
	}

	@Override
	public List<User> findAll() {
		Iterable<UserEntity> entities = userJpaRepository.findAll();
		List<User> beans = new ArrayList<User>();
		for(UserEntity userEntity : entities) {
			beans.add(userServiceMapper.mapUserEntityToUser(userEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = userJpaRepository.count();
		return count;
	}

	@Override
	public User save(User user) {
		return update(user) ;
	}

	@Override
	public User create(User user) {
/*
		UserEntity userEntity = userJpaRepository.findOne(user.getId());
		if( userEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		userEntity = new UserEntity();
		userServiceMapper.mapUserToUserEntity(user, userEntity);
		UserEntity userEntitySaved = userJpaRepository.save(userEntity);
		return userServiceMapper.mapUserEntityToUser(userEntitySaved);
*/
		UserEntity userEntity = new UserEntity();
		userServiceMapper.mapUserToUserEntity(user, userEntity);
		UserEntity userEntitySaved = userJpaRepository.save(userEntity);
		return userServiceMapper.mapUserEntityToUser(userEntitySaved);
	}

	@Override
	public User update(User user) {
		UserEntity userEntity = userJpaRepository.findOne(user.getId());
		userServiceMapper.mapUserToUserEntity(user, userEntity);
		UserEntity userEntitySaved = userJpaRepository.save(userEntity);
		return userServiceMapper.mapUserEntityToUser(userEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		userJpaRepository.delete(id);
	}

	public UserJpaRepository getUserJpaRepository() {
		return userJpaRepository;
	}

	public void setUserJpaRepository(UserJpaRepository userJpaRepository) {
		this.userJpaRepository = userJpaRepository;
	}

	public UserServiceMapper getUserServiceMapper() {
		return userServiceMapper;
	}

	public void setUserServiceMapper(UserServiceMapper userServiceMapper) {
		this.userServiceMapper = userServiceMapper;
	}
	
	@Override
	public UserEntity login(String username, String password, Integer role) {
		try{
			return userJpaRepository.login(username, password, role);
		}catch(Exception e){
			return null;
		}
		
	}

	@Override
	public Page<UserEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<UserEntity> checkNickname(String nickname) {
		try {
			return userJpaRepository.checkNickname(nickname);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	@Override
	public List<UserEntity> checkUsername(String username) {
		try {
			return userJpaRepository.checkUsername(username);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public UserEntity findByUsernameFullnameEmail(String username, String fullname, String email) {
		try {
			return userJpaRepository.findByUsernameFullnameEmail(username, fullname, email);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<UserEntity> findByFullnameEmail(String fullname, String email) {
		try {
			return userJpaRepository.findByFullnameEmail(fullname, email);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalNumberMember() {
		try {
			return userJpaRepository.totalNumberMember();
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalNewlyJoinedMember() {
		try {
			return userJpaRepository.totalNewlyJoinedMember();
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalVisitorMember() {
		try {
			return userJpaRepository.totalVisitorMember();
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalTodayVisitorMember() {
		try {
			return userJpaRepository.totalTodayVisitorMember();
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalMemberByGender(String gender) {
		try {
			return userJpaRepository.totalMemberByGender(gender);
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalMemberRegisterBook() {
		try {
			return userJpaRepository.totalMemberRegisterBook();
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}	}

	@Override
	public Integer totalMemberRegisterBookNewly() {
		try {
			return userJpaRepository.totalMemberRegisterBookNewly();
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalMemberByAgeGroup(Integer ageGroup, String gender) {
		try {
			return userJpaRepository.totalMemberByAgeGroup(ageGroup, gender);
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public StatisticMember calculateMember() {
		StatisticMember member=new StatisticMember();
		try {
			List<User> user = findAll();
			Integer totalVisitor=userJpaRepository.totalVisitorMember();
			Integer totalVisitorToday=userJpaRepository.totalTodayVisitorMember();
			if(totalVisitor>0){
				member.setTotal_visitor_number(totalVisitor);
			}
			if(totalVisitorToday>0){
				member.setToday_visitor_number(totalVisitorToday);
			}
			member.setTotal_member_register_book(userJpaRepository.totalMemberRegisterBook());
			member.setTotal_member_new_register_book(userJpaRepository.totalMemberRegisterBookNewly());
			Date now=new Date();
			for (User user1 : user) {
				member.setTotal_member(member.getTotal_member()+1);
				if(Utils.diffirentTwoDate(user1.getCreateDate(), now)<=7){
					member.setTotal_member_newly_joined_member(member.getTotal_member_newly_joined_member()+1);
				}
			
				if(user1.getAgeGroupId()==1 && user1.getGender().equalsIgnoreCase("여")){
					member.setTotal_member_female_age_1(member.getTotal_member_female_age_1()+1);
					member.setTotal_member_female(member.getTotal_member_female()+1);
					member.setTotal_member_age_1(member.getTotal_member_age_1()+1);
				}
				if(user1.getAgeGroupId()==2 && user1.getGender().equalsIgnoreCase("여")){
					member.setTotal_member_female_age_2(member.getTotal_member_female_age_2()+1);
					member.setTotal_member_female(member.getTotal_member_female()+1);
					member.setTotal_member_age_2(member.getTotal_member_age_2()+1);
				}
				if(user1.getAgeGroupId()==3 && user1.getGender().equalsIgnoreCase("여")){
					member.setTotal_member_female_age_3(member.getTotal_member_female_age_3()+1);
					member.setTotal_member_female(member.getTotal_member_female()+1);
					member.setTotal_member_age_3(member.getTotal_member_age_3()+1);
				}
				if(user1.getAgeGroupId()==4 && user1.getGender().equalsIgnoreCase("여")){
					member.setTotal_member_female_age_4(member.getTotal_member_female_age_4()+1);
					member.setTotal_member_female(member.getTotal_member_female()+1);
					member.setTotal_member_age_4(member.getTotal_member_age_4()+1);
				}
				if(user1.getAgeGroupId()==1 && user1.getGender().equalsIgnoreCase("남")){
					member.setTotal_member_male_age_1(member.getTotal_member_male_age_1()+1);
					member.setTotal_member_male(member.getTotal_member_male()+1);
					member.setTotal_member_age_1(member.getTotal_member_age_1()+1);
				}
				if(user1.getAgeGroupId()==2 && user1.getGender().equalsIgnoreCase("남")){
					member.setTotal_member_male_age_2(member.getTotal_member_male_age_2()+1);
					member.setTotal_member_male(member.getTotal_member_male()+1);
					member.setTotal_member_age_2(member.getTotal_member_age_2()+1);
				}
				if(user1.getAgeGroupId()==3 && user1.getGender().equalsIgnoreCase("남")){
					member.setTotal_member_male_age_3(member.getTotal_member_male_age_3()+1);
					member.setTotal_member_male(member.getTotal_member_male()+1);
					member.setTotal_member_age_3(member.getTotal_member_age_3()+1);
				}
				if(user1.getAgeGroupId()==4 && user1.getGender().equalsIgnoreCase("남")){
					member.setTotal_member_male_age_4(member.getTotal_member_male_age_4()+1);
					member.setTotal_member_male(member.getTotal_member_male()+1);
					member.setTotal_member_age_4(member.getTotal_member_age_4()+1);
				}
				
			}
			return member;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
		
	}

	@Override
	public Page<UserEntity> listPagingSearch(String ageGroupName, String authorName, String username, String nickname, String fullname,
			Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return userJpaRepository.listPagingSearch(ageGroupName, authorName, username, nickname, fullname, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<Integer> reportMember12Month(Integer current_month,Integer current_year) {
		try {
			List<Object[]> result=userJpaRepository.reportMember_Number_By_12Month(current_year);
			List<Integer> list=new ArrayList<>();
			for (int i = 0; i < result.get(0).length; i++) {
				if((i+1)>current_month){
					list.add(null);
				}else{
					list.add(Utils.parseInt(result.get(0)[i]));
				}
			}
			return list;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<Integer> reportMember_WithRaw_Number_By_12Month(Integer current_month, Integer current_year) {
		try {
			List<Object[]> result=userJpaRepository.reportMember_WithRaw_Number_By_12Month(current_year);
			List<Integer> list=new ArrayList<>();
			for (int i = 0; i < result.get(0).length; i++) {
				if((i+1)>current_month){
					list.add(null);
				}else{
					list.add(Utils.parseInt(result.get(0)[i]));
				}
			}
		
			return list;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<Integer> reportMember_Active_Number_By_12Month(Integer current_month, Integer current_year) {
		try {
			List<Object[]> result=userJpaRepository.reportMember_Active_Number_By_12Month(current_year);
			List<Integer> list=new ArrayList<>();
			for (int i = 0; i < result.get(0).length; i++) {
				if((i+1)>current_month){
					list.add(null);
				}else{
					list.add(Utils.parseInt(result.get(0)[i]));
				}
			}
		
			return list;
		} catch (Exception e) {
			System.out.println(e);
			return null;

		}
	}
	
	@Override

	public List<Integer> report_Conversion_Rate_By_12Month(Integer current_month, Integer current_year) {
		
		try {
			List<Object[]> total=userJpaRepository.reportMember_Number_By_12Month(current_year);
			List<Object[]> charge=userJpaRepository.reportMember_Charge_Number_By_12Month(current_year);
			List<Integer> list=new ArrayList<>();
			for (int i = 0; i < total.get(0).length; i++) {
				if((i+1)>current_month){
					list.add(null);
				}else{
					if(Utils.parseInt(total.get(0)[i])==0){
						list.add(Utils.parseInt(charge.get(0)[i])/1);
					}else{
						list.add(Utils.parseInt(charge.get(0)[i])/Utils.parseInt(total.get(0)[i]));
					}
					
				}
			}
			return list;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<Integer> reportMember_Charge_Number_By_12Month(Integer current_month, Integer current_year) {
		try {
			List<Object[]> result=userJpaRepository.reportMember_Charge_Number_By_12Month(current_year);
			List<Integer> list=new ArrayList<>();
			for (int i = 0; i < result.get(0).length; i++) {
				if((i+1)>current_month){
					list.add(null);
				}else{
					list.add(Utils.parseInt(result.get(0)[i]));
				}
			}
		
			return list;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<Integer> reportMember_Coupon_Charge_Total_By_12Month(Integer current_month, Integer current_year) {
		try {
			List<Object[]> result=userJpaRepository.reportMember_Coupon_Charge_Total_By_12Month(current_year);
			List<Integer> list=new ArrayList<>();
			for (int i = 0; i < result.get(0).length; i++) {
				if((i+1)>current_month){
					list.add(null);
				}else{
					if(result.get(0)[i]!=null){
						list.add(Utils.parseInt(result.get(0)[i]));
					}else{
						list.add(0);
					}
					
				}
			}
		
			return list;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void updateVisitorDaily() {
		try {
			userJpaRepository.updateVisitorDaily();
		} catch (Exception e) {
			System.out.println(e);
		}
		
	}

	

}
