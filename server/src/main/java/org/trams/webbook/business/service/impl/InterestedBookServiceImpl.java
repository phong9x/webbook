/*
 * Created on 5 Jan 2016 ( Time 17:39:10 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.webbook.bean.InterestedBook;
import org.trams.webbook.bean.jpa.InterestedBookEntity;
import java.util.Date;
import org.trams.webbook.business.service.InterestedBookService;
import org.trams.webbook.business.service.mapping.InterestedBookServiceMapper;
import org.trams.webbook.data.repository.jpa.InterestedBookJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of InterestedBookService
 */
@Component
@Transactional
public class InterestedBookServiceImpl implements InterestedBookService {

	@Resource
	private InterestedBookJpaRepository interestedBookJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private InterestedBookServiceMapper interestedBookServiceMapper;
	
	@Override
	public InterestedBook findById(Integer id) {
		InterestedBookEntity interestedBookEntity = interestedBookJpaRepository.findOne(id);
		return interestedBookServiceMapper.mapInterestedBookEntityToInterestedBook(interestedBookEntity);
	}

	@Override
	public Page<InterestedBookEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return interestedBookJpaRepository.findAll(request);
	}

	@Override
	public List<InterestedBook> findAll() {
		Iterable<InterestedBookEntity> entities = interestedBookJpaRepository.findAll();
		List<InterestedBook> beans = new ArrayList<InterestedBook>();
		for(InterestedBookEntity interestedBookEntity : entities) {
			beans.add(interestedBookServiceMapper.mapInterestedBookEntityToInterestedBook(interestedBookEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = interestedBookJpaRepository.count();
		return count;
	}

	@Override
	public InterestedBook save(InterestedBook interestedBook) {
		return update(interestedBook) ;
	}

	@Override
	public InterestedBook create(InterestedBook interestedBook) {
/*
		InterestedBookEntity interestedBookEntity = interestedBookJpaRepository.findOne(interestedBook.getId());
		if( interestedBookEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		interestedBookEntity = new InterestedBookEntity();
		interestedBookServiceMapper.mapInterestedBookToInterestedBookEntity(interestedBook, interestedBookEntity);
		InterestedBookEntity interestedBookEntitySaved = interestedBookJpaRepository.save(interestedBookEntity);
		return interestedBookServiceMapper.mapInterestedBookEntityToInterestedBook(interestedBookEntitySaved);
*/
		InterestedBookEntity interestedBookEntity = new InterestedBookEntity();
		interestedBookServiceMapper.mapInterestedBookToInterestedBookEntity(interestedBook, interestedBookEntity);
		InterestedBookEntity interestedBookEntitySaved = interestedBookJpaRepository.save(interestedBookEntity);
		return interestedBookServiceMapper.mapInterestedBookEntityToInterestedBook(interestedBookEntitySaved);
	}

	@Override
	public InterestedBook update(InterestedBook interestedBook) {
		InterestedBookEntity interestedBookEntity = interestedBookJpaRepository.findOne(interestedBook.getId());
		interestedBookServiceMapper.mapInterestedBookToInterestedBookEntity(interestedBook, interestedBookEntity);
		InterestedBookEntity interestedBookEntitySaved = interestedBookJpaRepository.save(interestedBookEntity);
		return interestedBookServiceMapper.mapInterestedBookEntityToInterestedBook(interestedBookEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		interestedBookJpaRepository.delete(id);
	}

	public InterestedBookJpaRepository getInterestedBookJpaRepository() {
		return interestedBookJpaRepository;
	}

	public void setInterestedBookJpaRepository(InterestedBookJpaRepository interestedBookJpaRepository) {
		this.interestedBookJpaRepository = interestedBookJpaRepository;
	}

	public InterestedBookServiceMapper getInterestedBookServiceMapper() {
		return interestedBookServiceMapper;
	}

	public void setInterestedBookServiceMapper(InterestedBookServiceMapper interestedBookServiceMapper) {
		this.interestedBookServiceMapper = interestedBookServiceMapper;
	}

	@Override
	public Page<InterestedBookEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return interestedBookJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<InterestedBookEntity> findBy_UserId(Integer userId) {
		try {
			return interestedBookJpaRepository.findBy_UserId(userId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void deleteBy_UserId(Integer userid) {
		try {
			 interestedBookJpaRepository.deleteBy_UserId(userid);
		} catch (Exception e) {
			System.out.println(e);
			
		}
		
	}

	@Override
	public List<InterestedBookEntity> findBy_UserId_BookId(Integer userId, Integer episodeId) {
		try {
			return interestedBookJpaRepository.findBy_UserId_BookId(userId, episodeId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void deleteBy_UserId_EposoideId(Integer userid, Integer eposoideId) {
		try {
			 interestedBookJpaRepository.deleteBy_UserId_EposoideId(userid, eposoideId);
		} catch (Exception e) {
			System.out.println(e);
			
		}
		
	}

	@Override
	public InterestedBookEntity findOneBy_UserId_EpisodeId(Integer userId, Integer episodeId) {
		try {
			 return interestedBookJpaRepository.findOneBy_UserId_EpisodeId(userId, episodeId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalInterrestBook_ByBookId(Integer bookid) {
		try {
			 return interestedBookJpaRepository.totalInterrestBook_ByBookId(bookid);
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

}
