/*
 * Created on 30 Dec 2015 ( Time 17:30:12 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.webbook.bean.LikeHistory;
import org.trams.webbook.bean.jpa.LikeHistoryEntity;
import java.util.Date;
import org.trams.webbook.business.service.LikeHistoryService;
import org.trams.webbook.business.service.mapping.LikeHistoryServiceMapper;
import org.trams.webbook.data.repository.jpa.LikeHistoryJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of LikeHistoryService
 */
@Component
@Transactional
public class LikeHistoryServiceImpl implements LikeHistoryService {

	@Resource
	private LikeHistoryJpaRepository likeHistoryJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private LikeHistoryServiceMapper likeHistoryServiceMapper;
	
	@Override
	public LikeHistory findById(Integer id) {
		LikeHistoryEntity likeHistoryEntity = likeHistoryJpaRepository.findOne(id);
		return likeHistoryServiceMapper.mapLikeHistoryEntityToLikeHistory(likeHistoryEntity);
	}

	@Override
	public Page<LikeHistoryEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return likeHistoryJpaRepository.findAll(request);
	}

	@Override
	public List<LikeHistory> findAll() {
		Iterable<LikeHistoryEntity> entities = likeHistoryJpaRepository.findAll();
		List<LikeHistory> beans = new ArrayList<LikeHistory>();
		for(LikeHistoryEntity likeHistoryEntity : entities) {
			beans.add(likeHistoryServiceMapper.mapLikeHistoryEntityToLikeHistory(likeHistoryEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = likeHistoryJpaRepository.count();
		return count;
	}

	@Override
	public LikeHistory save(LikeHistory likeHistory) {
		return update(likeHistory) ;
	}

	@Override
	public LikeHistory create(LikeHistory likeHistory) {
/*
		LikeHistoryEntity likeHistoryEntity = likeHistoryJpaRepository.findOne(likeHistory.getId());
		if( likeHistoryEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		likeHistoryEntity = new LikeHistoryEntity();
		likeHistoryServiceMapper.mapLikeHistoryToLikeHistoryEntity(likeHistory, likeHistoryEntity);
		LikeHistoryEntity likeHistoryEntitySaved = likeHistoryJpaRepository.save(likeHistoryEntity);
		return likeHistoryServiceMapper.mapLikeHistoryEntityToLikeHistory(likeHistoryEntitySaved);
*/
		LikeHistoryEntity likeHistoryEntity = new LikeHistoryEntity();
		likeHistoryServiceMapper.mapLikeHistoryToLikeHistoryEntity(likeHistory, likeHistoryEntity);
		LikeHistoryEntity likeHistoryEntitySaved = likeHistoryJpaRepository.save(likeHistoryEntity);
		return likeHistoryServiceMapper.mapLikeHistoryEntityToLikeHistory(likeHistoryEntitySaved);
	}

	@Override
	public LikeHistory update(LikeHistory likeHistory) {
		LikeHistoryEntity likeHistoryEntity = likeHistoryJpaRepository.findOne(likeHistory.getId());
		likeHistoryServiceMapper.mapLikeHistoryToLikeHistoryEntity(likeHistory, likeHistoryEntity);
		LikeHistoryEntity likeHistoryEntitySaved = likeHistoryJpaRepository.save(likeHistoryEntity);
		return likeHistoryServiceMapper.mapLikeHistoryEntityToLikeHistory(likeHistoryEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		likeHistoryJpaRepository.delete(id);
	}

	public LikeHistoryJpaRepository getLikeHistoryJpaRepository() {
		return likeHistoryJpaRepository;
	}

	public void setLikeHistoryJpaRepository(LikeHistoryJpaRepository likeHistoryJpaRepository) {
		this.likeHistoryJpaRepository = likeHistoryJpaRepository;
	}

	public LikeHistoryServiceMapper getLikeHistoryServiceMapper() {
		return likeHistoryServiceMapper;
	}

	public void setLikeHistoryServiceMapper(LikeHistoryServiceMapper likeHistoryServiceMapper) {
		this.likeHistoryServiceMapper = likeHistoryServiceMapper;
	}

	@Override
	public Page<LikeHistoryEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return likeHistoryJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public LikeHistoryEntity findBy_UserId_EpisodeId(Integer userId, Integer episodeId, Integer type) {
		try {
			return likeHistoryJpaRepository.findBy_UserId_EpisodeId(userId, episodeId,type).get(0);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

}
