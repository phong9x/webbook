/*
 * Created on 15 Dec 2015 ( Time 17:20:39 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.webbook.bean.Bookmark;
import org.trams.webbook.bean.jpa.BookmarkEntity;
import org.trams.webbook.business.service.BookmarkService;
import org.trams.webbook.business.service.mapping.BookmarkServiceMapper;
import org.trams.webbook.data.repository.jpa.BookmarkJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of BookmarkService
 */
@Component
@Transactional
public class BookmarkServiceImpl implements BookmarkService {

	@Resource
	private BookmarkJpaRepository bookmarkJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private BookmarkServiceMapper bookmarkServiceMapper;
	
	@Override
	public Bookmark findById(Integer id) {
		BookmarkEntity bookmarkEntity = bookmarkJpaRepository.findOne(id);
		return bookmarkServiceMapper.mapBookmarkEntityToBookmark(bookmarkEntity);
	}

	@Override
	public Page<BookmarkEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return bookmarkJpaRepository.findAll(request);
	}

	@Override
	public List<Bookmark> findAll() {
		Iterable<BookmarkEntity> entities = bookmarkJpaRepository.findAll();
		List<Bookmark> beans = new ArrayList<Bookmark>();
		for(BookmarkEntity bookmarkEntity : entities) {
			beans.add(bookmarkServiceMapper.mapBookmarkEntityToBookmark(bookmarkEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = bookmarkJpaRepository.count();
		return count;
	}

	@Override
	public Bookmark save(Bookmark bookmark) {
		return update(bookmark) ;
	}

	@Override
	public Bookmark create(Bookmark bookmark) {
/*
		BookmarkEntity bookmarkEntity = bookmarkJpaRepository.findOne(bookmark.getId());
		if( bookmarkEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		bookmarkEntity = new BookmarkEntity();
		bookmarkServiceMapper.mapBookmarkToBookmarkEntity(bookmark, bookmarkEntity);
		BookmarkEntity bookmarkEntitySaved = bookmarkJpaRepository.save(bookmarkEntity);
		return bookmarkServiceMapper.mapBookmarkEntityToBookmark(bookmarkEntitySaved);
*/
		BookmarkEntity bookmarkEntity = new BookmarkEntity();
		bookmarkServiceMapper.mapBookmarkToBookmarkEntity(bookmark, bookmarkEntity);
		BookmarkEntity bookmarkEntitySaved = bookmarkJpaRepository.save(bookmarkEntity);
		return bookmarkServiceMapper.mapBookmarkEntityToBookmark(bookmarkEntitySaved);
	}

	@Override
	public Bookmark update(Bookmark bookmark) {
		BookmarkEntity bookmarkEntity = bookmarkJpaRepository.findOne(bookmark.getId());
		bookmarkServiceMapper.mapBookmarkToBookmarkEntity(bookmark, bookmarkEntity);
		BookmarkEntity bookmarkEntitySaved = bookmarkJpaRepository.save(bookmarkEntity);
		return bookmarkServiceMapper.mapBookmarkEntityToBookmark(bookmarkEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		bookmarkJpaRepository.delete(id);
	}

	public BookmarkJpaRepository getBookmarkJpaRepository() {
		return bookmarkJpaRepository;
	}

	public void setBookmarkJpaRepository(BookmarkJpaRepository bookmarkJpaRepository) {
		this.bookmarkJpaRepository = bookmarkJpaRepository;
	}

	public BookmarkServiceMapper getBookmarkServiceMapper() {
		return bookmarkServiceMapper;
	}

	public void setBookmarkServiceMapper(BookmarkServiceMapper bookmarkServiceMapper) {
		this.bookmarkServiceMapper = bookmarkServiceMapper;
	}

	@Override
	public Page<BookmarkEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return bookmarkJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public BookmarkEntity findBy_UserId_EpisodeId(Integer userId, Integer episodeId) {
		try {
			return bookmarkJpaRepository.findBy_UserId_EpisodeId(userId, episodeId).get(0);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}


	@Override
	public void deleteBy_UserId(Integer userid) {
		try {
			bookmarkJpaRepository.deleteBy_UserId(userid);
		} catch (Exception e) {
			
		}
		
	}

	

	@Override
	public List<BookmarkEntity> findBy_UserId(Integer userId) {
		try {
			return bookmarkJpaRepository.findBy_UserId(userId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}



}
