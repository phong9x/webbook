/*
 * Created on 15 Dec 2015 ( Time 17:20:39 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.webbook.bean.CouponPurchase;
import org.trams.webbook.bean.jpa.CategoryEntity;
import org.trams.webbook.bean.jpa.CouponPurchaseEntity;
import org.trams.webbook.bean.jpa.CouponUsedEntity;

import java.util.Date;
import org.trams.webbook.business.service.CouponPurchaseService;
import org.trams.webbook.business.service.mapping.CouponPurchaseServiceMapper;
import org.trams.webbook.data.repository.jpa.CategoryJpaRepository;
import org.trams.webbook.data.repository.jpa.CouponPurchaseJpaRepository;
import org.trams.webbook.web.item.StatisticCoupon;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of CouponPurchaseService
 */
@Component
@Transactional
public class CouponPurchaseServiceImpl implements CouponPurchaseService {

	@Resource
	private CouponPurchaseJpaRepository couponPurchaseJpaRepository;
	
	@Resource
	private CategoryJpaRepository categoryJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private CouponPurchaseServiceMapper couponPurchaseServiceMapper;
	
	@Override
	public CouponPurchase findById(Integer id) {
		CouponPurchaseEntity couponPurchaseEntity = couponPurchaseJpaRepository.findOne(id);
		return couponPurchaseServiceMapper.mapCouponPurchaseEntityToCouponPurchase(couponPurchaseEntity);
	}

	@Override
	public CouponPurchaseEntity findOne(Integer id){
		CouponPurchaseEntity couponUsedEntity = couponPurchaseJpaRepository.findOne(id);
		return couponUsedEntity;
	}
	
	@Override
	public Page<CouponPurchaseEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return couponPurchaseJpaRepository.findAll(request);
	}

	@Override
	public List<CouponPurchase> findAll() {
		Iterable<CouponPurchaseEntity> entities = couponPurchaseJpaRepository.findAll();
		List<CouponPurchase> beans = new ArrayList<CouponPurchase>();
		for(CouponPurchaseEntity couponPurchaseEntity : entities) {
			beans.add(couponPurchaseServiceMapper.mapCouponPurchaseEntityToCouponPurchase(couponPurchaseEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = couponPurchaseJpaRepository.count();
		return count;
	}

	@Override
	public CouponPurchase save(CouponPurchase couponPurchase) {
		return update(couponPurchase) ;
	}

	@Override
	public CouponPurchase create(CouponPurchase couponPurchase) {
/*
		CouponPurchaseEntity couponPurchaseEntity = couponPurchaseJpaRepository.findOne(couponPurchase.getId());
		if( couponPurchaseEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		couponPurchaseEntity = new CouponPurchaseEntity();
		couponPurchaseServiceMapper.mapCouponPurchaseToCouponPurchaseEntity(couponPurchase, couponPurchaseEntity);
		CouponPurchaseEntity couponPurchaseEntitySaved = couponPurchaseJpaRepository.save(couponPurchaseEntity);
		return couponPurchaseServiceMapper.mapCouponPurchaseEntityToCouponPurchase(couponPurchaseEntitySaved);
*/
		CouponPurchaseEntity couponPurchaseEntity = new CouponPurchaseEntity();
		couponPurchaseServiceMapper.mapCouponPurchaseToCouponPurchaseEntity(couponPurchase, couponPurchaseEntity);
		CouponPurchaseEntity couponPurchaseEntitySaved = couponPurchaseJpaRepository.save(couponPurchaseEntity);
		return couponPurchaseServiceMapper.mapCouponPurchaseEntityToCouponPurchase(couponPurchaseEntitySaved);
	}

	@Override
	public CouponPurchase update(CouponPurchase couponPurchase) {
		CouponPurchaseEntity couponPurchaseEntity = couponPurchaseJpaRepository.findOne(couponPurchase.getId());
		couponPurchaseServiceMapper.mapCouponPurchaseToCouponPurchaseEntity(couponPurchase, couponPurchaseEntity);
		CouponPurchaseEntity couponPurchaseEntitySaved = couponPurchaseJpaRepository.save(couponPurchaseEntity);
		return couponPurchaseServiceMapper.mapCouponPurchaseEntityToCouponPurchase(couponPurchaseEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		couponPurchaseJpaRepository.delete(id);
	}

	public CouponPurchaseJpaRepository getCouponPurchaseJpaRepository() {
		return couponPurchaseJpaRepository;
	}

	public void setCouponPurchaseJpaRepository(CouponPurchaseJpaRepository couponPurchaseJpaRepository) {
		this.couponPurchaseJpaRepository = couponPurchaseJpaRepository;
	}

	public CouponPurchaseServiceMapper getCouponPurchaseServiceMapper() {
		return couponPurchaseServiceMapper;
	}

	public void setCouponPurchaseServiceMapper(CouponPurchaseServiceMapper couponPurchaseServiceMapper) {
		this.couponPurchaseServiceMapper = couponPurchaseServiceMapper;
	}

	@Override
	public Page<CouponPurchaseEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return couponPurchaseJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	@Override
	public Page<CouponPurchaseEntity> listPagingSearch(String id, String name, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return couponPurchaseJpaRepository.listPagingSearch(id, name, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalCouponChargingNumber() {
		try {
			return couponPurchaseJpaRepository.totalCouponChargingNumber();
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalRecentCouponChargingNumber() {
		try {
			return couponPurchaseJpaRepository.totalRecentCouponChargingNumber();
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalCouponChargingAmount() {
		try {
			if(couponPurchaseJpaRepository.totalRecentCouponChargingNumber()==null){
				return 0;
			}else{
				return couponPurchaseJpaRepository.totalRecentCouponChargingNumber();
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalRecentCouponChargingAmount() {
		try {
			if(couponPurchaseJpaRepository.totalRecentCouponChargingAmount()==null){
				return 0;
			}else{
				return couponPurchaseJpaRepository.totalRecentCouponChargingAmount();
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public StatisticCoupon calculateCoupon() {
		StatisticCoupon c=new StatisticCoupon();
		try{
			String str="";
			c.setTotalCouponChargingNumber(couponPurchaseJpaRepository.totalCouponChargingNumber());
			c.setTotalRecentCouponChargingNumber(couponPurchaseJpaRepository.totalCouponChargingNumber());
				Integer a=couponPurchaseJpaRepository.totalRecentCouponChargingAmount();
			
				Integer b=couponPurchaseJpaRepository.totalCouponChargingAmount();
				if(a!=null){
					c.setTotalRecentCouponChargingAmount(a);
				}
				if(b!=null){
					c.setTotalCouponChargingAmount(b);
				}
		
		}catch(Exception e){
			System.out.println(e);
		}
		return c;
	}

	@Override
	public List<CouponPurchaseEntity> listByUserId(Integer userid) {
		try {
			return couponPurchaseJpaRepository.listByUserId(userid);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalChargeAmount(Date from, Date to) {
		try {
			Integer result = couponPurchaseJpaRepository.totalChargeAmount(from, to);
			if(result == null ){
				return 0;
			}else{
				return result;
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalCountUserID(Date from, Date to) {
		try {
			Integer result = couponPurchaseJpaRepository.totalCountUserID(from, to);
			if(result == null ){
				return 0;
			}else{
				return result;
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}
	
	@Override
	public Integer totalChargeAmount() {
		try {
			Integer result = couponPurchaseJpaRepository.totalChargeAmount();
			if(result == null ){
				return 0;
			}else{
				return result;
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalCountUserID() {
		try {
			Integer result = couponPurchaseJpaRepository.totalCountUserID();
			if(result == null ){
				return 0;
			}else{
				return result;
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalCount3000(Date from, Date to) {
		try {
			Integer result = couponPurchaseJpaRepository.totalCount3000(from, to);
			if(result == null ){
				return 0;
			}else{
				return result;
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalCount5000(Date from, Date to) {
		try {
			Integer result = couponPurchaseJpaRepository.totalCount5000(from, to);
			if(result == null ){
				return 0;
			}else{
				return result;
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalCount10000(Date from, Date to) {
		try {
			Integer result = couponPurchaseJpaRepository.totalCount10000(from, to);
			if(result == null ){
				return 0;
			}else{
				return result;
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalCount30000(Date from, Date to) {
		try {
			Integer result = couponPurchaseJpaRepository.totalCount30000(from, to);
			if(result == null ){
				return 0;
			}else{
				return result;
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalCount50000(Date from, Date to) {
		try {
			Integer result = couponPurchaseJpaRepository.totalCount50000(from, to);
			if(result == null ){
				return 0;
			}else{
				return result;
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}
	
	@Override
	public Integer totalCount3000() {
		try {
			Integer result = couponPurchaseJpaRepository.totalCount3000();
			if(result == null ){
				return 0;
			}else{
				return result;
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalCount5000() {
		try {
			Integer result = couponPurchaseJpaRepository.totalCount5000();
			if(result == null ){
				return 0;
			}else{
				return result;
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalCount10000() {
		try {
			Integer result = couponPurchaseJpaRepository.totalCount10000();
			if(result == null ){
				return 0;
			}else{
				return result;
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalCount30000() {
		try {
			Integer result = couponPurchaseJpaRepository.totalCount30000();
			if(result == null ){
				return 0;
			}else{
				return result;
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalCount50000() {
		try {
			Integer result = couponPurchaseJpaRepository.totalCount50000();
			if(result == null ){
				return 0;
			}else{
				return result;
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}
	
	
	
	
	
	
	@Override
	public List<CategoryEntity> findByGroupId(Integer groupId) {
		try {
		
			return categoryJpaRepository.findByGroupId(groupId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<CouponPurchaseEntity> listPagingBy_UserId_Refund(Integer userid, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return couponPurchaseJpaRepository.listPagingBy_UserId_Refund(userid, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalAmountPurchase_UserId(Integer userid) {
		try {
			return couponPurchaseJpaRepository.totalAmountPurchase_UserId(userid);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<CouponPurchaseEntity> listPagingSearch_ByTime(String id, String nickname, Date from, Date to,
			Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return couponPurchaseJpaRepository.listPagingSearch_ByTime(id, nickname, from, to, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

}
