/*
 * Created on 15 Dec 2015 ( Time 17:20:39 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.webbook.bean.Book;
import org.trams.webbook.bean.jpa.BookEntity;
import org.trams.webbook.bean.jpa.CategoryEntity;
import org.trams.webbook.bean.jpa.CommentEntity;

import java.util.Date;
import org.trams.webbook.business.service.BookService;
import org.trams.webbook.business.service.mapping.BookServiceMapper;
import org.trams.webbook.data.repository.jpa.BookJpaRepository;
import org.trams.webbook.web.common.ApplicationDefine;
import org.trams.webbook.web.item.StatisticBook;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of BookService
 */
@Component
@Transactional
public class BookServiceImpl implements BookService {

	@Resource
	private BookJpaRepository bookJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private BookServiceMapper bookServiceMapper;
	
	@Override
	public Book findById(Integer id) {
		BookEntity bookEntity = bookJpaRepository.findOne(id);
		return bookServiceMapper.mapBookEntityToBook(bookEntity);
	}
	
	@Override
	public BookEntity findOne(Integer id) {
		BookEntity bookEntity = bookJpaRepository.findOne(id);
		return bookEntity;
	}

	@Override
	public Page<BookEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return bookJpaRepository.findAll(request);
	}

	@Override
	public List<Book> findAll() {
		Iterable<BookEntity> entities = bookJpaRepository.findAll();
		List<Book> beans = new ArrayList<Book>();
		for(BookEntity bookEntity : entities) {
			beans.add(bookServiceMapper.mapBookEntityToBook(bookEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = bookJpaRepository.count();
		return count;
	}

	@Override
	public Book save(Book book) {
		return update(book) ;
	}

	@Override
	public Book create(Book book) {
/*
		BookEntity bookEntity = bookJpaRepository.findOne(book.getId());
		if( bookEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		bookEntity = new BookEntity();
		bookServiceMapper.mapBookToBookEntity(book, bookEntity);
		BookEntity bookEntitySaved = bookJpaRepository.save(bookEntity);
		return bookServiceMapper.mapBookEntityToBook(bookEntitySaved);
*/
		BookEntity bookEntity = new BookEntity();
		bookServiceMapper.mapBookToBookEntity(book, bookEntity);
		BookEntity bookEntitySaved = bookJpaRepository.save(bookEntity);
		return bookServiceMapper.mapBookEntityToBook(bookEntitySaved);
	}

	@Override
	public Book update(Book book) {
		BookEntity bookEntity = bookJpaRepository.findOne(book.getId());
		bookServiceMapper.mapBookToBookEntity(book, bookEntity);
		BookEntity bookEntitySaved = bookJpaRepository.save(bookEntity);
		return bookServiceMapper.mapBookEntityToBook(bookEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		bookJpaRepository.delete(id);
	}

	public BookJpaRepository getBookJpaRepository() {
		return bookJpaRepository;
	}

	public void setBookJpaRepository(BookJpaRepository bookJpaRepository) {
		this.bookJpaRepository = bookJpaRepository;
	}

	public BookServiceMapper getBookServiceMapper() {
		return bookServiceMapper;
	}

	public void setBookServiceMapper(BookServiceMapper bookServiceMapper) {
		this.bookServiceMapper = bookServiceMapper;
	}

	@Override
	public Page<BookEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return bookJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalBook() {
		try {
			return bookJpaRepository.totalBook();
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalNewBook() {
		try {
			return bookJpaRepository.totalNewBook();
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public StatisticBook calculateBook() {
		StatisticBook b=new StatisticBook();
		try {
			List<Book> list=new ArrayList<>();
			list=findAll();
			if(list!=null && list.size()>0){
			b.setTotalBook(list.size());
			}
			b.setTotalNewBook(bookJpaRepository.totalNewBook());
			
		} catch (Exception e) {
			System.out.println(e);
		}
		return b;
	}



	@Override
	public Page<BookEntity> listPagingSearchAll(String genre, String age_group, String league, String adult,String userNickname, String title, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return bookJpaRepository.listPagingSearchAll(genre, age_group, league, adult, userNickname, title, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<BookEntity> listPagingSearchBookComplete(String genre, String age_group, String league, String adult,
			String userNickname, String title, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return bookJpaRepository.listPagingSearchBookComplete(genre, age_group, league, adult, userNickname, title, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}


	@Override
	public Page<BookEntity> listMyBoook(Integer userid, Integer page , Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return bookJpaRepository.listMyBoook(userid, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<BookEntity> searchBoook(Integer page,Integer size,Integer age, Integer leafue, String order) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, order)));
			
			if(age <=0){
				return bookJpaRepository.searchBook(leafue, pageable);
			}else{
				return bookJpaRepository.searchBook(age, leafue, pageable);
			}
			
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<BookEntity> searchByAuthorLevel(String time,Integer authorLevel,Integer page, Integer size, String order) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, order)));
			
				return bookJpaRepository.searchByAuthorLevel(authorLevel,time,pageable);
			
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	

	@Override
	public Page<BookEntity> searchOfficalAuthorAdult(String time,Integer authorLevel, Integer page, Integer size, String order,
			String adult) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, order)));
			
			return bookJpaRepository.searchOfficalAuthorAdult(authorLevel,adult,time,pageable);
			
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<BookEntity> searchOfficalAuthorComplate(String time,Integer authorLevel, Integer page, Integer size, String order,
			Integer complate, String adult) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, order)));
			
			return bookJpaRepository.searchOfficalAuthorComplate(authorLevel,complate,adult,time,pageable);
			
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<CommentEntity> listCommentReport(String typekey, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return bookJpaRepository.listCommentReport(typekey, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<BookEntity> list_15_Book_Weekly_Hit(Integer leagueId,Integer size) {
		try {
			PageRequest pageable = new PageRequest(0, size, new Sort(new Order(Direction.DESC, "(hitsWeekly+interestedWeekly)")));
			List<BookEntity> listBest= bookJpaRepository.list_15_Book_Weekly_Hit(leagueId,pageable).getContent();
			return listBest;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	@Override
	public List<BookEntity> list_Best_League() {
		try {
			PageRequest pageable2 = new PageRequest(0, 15, new Sort(new Order(Direction.DESC, "updateDate")));
			List<BookEntity> listBest= bookJpaRepository.list_Best_League(pageable2).getContent();
			return listBest;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<BookEntity> list_Weekly_By_AgeGroup_League(Integer leagueId, Integer ageGroupId) {
		try {
			PageRequest pageable = new PageRequest(0, 2, new Sort(new Order(Direction.DESC, "updateDate")));
			return bookJpaRepository.list_Weekly_By_AgeGroup_League(leagueId, ageGroupId, pageable).getContent();
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public void update_Weekly_Book() {
		try {
			 bookJpaRepository.update_Weekly_Book();
		} catch (Exception e) {
			System.out.println(e);
	}
	}

	@Override
	public Page<BookEntity> searchBookBy_LeagueName_Title(Integer leagueId, String title, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return bookJpaRepository.searchBookBy_LeagueName_Title(leagueId, title, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<BookEntity> searchBookBy_Title(String title, Integer leagueId, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return bookJpaRepository.searchBookBy_Title(title,leagueId, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<BookEntity> searchOfficalAuthorBy_Time_Author_Gender(String time, String genre, String adult,Integer leagueName,Integer page , Integer size, String order) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, order)));
			return bookJpaRepository.searchOfficalAuthorBy_Time_Author_Gender(time, genre, adult,leagueName, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<BookEntity> searchOfficalAuthorBy_Time_Author_Gender_Complete(String time, String genre, String adult,
			Integer complete,Integer leagueName,Integer page , Integer size, String order) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, order)));
			return bookJpaRepository.searchOfficalAuthorBy_Time_Author_Gender_Complete(time, genre, adult, complete,leagueName, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<BookEntity> searchBy_Time_Author_Gender_Complete(String time, String genre, String adult,
			Integer complete, Integer page, Integer size, String order) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, order)));
			return bookJpaRepository.searchBy_Time_Author_Gender_Complete(time, genre, adult, complete, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<BookEntity> searchBy_Time_Author_Gender(String time, String genre, String adult, String league, Integer page,
			Integer size, String order) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, order)));
			return bookJpaRepository.searchBy_Time_Author_Gender(time, genre, adult,league, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}


	

	

	
}
