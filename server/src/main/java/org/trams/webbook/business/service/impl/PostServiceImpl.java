/*
 * Created on 6 Jan 2016 ( Time 09:41:27 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.webbook.bean.Post;
import org.trams.webbook.bean.jpa.PostEntity;
import java.util.Date;
import org.trams.webbook.business.service.PostService;
import org.trams.webbook.business.service.mapping.PostServiceMapper;
import org.trams.webbook.data.repository.jpa.PostJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of PostService
 */
@Component
@Transactional
public class PostServiceImpl implements PostService {

	@Resource
	private PostJpaRepository postJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private PostServiceMapper postServiceMapper;
	
	@Override
	public Post findById(Integer id) {
		PostEntity postEntity = postJpaRepository.findOne(id);
		return postServiceMapper.mapPostEntityToPost(postEntity);
	}
	
	@Override
	public PostEntity findOne(Integer id) {
		PostEntity postEntity = postJpaRepository.findOne(id);
		return postEntity;
	}
	@Override
	public Page<PostEntity> findAll(Integer pageNumber) {
		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return postJpaRepository.findAll(request);
	}

	@Override
	public List<Post> findAll() {
		Iterable<PostEntity> entities = postJpaRepository.findAll();
		List<Post> beans = new ArrayList<Post>();
		for(PostEntity postEntity : entities) {
			beans.add(postServiceMapper.mapPostEntityToPost(postEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = postJpaRepository.count();
		return count;
	}

	@Override
	public Post save(Post post) {
		return update(post) ;
	}

	@Override
	public Post create(Post post) {
/*
		PostEntity postEntity = postJpaRepository.findOne(post.getId());
		if( postEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		postEntity = new PostEntity();
		postServiceMapper.mapPostToPostEntity(post, postEntity);
		PostEntity postEntitySaved = postJpaRepository.save(postEntity);
		return postServiceMapper.mapPostEntityToPost(postEntitySaved);
*/
		PostEntity postEntity = new PostEntity();
		postServiceMapper.mapPostToPostEntity(post, postEntity);
		PostEntity postEntitySaved = postJpaRepository.save(postEntity);
		return postServiceMapper.mapPostEntityToPost(postEntitySaved);
	}

	@Override
	public Post update(Post post) {
		PostEntity postEntity = postJpaRepository.findOne(post.getId());
		postServiceMapper.mapPostToPostEntity(post, postEntity);
		PostEntity postEntitySaved = postJpaRepository.save(postEntity);
		return postServiceMapper.mapPostEntityToPost(postEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		postJpaRepository.delete(id);
	}

	public PostJpaRepository getPostJpaRepository() {
		return postJpaRepository;
	}

	public void setPostJpaRepository(PostJpaRepository postJpaRepository) {
		this.postJpaRepository = postJpaRepository;
	}

	public PostServiceMapper getPostServiceMapper() {
		return postServiceMapper;
	}

	public void setPostServiceMapper(PostServiceMapper postServiceMapper) {
		this.postServiceMapper = postServiceMapper;
	}

	@Override
	public Page<PostEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return postJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<PostEntity> listPagingSearch(String bulletinName, String nickname, String title, 
			Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return postJpaRepository.listPagingSearch(bulletinName, nickname, title, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<PostEntity> findByBulletin(Integer bulletin, Integer page, Integer size, String sort) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, sort)));
			return postJpaRepository.findByBulletin(bulletin,pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}		
	}

	@Override
	public PostEntity getById(Integer id) {
		try {
			return postJpaRepository.getById(id);
		} catch (Exception e) {
		}	
		return null;
	}

	@Override
	public Page<PostEntity> Top10ViewFreeboard(Integer bulletin, Date from, Date to) {
		try {
			PageRequest pageable = new PageRequest(0, 10, new Sort(new Order(Direction.DESC, "viewsNumber")));
			return postJpaRepository.Top10ViewFreeboard(bulletin, from, to, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}	
	}

	

}
