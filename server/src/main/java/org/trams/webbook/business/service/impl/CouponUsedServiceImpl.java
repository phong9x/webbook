/*
 * Created on 7 Jan 2016 ( Time 14:53:24 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.impl;

import java.awt.print.Pageable;
import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;
import java.util.Date;

import org.trams.webbook.bean.CouponPurchase;
import org.trams.webbook.bean.CouponUsed;
import org.trams.webbook.bean.jpa.BookEntity;
import org.trams.webbook.bean.jpa.CouponPurchaseEntity;
import org.trams.webbook.bean.jpa.CouponUsedEntity;
import org.trams.webbook.bean.jpa.EpisodeEntity;
import org.trams.webbook.business.service.CouponUsedService;
import org.trams.webbook.business.service.mapping.CouponUsedServiceMapper;
import org.trams.webbook.data.repository.jpa.CouponUsedJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of CouponUsedService
 */
@Component
@Transactional
public class CouponUsedServiceImpl implements CouponUsedService {

	@Resource
	private CouponUsedJpaRepository couponUsedJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private CouponUsedServiceMapper couponUsedServiceMapper;
	
	@Override
	public CouponUsed findById(Integer id) {
		CouponUsedEntity couponUsedEntity = couponUsedJpaRepository.findOne(id);
		return couponUsedServiceMapper.mapCouponUsedEntityToCouponUsed(couponUsedEntity);
	}

	@Override
	public CouponUsedEntity findOne(Integer id){
		CouponUsedEntity couponUsedEntity = couponUsedJpaRepository.findOne(id);
		return couponUsedEntity;
	}
	
	@Override
	public Page<CouponUsedEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return couponUsedJpaRepository.findAll(request);
	}

	@Override
	public List<CouponUsed> findAll() {
		Iterable<CouponUsedEntity> entities = couponUsedJpaRepository.findAll();
		List<CouponUsed> beans = new ArrayList<CouponUsed>();
		for(CouponUsedEntity couponUsedEntity : entities) {
			beans.add(couponUsedServiceMapper.mapCouponUsedEntityToCouponUsed(couponUsedEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = couponUsedJpaRepository.count();
		return count;
	}

	@Override
	public CouponUsed save(CouponUsed couponUsed) {
		return update(couponUsed) ;
	}

	@Override
	public CouponUsed create(CouponUsed couponUsed) {
/*
		CouponUsedEntity couponUsedEntity = couponUsedJpaRepository.findOne(couponUsed.getId());
		if( couponUsedEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		couponUsedEntity = new CouponUsedEntity();
		couponUsedServiceMapper.mapCouponUsedToCouponUsedEntity(couponUsed, couponUsedEntity);
		CouponUsedEntity couponUsedEntitySaved = couponUsedJpaRepository.save(couponUsedEntity);
		return couponUsedServiceMapper.mapCouponUsedEntityToCouponUsed(couponUsedEntitySaved);
*/
		CouponUsedEntity couponUsedEntity = new CouponUsedEntity();
		couponUsedServiceMapper.mapCouponUsedToCouponUsedEntity(couponUsed, couponUsedEntity);
		CouponUsedEntity couponUsedEntitySaved = couponUsedJpaRepository.save(couponUsedEntity);
		return couponUsedServiceMapper.mapCouponUsedEntityToCouponUsed(couponUsedEntitySaved);
	}

	@Override
	public CouponUsed update(CouponUsed couponUsed) {
		CouponUsedEntity couponUsedEntity = couponUsedJpaRepository.findOne(couponUsed.getId());
		couponUsedServiceMapper.mapCouponUsedToCouponUsedEntity(couponUsed, couponUsedEntity);
		CouponUsedEntity couponUsedEntitySaved = couponUsedJpaRepository.save(couponUsedEntity);
		return couponUsedServiceMapper.mapCouponUsedEntityToCouponUsed(couponUsedEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		couponUsedJpaRepository.delete(id);
	}

	public CouponUsedJpaRepository getCouponUsedJpaRepository() {
		return couponUsedJpaRepository;
	}

	public void setCouponUsedJpaRepository(CouponUsedJpaRepository couponUsedJpaRepository) {
		this.couponUsedJpaRepository = couponUsedJpaRepository;
	}

	public CouponUsedServiceMapper getCouponUsedServiceMapper() {
		return couponUsedServiceMapper;
	}

	public void setCouponUsedServiceMapper(CouponUsedServiceMapper couponUsedServiceMapper) {
		this.couponUsedServiceMapper = couponUsedServiceMapper;
	}

	@Override
	public Page<CouponUsedEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return couponUsedJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println("Error in listPaging"+e);
			return null;
		}
	}

	@Override
	public CouponUsedEntity findBy_UserId_EpisodeId(Integer userId, Integer episodeId) {
		try {
			return couponUsedJpaRepository.findBy_UserId_EpisodeId(userId, episodeId).get(0);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<CouponUsedEntity> listPagingSearch(String id, String name, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return couponUsedJpaRepository.listPagingSearch(id, name, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	

	
	@Override
	public Page<CouponUsedEntity> listPagingSearchSales(String id, String name, String bookname, String episodename, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return couponUsedJpaRepository.listPagingSearchSales(id, name, bookname, episodename, pageable);
		} catch (Exception e) {
			System.out.println("Error in listPagingSearchSales"+e);
			return null;
		}
	}

	@Override
	public List<CouponUsedEntity> listBy_UserId(Integer userId) {
		try {
			return couponUsedJpaRepository.listBy_UserId(userId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalCouponChargingAmount(Date from, Date to) {
		try {
			Integer result = couponUsedJpaRepository.totalCouponChargingAmount(from, to);
			if(result == null ){
				return 0;
			}else{
				return result;
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalCouponUser(Date from, Date to) {
		try {
			Integer result = couponUsedJpaRepository.totalCouponUser(from, to);
			if(result == null ){
				return 0;
			}else{
				return result;
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalPriceCoupon(Integer year, Integer month) {
		try {
			Integer result = couponUsedJpaRepository.totalPriceCoupon(year, month);
			if(result == null ){
				return 0;
			}else{
				return result;
			}
		} catch (Exception e) {
			System.out.println("Error in totalPriceCoupon"+e);
			System.out.println("Error in totalPriceCoupon year:"+year+" month:"+month);
			return 0;
		}
	}

	@Override
	public Page<CouponUsedEntity> listPagingBy_AuthorId_Month_Year(Integer userid, Integer month, Integer year,Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return couponUsedJpaRepository.listPagingBy_AuthorId_Month_Year(userid, month, year, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalChargeAmountBy_UserId(Integer userid) {
		try {
			Integer ok = couponUsedJpaRepository.totalChargeAmountBy_UserId(userid);
			if(ok==null){
				return 0;
			}else{
				return ok;
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public List<CouponUsedEntity> findBy_UserId_BookId(Integer userId, Integer bookId) {
		try {
			return couponUsedJpaRepository.findBy_UserId_BookId(userId,bookId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public List<CouponUsedEntity> listBy_AuthorId_Month_Year(Integer userid, Integer month, Integer year, Integer page, Integer size) {
		int begin=0;
		 int end=size;
		if(page>0){
			page =page-1;
			begin=page*size;
			end=page*size+size;
		}
		try {
			List<Object[]> result= couponUsedJpaRepository.listBy_AuthorId_Month_Year(userid, month, year, begin, end);
			List<CouponUsedEntity> list = new ArrayList<>();
			if(result!=null){
				for (Object[] object : result) {
					CouponUsedEntity c =new CouponUsedEntity();
					EpisodeEntity e =new EpisodeEntity();
					BookEntity b =new BookEntity();
					e.setId(Integer.valueOf((Integer)object[0]));
					b.setTitle((String)object[1]);
					e.setTitle((String)object[2]);
					e.setPrice((Integer)object[3]);
					e.setSalesNumber(Integer.parseInt(object[4].toString()));
					e.setRatio((Integer)object[3]);
					c.setBook(b);
					c.setEpisode(e);
					list.add(c);
				}
			}
			return list;
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalPageBy_AuthorId_Month_Year(Integer userid, Integer month, Integer year) {
		try {
			return couponUsedJpaRepository.totalPageBy_AuthorId_Month_Year(userid, month, year);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	

}
