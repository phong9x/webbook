/*
 * Created on 21 Jan 2016 ( Time 11:04:32 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.webbook.bean.Visitor;
import org.trams.webbook.bean.jpa.VisitorEntity;
import org.trams.webbook.business.service.VisitorService;
import org.trams.webbook.business.service.mapping.VisitorServiceMapper;
import org.trams.webbook.data.repository.jpa.VisitorJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of VisitorService
 */
@Component
@Transactional
public class VisitorServiceImpl implements VisitorService {

	@Resource
	private VisitorJpaRepository visitorJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private VisitorServiceMapper visitorServiceMapper;
	
	@Override
	public Visitor findById(Integer id) {
		VisitorEntity visitorEntity = visitorJpaRepository.findOne(id);
		return visitorServiceMapper.mapVisitorEntityToVisitor(visitorEntity);
	}

	@Override
	public Page<VisitorEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return visitorJpaRepository.findAll(request);
	}

	@Override
	public List<Visitor> findAll() {
		Iterable<VisitorEntity> entities = visitorJpaRepository.findAll();
		List<Visitor> beans = new ArrayList<Visitor>();
		for(VisitorEntity visitorEntity : entities) {
			beans.add(visitorServiceMapper.mapVisitorEntityToVisitor(visitorEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = visitorJpaRepository.count();
		return count;
	}

	@Override
	public Visitor save(Visitor visitor) {
		return update(visitor) ;
	}

	@Override
	public Visitor create(Visitor visitor) {
/*
		VisitorEntity visitorEntity = visitorJpaRepository.findOne(visitor.getId());
		if( visitorEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		visitorEntity = new VisitorEntity();
		visitorServiceMapper.mapVisitorToVisitorEntity(visitor, visitorEntity);
		VisitorEntity visitorEntitySaved = visitorJpaRepository.save(visitorEntity);
		return visitorServiceMapper.mapVisitorEntityToVisitor(visitorEntitySaved);
*/
		VisitorEntity visitorEntity = new VisitorEntity();
		visitorServiceMapper.mapVisitorToVisitorEntity(visitor, visitorEntity);
		VisitorEntity visitorEntitySaved = visitorJpaRepository.save(visitorEntity);
		return visitorServiceMapper.mapVisitorEntityToVisitor(visitorEntitySaved);
	}

	@Override
	public Visitor update(Visitor visitor) {
		VisitorEntity visitorEntity = visitorJpaRepository.findOne(visitor.getId());
		visitorServiceMapper.mapVisitorToVisitorEntity(visitor, visitorEntity);
		VisitorEntity visitorEntitySaved = visitorJpaRepository.save(visitorEntity);
		return visitorServiceMapper.mapVisitorEntityToVisitor(visitorEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		visitorJpaRepository.delete(id);
	}

	public VisitorJpaRepository getVisitorJpaRepository() {
		return visitorJpaRepository;
	}

	public void setVisitorJpaRepository(VisitorJpaRepository visitorJpaRepository) {
		this.visitorJpaRepository = visitorJpaRepository;
	}

	public VisitorServiceMapper getVisitorServiceMapper() {
		return visitorServiceMapper;
	}

	public void setVisitorServiceMapper(VisitorServiceMapper visitorServiceMapper) {
		this.visitorServiceMapper = visitorServiceMapper;
	}

	@Override
	public Page<VisitorEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "id")));
			return visitorJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

}
