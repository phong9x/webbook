/*
 * Created on 16 Jan 2016 ( Time 10:42:16 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.webbook.bean.BookViewing;
import org.trams.webbook.bean.jpa.BookViewingEntity;
import org.trams.webbook.bean.jpa.BookEntity;
import org.trams.webbook.bean.jpa.UserEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class BookViewingServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public BookViewingServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'BookViewingEntity' to 'BookViewing'
	 * @param bookViewingEntity
	 */
	public BookViewing mapBookViewingEntityToBookViewing(BookViewingEntity bookViewingEntity) {
		if(bookViewingEntity == null) {
			return null;
		}

		//--- Generic mapping 
		BookViewing bookViewing = map(bookViewingEntity, BookViewing.class);

		//--- Link mapping ( link to Book )
		if(bookViewingEntity.getBook() != null) {
			bookViewing.setBookId(bookViewingEntity.getBook().getId());
		}
		//--- Link mapping ( link to User )
		if(bookViewingEntity.getUser() != null) {
			bookViewing.setUserId(bookViewingEntity.getUser().getId());
		}
		return bookViewing;
	}
	
	/**
	 * Mapping from 'BookViewing' to 'BookViewingEntity'
	 * @param bookViewing
	 * @param bookViewingEntity
	 */
	public void mapBookViewingToBookViewingEntity(BookViewing bookViewing, BookViewingEntity bookViewingEntity) {
		if(bookViewing == null) {
			return;
		}

		//--- Generic mapping 
		map(bookViewing, bookViewingEntity);

		//--- Link mapping ( link : bookViewing )
		if( hasLinkToBook(bookViewing) ) {
			BookEntity book1 = new BookEntity();
			book1.setId( bookViewing.getBookId() );
			bookViewingEntity.setBook( book1 );
		} else {
			bookViewingEntity.setBook( null );
		}

		//--- Link mapping ( link : bookViewing )
		if( hasLinkToUser(bookViewing) ) {
			UserEntity user2 = new UserEntity();
			user2.setId( bookViewing.getUserId() );
			bookViewingEntity.setUser( user2 );
		} else {
			bookViewingEntity.setUser( null );
		}

	}
	
	/**
	 * Verify that Book id is valid.
	 * @param Book Book
	 * @return boolean
	 */
	private boolean hasLinkToBook(BookViewing bookViewing) {
		if(bookViewing.getBookId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(BookViewing bookViewing) {
		if(bookViewing.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}