/*
 * Created on 1 Feb 2016 ( Time 16:29:10 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.webbook.bean.InterestedBook;
import org.trams.webbook.bean.jpa.InterestedBookEntity;
import org.trams.webbook.bean.jpa.UserEntity;
import org.trams.webbook.bean.jpa.BookEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class InterestedBookServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public InterestedBookServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'InterestedBookEntity' to 'InterestedBook'
	 * @param interestedBookEntity
	 */
	public InterestedBook mapInterestedBookEntityToInterestedBook(InterestedBookEntity interestedBookEntity) {
		if(interestedBookEntity == null) {
			return null;
		}

		//--- Generic mapping 
		InterestedBook interestedBook = map(interestedBookEntity, InterestedBook.class);

		//--- Link mapping ( link to User )
		if(interestedBookEntity.getUser() != null) {
			interestedBook.setUserId(interestedBookEntity.getUser().getId());
		}
		//--- Link mapping ( link to Book )
		if(interestedBookEntity.getBook() != null) {
			interestedBook.setBookId(interestedBookEntity.getBook().getId());
		}
		return interestedBook;
	}
	
	/**
	 * Mapping from 'InterestedBook' to 'InterestedBookEntity'
	 * @param interestedBook
	 * @param interestedBookEntity
	 */
	public void mapInterestedBookToInterestedBookEntity(InterestedBook interestedBook, InterestedBookEntity interestedBookEntity) {
		if(interestedBook == null) {
			return;
		}

		//--- Generic mapping 
		map(interestedBook, interestedBookEntity);

		//--- Link mapping ( link : interestedBook )
		if( hasLinkToUser(interestedBook) ) {
			UserEntity user1 = new UserEntity();
			user1.setId( interestedBook.getUserId() );
			interestedBookEntity.setUser( user1 );
		} else {
			interestedBookEntity.setUser( null );
		}

		//--- Link mapping ( link : interestedBook )
		if( hasLinkToBook(interestedBook) ) {
			BookEntity book2 = new BookEntity();
			book2.setId( interestedBook.getBookId() );
			interestedBookEntity.setBook( book2 );
		} else {
			interestedBookEntity.setBook( null );
		}

	}
	
	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(InterestedBook interestedBook) {
		if(interestedBook.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Book id is valid.
	 * @param Book Book
	 * @return boolean
	 */
	private boolean hasLinkToBook(InterestedBook interestedBook) {
		if(interestedBook.getBookId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}