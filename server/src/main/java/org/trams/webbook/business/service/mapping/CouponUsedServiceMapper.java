/*
 * Created on 11 Jan 2016 ( Time 16:14:58 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.mapping;

import org.modelmapper.ModelMapper;
import org.modelmapper.convention.MatchingStrategies;
import org.springframework.stereotype.Component;
import org.trams.webbook.bean.CouponUsed;
import org.trams.webbook.bean.jpa.CouponUsedEntity;
import org.trams.webbook.bean.jpa.UserEntity;
import org.trams.webbook.bean.jpa.EpisodeEntity;
import org.trams.webbook.bean.jpa.BookEntity;

/**
 * Mapping between entity beans and display beans.
 */
@Component
public class CouponUsedServiceMapper extends AbstractServiceMapper {

	/**
	 * ModelMapper : bean to bean mapping library.
	 */
	private ModelMapper modelMapper;
	
	/**
	 * Constructor.
	 */
	public CouponUsedServiceMapper() {
		modelMapper = new ModelMapper();
		modelMapper.getConfiguration().setMatchingStrategy(MatchingStrategies.STRICT);
	}

	/**
	 * Mapping from 'CouponUsedEntity' to 'CouponUsed'
	 * @param couponUsedEntity
	 */
	public CouponUsed mapCouponUsedEntityToCouponUsed(CouponUsedEntity couponUsedEntity) {
		if(couponUsedEntity == null) {
			return null;
		}

		//--- Generic mapping 
		CouponUsed couponUsed = map(couponUsedEntity, CouponUsed.class);

		//--- Link mapping ( link to User )
		if(couponUsedEntity.getUser() != null) {
			couponUsed.setUserId(couponUsedEntity.getUser().getId());
		}
		//--- Link mapping ( link to Episode )
		if(couponUsedEntity.getEpisode() != null) {
			couponUsed.setEpisodeId(couponUsedEntity.getEpisode().getId());
		}
		//--- Link mapping ( link to Book )
		if(couponUsedEntity.getBook() != null) {
			couponUsed.setBookId(couponUsedEntity.getBook().getId());
		}
		return couponUsed;
	}
	
	/**
	 * Mapping from 'CouponUsed' to 'CouponUsedEntity'
	 * @param couponUsed
	 * @param couponUsedEntity
	 */
	public void mapCouponUsedToCouponUsedEntity(CouponUsed couponUsed, CouponUsedEntity couponUsedEntity) {
		if(couponUsed == null) {
			return;
		}

		//--- Generic mapping 
		map(couponUsed, couponUsedEntity);

		//--- Link mapping ( link : couponUsed )
		if( hasLinkToUser(couponUsed) ) {
			UserEntity user1 = new UserEntity();
			user1.setId( couponUsed.getUserId() );
			couponUsedEntity.setUser( user1 );
		} else {
			couponUsedEntity.setUser( null );
		}

		//--- Link mapping ( link : couponUsed )
		if( hasLinkToEpisode(couponUsed) ) {
			EpisodeEntity episode2 = new EpisodeEntity();
			episode2.setId( couponUsed.getEpisodeId() );
			couponUsedEntity.setEpisode( episode2 );
		} else {
			couponUsedEntity.setEpisode( null );
		}

		//--- Link mapping ( link : couponUsed )
		if( hasLinkToBook(couponUsed) ) {
			BookEntity book3 = new BookEntity();
			book3.setId( couponUsed.getBookId() );
			couponUsedEntity.setBook( book3 );
		} else {
			couponUsedEntity.setBook( null );
		}

	}
	
	/**
	 * Verify that User id is valid.
	 * @param User User
	 * @return boolean
	 */
	private boolean hasLinkToUser(CouponUsed couponUsed) {
		if(couponUsed.getUserId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Episode id is valid.
	 * @param Episode Episode
	 * @return boolean
	 */
	private boolean hasLinkToEpisode(CouponUsed couponUsed) {
		if(couponUsed.getEpisodeId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * Verify that Book id is valid.
	 * @param Book Book
	 * @return boolean
	 */
	private boolean hasLinkToBook(CouponUsed couponUsed) {
		if(couponUsed.getBookId() != null) {
			return true;
		}
		return false;
	}

	/**
	 * {@inheritDoc}
	 */
	@Override
	protected ModelMapper getModelMapper() {
		return modelMapper;
	}

	protected void setModelMapper(ModelMapper modelMapper) {
		this.modelMapper = modelMapper;
	}

}