/*
 * Created on 15 Dec 2015 ( Time 17:20:40 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.webbook.bean.ProfitRefund;
import org.trams.webbook.bean.jpa.CategoryEntity;
import org.trams.webbook.bean.jpa.CouponUsedEntity;
import org.trams.webbook.bean.jpa.ProfitRefundEntity;
import java.util.Date;
import org.trams.webbook.business.service.ProfitRefundService;
import org.trams.webbook.business.service.mapping.ProfitRefundServiceMapper;
import org.trams.webbook.data.repository.jpa.CategoryJpaRepository;
import org.trams.webbook.data.repository.jpa.ProfitRefundJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of ProfitRefundService
 */
@Component
@Transactional
public class ProfitRefundServiceImpl implements ProfitRefundService {

	@Resource
	private ProfitRefundJpaRepository profitRefundJpaRepository;
	
	@Resource
	private CategoryJpaRepository categoryJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private ProfitRefundServiceMapper profitRefundServiceMapper;
	
	@Override
	public ProfitRefund findById(Integer id) {
		ProfitRefundEntity profitRefundEntity = profitRefundJpaRepository.findOne(id);
		return profitRefundServiceMapper.mapProfitRefundEntityToProfitRefund(profitRefundEntity);
	}

	@Override
	public ProfitRefundEntity findOne(Integer id){
		ProfitRefundEntity couponUsedEntity = profitRefundJpaRepository.findOne(id);
		return couponUsedEntity;
	}
	
	@Override
	public List<CategoryEntity> findByGroupId(Integer groupId) {
		try {
		
			return categoryJpaRepository.findByGroupId(groupId);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	@Override
	public Page<ProfitRefundEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return profitRefundJpaRepository.findAll(request);
	}

	@Override
	public List<ProfitRefund> findAll() {
		Iterable<ProfitRefundEntity> entities = profitRefundJpaRepository.findAll();
		List<ProfitRefund> beans = new ArrayList<ProfitRefund>();
		for(ProfitRefundEntity profitRefundEntity : entities) {
			beans.add(profitRefundServiceMapper.mapProfitRefundEntityToProfitRefund(profitRefundEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = profitRefundJpaRepository.count();
		return count;
	}

	@Override
	public ProfitRefund save(ProfitRefund profitRefund) {
		return update(profitRefund) ;
	}

	@Override
	public ProfitRefund create(ProfitRefund profitRefund) {
/*
		ProfitRefundEntity profitRefundEntity = profitRefundJpaRepository.findOne(profitRefund.getId());
		if( profitRefundEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		profitRefundEntity = new ProfitRefundEntity();
		profitRefundServiceMapper.mapProfitRefundToProfitRefundEntity(profitRefund, profitRefundEntity);
		ProfitRefundEntity profitRefundEntitySaved = profitRefundJpaRepository.save(profitRefundEntity);
		return profitRefundServiceMapper.mapProfitRefundEntityToProfitRefund(profitRefundEntitySaved);
*/
		ProfitRefundEntity profitRefundEntity = new ProfitRefundEntity();
		profitRefundServiceMapper.mapProfitRefundToProfitRefundEntity(profitRefund, profitRefundEntity);
		ProfitRefundEntity profitRefundEntitySaved = profitRefundJpaRepository.save(profitRefundEntity);
		return profitRefundServiceMapper.mapProfitRefundEntityToProfitRefund(profitRefundEntitySaved);
	}

	@Override
	public ProfitRefund update(ProfitRefund profitRefund) {
		ProfitRefundEntity profitRefundEntity = profitRefundJpaRepository.findOne(profitRefund.getId());
		profitRefundServiceMapper.mapProfitRefundToProfitRefundEntity(profitRefund, profitRefundEntity);
		ProfitRefundEntity profitRefundEntitySaved = profitRefundJpaRepository.save(profitRefundEntity);
		return profitRefundServiceMapper.mapProfitRefundEntityToProfitRefund(profitRefundEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		profitRefundJpaRepository.delete(id);
	}

	public ProfitRefundJpaRepository getProfitRefundJpaRepository() {
		return profitRefundJpaRepository;
	}

	public void setProfitRefundJpaRepository(ProfitRefundJpaRepository profitRefundJpaRepository) {
		this.profitRefundJpaRepository = profitRefundJpaRepository;
	}

	public ProfitRefundServiceMapper getProfitRefundServiceMapper() {
		return profitRefundServiceMapper;
	}

	public void setProfitRefundServiceMapper(ProfitRefundServiceMapper profitRefundServiceMapper) {
		this.profitRefundServiceMapper = profitRefundServiceMapper;
	}

	@Override
	public Page<ProfitRefundEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return profitRefundJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<ProfitRefundEntity> listPagingBy_UserId(Integer userid, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return profitRefundJpaRepository.listPagingBy_UserId(userid, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalRefundBy_UserId(Integer userid) {
		try {
			Integer ok = profitRefundJpaRepository.totalRefundBy_UserId(userid);
			if(ok==null){
				return 0;
			}else{
				return ok;
			}
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Page<ProfitRefundEntity> listPagingProfitRefund(String id, String name, Integer year, Integer month, Integer page,
			Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return profitRefundJpaRepository.listPagingProfitRefund(id, name, year, month, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

}
