/*
 * Created on 2 Mar 2016 ( Time 13:16:26 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.webbook.bean.ContactUs;
import org.trams.webbook.bean.jpa.ContactUsEntity;
import java.util.Date;
import org.trams.webbook.business.service.ContactUsService;
import org.trams.webbook.business.service.mapping.ContactUsServiceMapper;
import org.trams.webbook.data.repository.jpa.ContactUsJpaRepository;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of ContactUsService
 */
@Component
@Transactional
public class ContactUsServiceImpl implements ContactUsService {

	@Resource
	private ContactUsJpaRepository contactUsJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private ContactUsServiceMapper contactUsServiceMapper;
	
	@Override
	public ContactUs findById(Integer id) {
		ContactUsEntity contactUsEntity = contactUsJpaRepository.findOne(id);
		return contactUsServiceMapper.mapContactUsEntityToContactUs(contactUsEntity);
	}
	
	@Override
	public ContactUsEntity findOne(Integer id) {
		return contactUsJpaRepository.findOne(id);
	}

	@Override
	public Page<ContactUsEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return contactUsJpaRepository.findAll(request);
	}

	@Override
	public List<ContactUs> findAll() {
		Iterable<ContactUsEntity> entities = contactUsJpaRepository.findAll();
		List<ContactUs> beans = new ArrayList<ContactUs>();
		for(ContactUsEntity contactUsEntity : entities) {
			beans.add(contactUsServiceMapper.mapContactUsEntityToContactUs(contactUsEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = contactUsJpaRepository.count();
		return count;
	}

	@Override
	public ContactUs save(ContactUs contactUs) {
		return update(contactUs) ;
	}

	@Override
	public ContactUs create(ContactUs contactUs) {
/*
		ContactUsEntity contactUsEntity = contactUsJpaRepository.findOne(contactUs.getId());
		if( contactUsEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		contactUsEntity = new ContactUsEntity();
		contactUsServiceMapper.mapContactUsToContactUsEntity(contactUs, contactUsEntity);
		ContactUsEntity contactUsEntitySaved = contactUsJpaRepository.save(contactUsEntity);
		return contactUsServiceMapper.mapContactUsEntityToContactUs(contactUsEntitySaved);
*/
		ContactUsEntity contactUsEntity = new ContactUsEntity();
		contactUsServiceMapper.mapContactUsToContactUsEntity(contactUs, contactUsEntity);
		ContactUsEntity contactUsEntitySaved = contactUsJpaRepository.save(contactUsEntity);
		return contactUsServiceMapper.mapContactUsEntityToContactUs(contactUsEntitySaved);
	}

	@Override
	public ContactUs update(ContactUs contactUs) {
		ContactUsEntity contactUsEntity = contactUsJpaRepository.findOne(contactUs.getId());
		contactUsServiceMapper.mapContactUsToContactUsEntity(contactUs, contactUsEntity);
		ContactUsEntity contactUsEntitySaved = contactUsJpaRepository.save(contactUsEntity);
		return contactUsServiceMapper.mapContactUsEntityToContactUs(contactUsEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		contactUsJpaRepository.delete(id);
	}

	public ContactUsJpaRepository getContactUsJpaRepository() {
		return contactUsJpaRepository;
	}

	public void setContactUsJpaRepository(ContactUsJpaRepository contactUsJpaRepository) {
		this.contactUsJpaRepository = contactUsJpaRepository;
	}

	public ContactUsServiceMapper getContactUsServiceMapper() {
		return contactUsServiceMapper;
	}

	public void setContactUsServiceMapper(ContactUsServiceMapper contactUsServiceMapper) {
		this.contactUsServiceMapper = contactUsServiceMapper;
	}

	@Override
	public Page<ContactUsEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return contactUsJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

}
