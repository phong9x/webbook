/*
 * Created on 15 Dec 2015 ( Time 17:20:39 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.business.service.impl;

import java.util.ArrayList;
import java.util.List;

import javax.annotation.Resource;

import org.trams.webbook.bean.Episode;
import org.trams.webbook.bean.jpa.EpisodeEntity;
import java.util.Date;
import org.trams.webbook.business.service.EpisodeService;
import org.trams.webbook.business.service.mapping.EpisodeServiceMapper;
import org.trams.webbook.data.repository.jpa.EpisodeJpaRepository;
import org.trams.webbook.web.common.Utils;
import org.trams.webbook.web.item.StatisticEpisode;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.domain.Sort.Direction;
import org.springframework.data.domain.Sort.Order;
import org.springframework.stereotype.Component;
import org.springframework.transaction.annotation.Transactional;

/**
 * Implementation of EpisodeService
 */
@Component
@Transactional
public class EpisodeServiceImpl implements EpisodeService {

	@Resource
	private EpisodeJpaRepository episodeJpaRepository;

	private static final Integer PAGE_SIZE   = 15;

	@Resource
	private EpisodeServiceMapper episodeServiceMapper;
	
	@Override
	public Episode findById(Integer id) {
		EpisodeEntity episodeEntity = episodeJpaRepository.findOne(id);
		return episodeServiceMapper.mapEpisodeEntityToEpisode(episodeEntity);
	}
	@Override
	public EpisodeEntity findOne(Integer id) {
		EpisodeEntity episodeEntity = episodeJpaRepository.findOne(id);
		return episodeEntity;
	}

	@Override
	public Page<EpisodeEntity> findAll(Integer pageNumber) {

		PageRequest request = new PageRequest(pageNumber - 1, PAGE_SIZE,
				new Sort(new Order(Direction.DESC, "id")));
		return episodeJpaRepository.findAll(request);
	}

	@Override
	public List<Episode> findAll() {
		Iterable<EpisodeEntity> entities = episodeJpaRepository.findAll();
		List<Episode> beans = new ArrayList<Episode>();
		for(EpisodeEntity episodeEntity : entities) {
			beans.add(episodeServiceMapper.mapEpisodeEntityToEpisode(episodeEntity));
		}
		return beans;
	}

	/**
	 * Count total entit
	 * @return Long
	 */
	public Long countTotal(){
		Long count = episodeJpaRepository.count();
		return count;
	}

	@Override
	public Episode save(Episode episode) {
		return update(episode) ;
	}

	@Override
	public Episode create(Episode episode) {
/*
		EpisodeEntity episodeEntity = episodeJpaRepository.findOne(episode.getId());
		if( episodeEntity != null ) {
			throw new IllegalStateException("already.exists");
		}

		episodeEntity = new EpisodeEntity();
		episodeServiceMapper.mapEpisodeToEpisodeEntity(episode, episodeEntity);
		EpisodeEntity episodeEntitySaved = episodeJpaRepository.save(episodeEntity);
		return episodeServiceMapper.mapEpisodeEntityToEpisode(episodeEntitySaved);
*/
		EpisodeEntity episodeEntity = new EpisodeEntity();
		episodeServiceMapper.mapEpisodeToEpisodeEntity(episode, episodeEntity);
		EpisodeEntity episodeEntitySaved = episodeJpaRepository.save(episodeEntity);
		return episodeServiceMapper.mapEpisodeEntityToEpisode(episodeEntitySaved);
	}

	@Override
	public Episode update(Episode episode) {
		EpisodeEntity episodeEntity = episodeJpaRepository.findOne(episode.getId());
		episodeServiceMapper.mapEpisodeToEpisodeEntity(episode, episodeEntity);
		EpisodeEntity episodeEntitySaved = episodeJpaRepository.save(episodeEntity);
		return episodeServiceMapper.mapEpisodeEntityToEpisode(episodeEntitySaved);
	}

	@Override
	public void delete(Integer id) {
		episodeJpaRepository.delete(id);
	}

	public EpisodeJpaRepository getEpisodeJpaRepository() {
		return episodeJpaRepository;
	}

	public void setEpisodeJpaRepository(EpisodeJpaRepository episodeJpaRepository) {
		this.episodeJpaRepository = episodeJpaRepository;
	}

	public EpisodeServiceMapper getEpisodeServiceMapper() {
		return episodeServiceMapper;
	}

	public void setEpisodeServiceMapper(EpisodeServiceMapper episodeServiceMapper) {
		this.episodeServiceMapper = episodeServiceMapper;
	}

	@Override
	public Page<EpisodeEntity> listPaging(Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return episodeJpaRepository.listPaging(pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Integer totalEpisode() {
		try {
			return episodeJpaRepository.totalEpisode();
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalNewEpisode() {
		try {
			return episodeJpaRepository.totalNewEpisode();
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalSumHitNumber() {
		try {
			if(episodeJpaRepository.totalSumHitNumber()==null){
				return 0;
			}else{
				return episodeJpaRepository.totalSumHitNumber();
			}
			
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalEpisodeCharge() {
		try {
			return episodeJpaRepository.totalEpisodeCharge();
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalEpisodePurchase() {
		try {
			return episodeJpaRepository.totalEpisodePurchase();
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public Integer totalNewEpisodePurchase() {
		try {
			return episodeJpaRepository.totalNewEpisodePurchase();
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}

	@Override
	public StatisticEpisode caculateEpisode() {
		StatisticEpisode e=new StatisticEpisode();
		
		try {
			List<Episode> list=findAll();
			if(list.size()>0){
				e.setTotalEpisode(list.size());
			}
			Date now=new Date();
			for (Episode episode : list) {
				if(Utils.diffirentTwoDate(episode.getCreateDate(), now)<=7){
					e.setTotalNewEpisode(e.getTotalNewEpisode()+1);
				}
				if(episode.getHitsNo()>0){
					e.setTotalSumHitNumber(e.getTotalSumHitNumber()+episode.getHitsNo());
				}
				if(episode.getPrice()>0){
					e.setTotalEpisodeCharge(e.getTotalEpisodeCharge()+1);
				}
				
			}
			e.setTotalEpisodePurchase(episodeJpaRepository.totalEpisodePurchase());
			e.setTotalNewEpisodePurchase(episodeJpaRepository.totalNewEpisodePurchase());
		} catch (Exception ex) {
			System.out.println(ex);
			
		}
		return e;
	}

	@Override
	public Page<EpisodeEntity> listPagingByBookId(Integer id,  Pageable pageable) {
		try {
			
			return episodeJpaRepository.listPagingByBookId(id, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}

	@Override
	public Page<EpisodeEntity> listPagingByBookId_Temporary_Save(Integer id, Integer page, Integer size) {
		try {
			PageRequest pageable = new PageRequest(page-1, size, new Sort(new Order(Direction.DESC, "createDate")));
			return episodeJpaRepository.listPagingByBookId_Temporary_Save(id, pageable);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	
	@Override
	public EpisodeEntity findByEpisodeNumber(Integer id, Integer bookId) {
		try {
			return episodeJpaRepository.findByEpisodeNumber(id,bookId).get(0);
		} catch (Exception e) {
			System.out.println(e);
			return null;
		}
	}
	@Override
	public void updateAferDelete_EpisodeNumber(Integer book_id,Integer number) {
		try {
			 episodeJpaRepository.updateAferDelete_EpisodeNumber( book_id, number);
		} catch (Exception e) {
			System.out.println(e);
			
		}
	}
	@Override
	public Integer totalEpisodeComplete(Integer bookid) {
		try {
			return episodeJpaRepository.totalEpisodeComplete(bookid);
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}
	@Override
	public Integer totalEpisode_ByBookId(Integer book_id) {
		try {
			return episodeJpaRepository.totalEpisode_ByBookId(book_id);
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}
	@Override
	public Integer totalEpisode_ViewNo_ByBookId(Integer bookid) {
		try {
			return episodeJpaRepository.totalEpisode_ViewNo_ByBookId(bookid);
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}
	@Override
	public Integer totalEpisode_RecomentNo_ByBookId(Integer bookid) {
		try {
			return episodeJpaRepository.totalEpisode_RecomentNo_ByBookId(bookid);
		} catch (Exception e) {
			System.out.println(e);
			return 0;
		}
	}


}
