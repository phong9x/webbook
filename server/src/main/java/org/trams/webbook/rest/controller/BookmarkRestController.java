/*
 * Created on 15 Dec 2015 ( Time 14:53:45 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.rest.controller;

import java.util.Date;
import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.trams.webbook.rest.item.ReturnObjectData;
import org.trams.webbook.bean.Bookmark;
import org.trams.webbook.bean.Episode;
import org.trams.webbook.bean.User;
import org.trams.webbook.bean.jpa.BookmarkEntity;
import org.trams.webbook.business.service.BookmarkService;
import org.trams.webbook.business.service.EpisodeService;
import org.trams.webbook.web.common.Login;
import org.trams.webbook.web.listitem.BookmarkListItem;

/**
 * Spring MVC controller for 'Bookmark' management.
 */
@Controller
public class BookmarkRestController {

	@Resource
	private BookmarkService bookmarkService;
	@Resource
	private EpisodeService episodeService;
	
	@RequestMapping( value="/api/items/bookmark",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<BookmarkListItem> findAllAsListItems() {
		List<Bookmark> list = bookmarkService.findAll();
		List<BookmarkListItem> items = new LinkedList<BookmarkListItem>();
		for ( Bookmark bookmark : list ) {
			items.add(new BookmarkListItem( bookmark ) );
		}
		return items;
	}
	
	@RequestMapping( value="/api/update_bookmark",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public org.trams.webbook.rest.item.ReturnObjectData<Object> add_bookmark(
			@RequestParam(value = "id", defaultValue = "") Integer id,
			HttpSession session
			) {
		ReturnObjectData<Object> data = new ReturnObjectData<Object>(1, "", null);
		User user=Login.getUserLogin(session);
		if(user!=null){
			try {
				Episode e = episodeService.findById(id);
				User u =Login.getUserLogin(session);
				BookmarkEntity bookmark=bookmarkService.findBy_UserId_EpisodeId(u.getId(), e.getId());
				if(bookmark!=null ){
					bookmarkService.delete(bookmark.getId());
					data = new ReturnObjectData<Object>(0, "Delete book mark!");
				}else{
					Bookmark b=new Bookmark();
					b.setCreateDate(new Date());
					b.setEpisodeId(id);
					b.setNickname(u.getNickname());
					b.setUpdateDate(new Date());
					b.setUserId(u.getId());
					b.setIsDelete(0);
					Bookmark create = bookmarkService.create(b);
					data = new ReturnObjectData<Object>(2, "Create bookmanrk");
				}
				
			} catch (Exception e) {
				System.out.println(e);
				data = new ReturnObjectData<Object>(1, "err");
			} 
		}
		
		return data;
	}

	@RequestMapping( value="/api/bookmark/{id}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Bookmark findOne(@PathVariable("id") Integer id) {
		return bookmarkService.findById(id);
	}
	
	@RequestMapping( value="/api/bookmark",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Bookmark create(@RequestBody Bookmark bookmark) {
		return bookmarkService.create(bookmark);
	}

	@RequestMapping( value="/api/bookmark/{id}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Bookmark update(@PathVariable("id") Integer id, @RequestBody Bookmark bookmark) {
		return bookmarkService.update(bookmark);
	}

	@RequestMapping( value="/api/bookmark/{id}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("id") Integer id) {
		bookmarkService.delete(id);
	}
	
}
