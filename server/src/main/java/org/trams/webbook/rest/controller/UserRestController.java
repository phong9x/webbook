/*
 * Created on 15 Dec 2015 ( Time 14:53:45 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.rest.controller;

import java.util.Date;
import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.trams.webbook.rest.item.ReturnObjectData;
import org.trams.webbook.bean.User;
import org.trams.webbook.bean.jpa.UserEntity;
import org.trams.webbook.business.service.UserService;
import org.trams.webbook.web.common.Login;
import org.trams.webbook.web.common.Utils;
import org.trams.webbook.web.listitem.UserListItem;

/**
 * Spring MVC controller for 'User' management.
 */
@Controller
public class UserRestController {

	@Resource
	private UserService userService;

	@RequestMapping(value = "api/user/check_username", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public ReturnObjectData<Object> checkUsername(
			@RequestParam(value = "username", defaultValue = "") String username) {
		ReturnObjectData<Object> data = new ReturnObjectData<Object>(1, "error", null);
		try {
			if (username != null && username.trim().length() > 2 && username.trim().length() <= 30) {
				List<UserEntity> list = userService.checkUsername(username);
				if (list.size() > 0) {
					data = new ReturnObjectData<Object>(2, "사용 중인 닉네임입니다.");
				} else {
					data = new ReturnObjectData<Object>(0, "사용 가능한 닉네임입니다.");
				}
			} else {
				data = new ReturnObjectData<Object>(1, "한글/영문 2~10자 이내로 입력해주세요.");
			}
		} catch (Exception e) {
		}
		return data;
	}

	@RequestMapping(value = "api/user/check_nickname", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public ReturnObjectData<Object> checkNickname(
			@RequestParam(value = "nickname", defaultValue = "") String nickname) {
		ReturnObjectData<Object> data = new ReturnObjectData<Object>(1, "error", null);
		try {

			if (nickname != null && nickname.trim().length() > 1 && nickname.trim().length() <= 30) {
				List<UserEntity> list = userService.checkNickname(nickname);
				if (list.size() > 0) {
					data = new ReturnObjectData<Object>(2, "사용 중인 닉네임입니다.");
				} else {
					data = new ReturnObjectData<Object>(0, "사용 가능한 닉네임입니다.");
				}
			} else {
				data = new ReturnObjectData<Object>(1, "한글/영문 2~10자 이내로 입력해주세요.");
			}
		} catch (Exception e) {
		}
		return data;
	}

	@RequestMapping(value = "api/user/reset_password", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public ReturnObjectData<Object> checkNickname(@RequestParam(value = "id", defaultValue = "0") Integer id,
			HttpSession session) {
		ReturnObjectData<Object> data = new ReturnObjectData<Object>(1, "error", null);

		
			User user = userService.findById(id);
			if (user != null) {
				try {
					
					Date date=new Date();
					String temp= Utils.getAuthPhoneCode(user.getUsername(), String.valueOf(date.getTime()));
					if (org.trams.webbook.common.mail.Utils.sendMail(user.getEmail(),temp)) {
						user.setPassword(Utils.getMD5(temp));
						user = userService.update(user);
						System.out.println("Send email to " + user.getEmail() + " successfully!");
						data = new ReturnObjectData<Object>(0, "success");
					}
				} catch (Exception e) {
					System.out.println(e);
					data = new ReturnObjectData<Object>(2, "error");
				}
			} else {
				data = new ReturnObjectData<Object>(1, "no user");
			}
		
		return data;
	}

	@RequestMapping(value = "api/update_visitor_daily", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public ReturnObjectData<Object> update_visitor_daily(@RequestParam(value = "id", defaultValue = "0") Integer id,
			HttpSession session) {
		ReturnObjectData<Object> data = new ReturnObjectData<Object>(1, "error", null);
				try {
					userService.updateVisitorDaily();
					data = new ReturnObjectData<Object>(0, "Update visior daily success!");
				} catch (Exception e) {
					System.out.println("Error:"+e);
					data = new ReturnObjectData<Object>(1, "Error");
				}
		return data;
	}

	
	@RequestMapping(value = "/api/items/user", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<UserListItem> findAllAsListItems() {
		List<User> list = userService.findAll();
		List<UserListItem> items = new LinkedList<UserListItem>();
		for (User user : list) {
			items.add(new UserListItem(user));
		}
		return items;
	}

	@RequestMapping(value = "/api/user", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<User> findAll() {
		return userService.findAll();
	}

	@RequestMapping(value = "/api/user/{id}", method = RequestMethod.GET, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public User findOne(@PathVariable("id") Integer id) {
		return userService.findById(id);
	}

	@RequestMapping(value = "/api/user", method = RequestMethod.POST, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public User create(@RequestBody User user) {
		return userService.create(user);
	}

	@RequestMapping(value = "/api/user/{id}", method = RequestMethod.PUT, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public User update(@PathVariable("id") Integer id, @RequestBody User user) {
		return userService.update(user);
	}

	@RequestMapping(value = "/api/user/{id}", method = RequestMethod.DELETE, produces = MediaType.APPLICATION_JSON_VALUE)
	@ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("id") Integer id) {
		userService.delete(id);
	}

}
