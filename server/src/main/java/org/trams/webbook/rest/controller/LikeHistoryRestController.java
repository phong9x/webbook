/*
 * Created on 30 Dec 2015 ( Time 17:28:48 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.rest.controller;

import java.util.Date;
import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.trams.webbook.bean.Book;
import org.trams.webbook.bean.Bookmark;
import org.trams.webbook.bean.Episode;
import org.trams.webbook.bean.InterestedBook;
import org.trams.webbook.bean.LikeHistory;
import org.trams.webbook.bean.User;
import org.trams.webbook.bean.jpa.InterestedBookEntity;
import org.trams.webbook.bean.jpa.LikeHistoryEntity;
import org.trams.webbook.business.service.BookService;
import org.trams.webbook.business.service.EpisodeService;
import org.trams.webbook.business.service.InterestedBookService;
import org.trams.webbook.business.service.LikeHistoryService;
import org.trams.webbook.rest.item.ReturnObjectData;
import org.trams.webbook.web.common.Login;
import org.trams.webbook.web.listitem.LikeHistoryListItem;

/**
 * Spring MVC controller for 'LikeHistory' management.
 */
@Controller
public class LikeHistoryRestController {

	@Resource
	private LikeHistoryService likeHistoryService;
	@Resource
	private BookService bookService;
	@Resource
	private EpisodeService episodeService;
	@Resource
	private InterestedBookService interestedBookService;
	@RequestMapping( value="/api/items/likeHistory",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<LikeHistoryListItem> findAllAsListItems() {
		List<LikeHistory> list = likeHistoryService.findAll();
		List<LikeHistoryListItem> items = new LinkedList<LikeHistoryListItem>();
		for ( LikeHistory likeHistory : list ) {
			items.add(new LikeHistoryListItem( likeHistory ) );
		}
		return items;
	}
	
	
	
	@RequestMapping( value="/api/update_recommendation",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public org.trams.webbook.rest.item.ReturnObjectData<Object> delete_recommendation(
			@RequestParam(value = "id", defaultValue = "") Integer id,
			HttpSession session
			) {
		ReturnObjectData<Object> data = new ReturnObjectData<Object>(1, "error", null);
		User user=Login.getUserLogin(session);
		if(user!=null){
		try {
			Episode e = episodeService.findById(id);
			User u =Login.getUserLogin(session);
			LikeHistoryEntity historyEntity= likeHistoryService.findBy_UserId_EpisodeId(u.getId(),e.getId(),2);
			Book book= bookService.findById(e.getBookId());
			if(historyEntity!=null){
				likeHistoryService.delete(historyEntity.getId());
				if(e.getRecommondationNo()>0){
					e.setRecommondationNo(e.getRecommondationNo()-1);
				}
				e.setUpdateDate(new Date());
				episodeService.update(e);
				if(book.getRecommendationWeekly()==null || book.getRecommendationWeekly()<=0){
					book.setRecommendationWeekly(0);
					}else {
						book.setRecommendationWeekly(book.getRecommendationWeekly()-1);
					}
				if(book.getRecommendationNo()==null || book.getRecommendationNo()<=0){
					book.setRecommendationNo(0);
					}else {
						Integer totalRecomment =episodeService.totalEpisode_RecomentNo_ByBookId(book.getId());
						book.setRecommendationNo(totalRecomment);
					}
				
				bookService.update(book);
				data = new ReturnObjectData<Object>(0, "추천");
			}else{
				LikeHistory b=new LikeHistory();
				b.setCreateDate(new Date());
				b.setEpisodeId(id);
				b.setUpdateDate(new Date());
				b.setUserId(u.getId());
				b.setType(2);
				b.setTypeName("recommondation");
				if(e.getRecommondationNo()==null || e.getRecommondationNo()<=0){
					e.setRecommondationNo(1);
				}else{
					e.setRecommondationNo(e.getRecommondationNo()+1);
				}
				e.setUpdateDate(new Date());
				episodeService.update(e);
				if(book.getRecommendationNo()==null || book.getRecommendationNo()<=0){
					book.setRecommendationNo(1);
					}else {
						Integer totalRecomment =episodeService.totalEpisode_RecomentNo_ByBookId(book.getId());
						book.setRecommendationNo(totalRecomment);
						
					}
				
				bookService.update(book);
				likeHistoryService.create(b);
				data = new ReturnObjectData<Object>(0, "추천 취소");
			}
			
		} catch (Exception e) {
			data = new ReturnObjectData<Object>(2, "Error:" +e);
		} 
		}
		return data;
	}
	

	
	
	@RequestMapping( value="/api/update_interested",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public org.trams.webbook.rest.item.ReturnObjectData<Object> add_interested(
			@RequestParam(value = "id", defaultValue = "") Integer id,
			HttpSession session
			) {
		ReturnObjectData<Object> data = new ReturnObjectData<Object>(1, "", null);
		User user=Login.getUserLogin(session);
		if(user!=null){
			try {
				Episode e = episodeService.findById(id);
				User u =Login.getUserLogin(session);
				InterestedBook b = null;
				List<InterestedBookEntity> enterested = interestedBookService.findBy_UserId_BookId(u.getId(), e.getBookId());
				Book book = bookService.findById(e.getBookId());
				if(enterested != null && enterested.size() > 0){
					for (InterestedBookEntity interestedBookEntity : enterested) {
						interestedBookService.delete(interestedBookEntity.getId());
						
					}
					//e.setRecommondationNo(e.getRecommondationNo()-1);
					
					e.setUpdateDate(new Date());
					episodeService.update(e);
					if(book.getInterestedWeekly()>0){
						book.setInterestedWeekly(book.getInterestedWeekly()-1);
					}
					Integer total = interestedBookService.totalInterrestBook_ByBookId(book.getId());
					book.setInterestedBookNo(total);
					bookService.update(book);
					data = new ReturnObjectData<Object>(0, "관심작 등록");
					
					
				}else{
					b = new InterestedBook();
					b.setCreateDate(new Date());
					b.setEpisodeId(id);
					b.setUpdateDate(new Date());
					b.setUserId(u.getId());
					b.setIsDelete(0);
					b.setId(0);
					b.setBookId(e.getBookId());
					b.setNickname(u.getNickname());
					b.setType("interrest");
					InterestedBook create = interestedBookService.create(b);
					e.setUpdateDate(new Date());
					episodeService.update(e);
					book.setInterestedWeekly(book.getInterestedWeekly()+1);
					book.setInterestedBookNo(book.getInterestedBookNo()+1);
					bookService.update(book);
					data = new ReturnObjectData<Object>(2, "관심작품 취소");
					
				}
				
				
			} catch (Exception e) {
				System.out.println(e);
				data = new ReturnObjectData<Object>(1, "Error:"+e);
			} 
		}

		return data;
	}

	@RequestMapping( value="/api/likeHistory/{id}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public LikeHistory findOne(@PathVariable("id") Integer id) {
		return likeHistoryService.findById(id);
	}
	
	@RequestMapping( value="/api/likeHistory",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public LikeHistory create(@RequestBody LikeHistory likeHistory) {
		return likeHistoryService.create(likeHistory);
	}

	@RequestMapping( value="/api/likeHistory/{id}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public LikeHistory update(@PathVariable("id") Integer id, @RequestBody LikeHistory likeHistory) {
		return likeHistoryService.update(likeHistory);
	}

	@RequestMapping( value="/api/likeHistory/{id}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("id") Integer id) {
		likeHistoryService.delete(id);
	}
	
}
