/*
 * Created on 15 Dec 2015 ( Time 14:53:45 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.rest.controller;

import java.text.SimpleDateFormat;
import java.util.Date;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.apache.commons.lang3.StringEscapeUtils;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.trams.webbook.bean.Comment;
import org.trams.webbook.bean.Episode;
import org.trams.webbook.bean.User;
import org.trams.webbook.business.service.CommentService;
import org.trams.webbook.business.service.EpisodeService;
import org.trams.webbook.rest.common.ReturnValue;
import org.trams.webbook.rest.item.ReturnObjectData;
import org.trams.webbook.web.common.ApplicationDefine;
import org.trams.webbook.web.common.Login;

/**
 * Spring MVC controller for 'Comment' management.
 */
@Controller
public class CommentRestController {

	@Resource
	private CommentService commentService;
	@Resource
	private EpisodeService episodeService;
	
	
	@RequestMapping( value="/api/edit_comment",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public ReturnValue create(@RequestBody String p,HttpSession session) {
		
		ReturnValue rv = new ReturnValue();
		
		try {
			
			User user = Login.getUserLogin(session);
			if(user != null){
				
			  	JSONObject jsonObj = (JSONObject) new JSONParser().parse(p);
			  	Integer edit_id = org.trams.webbook.web.common.Utils.parseInt(jsonObj.get("edit_id"));
			  	String comment = org.trams.webbook.web.common.Utils.toString(jsonObj.get("comment"));
				
				Comment commentObj = commentService.findById(edit_id);
				
				if(commentObj != null && comment != null){
					String unecomment = StringEscapeUtils.unescapeHtml4(comment);
					String ecomment = StringEscapeUtils.escapeHtml4(unecomment);
					commentObj.setComment(ecomment);
					Comment update = commentService.update(commentObj);
					if(update != null){
						rv.ReturningString("success", 1);
					}else{
						rv.ReturningString("error", -1);
					}
					
				}else{
					rv.ReturningString("comment not found", -2);
				}
				
			}else{
				rv.ReturningString("로그인이 필요한 기능입니다. 마이페이지에서 로그인 해주세요.", -1);
			}
			
		} catch (Exception e) {
		}
		
		return rv;
	}
	
	
	@RequestMapping( value="/api/create_comment",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public org.trams.webbook.rest.item.ReturnObjectData<Object> add_interested(
			@RequestParam(value = "id", defaultValue = "") Integer id,
			@RequestParam(value = "content", defaultValue = "") String content,
			HttpSession session
			) {
		ReturnObjectData<Object> data = new ReturnObjectData<Object>(1, "error", null);
		try {
			Episode episode = episodeService.findById(id);
			User user =Login.getUserLogin(session);
			if(content!=null &&content.trim()!=""){
				Comment c = new Comment();
				c.setComment(content);
				c.setCreateDate(new Date());
				c.setIsDelete(0);
				c.setParentId(episode.getId());
				c.setReportNumber(0);
				c.setTypeKey(ApplicationDefine.COMMENT_EPISODE_TYPE);
				c.setUpdateDate(new Date());
				c.setUserId(user.getId());
				c=commentService.create(c);
				if(episode.getReviewNo()==null || episode.getReviewNo()<=0){
					episode.setReviewNo(1);
				}else{
					episode.setReviewNo(episode.getReviewNo()+1);
				}
				SimpleDateFormat sdfr = new SimpleDateFormat("yyyy.MM.dd HH:mm");
				c.setTypeKey(sdfr.format( c.getCreateDate() ));
				episodeService.update(episode);
				data = new ReturnObjectData<Object>(0, user.getUsername(),c);
			}else{
				data = new ReturnObjectData<Object>(1, "Not Content:");
			}
			
			
		} catch (Exception e) {
			System.out.println(e);
			data = new ReturnObjectData<Object>(2, "Error:"+e);
		} 
		return data;
	}

	@RequestMapping( value="/api/delete_comment",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public org.trams.webbook.rest.item.ReturnObjectData<Object> delete_interested(
			@RequestParam(value = "comment_id", defaultValue = "") Integer comment_id,
			@RequestParam(value = "episode_id", defaultValue = "") Integer episode_id,
			HttpSession session
			) {
		ReturnObjectData<Object> data = new ReturnObjectData<Object>(1, "error", null);
		try {
				User user =Login.getUserLogin(session);
				Episode episode = episodeService.findById(episode_id);
				Comment comment =commentService.findById(comment_id);
				comment.setIsDelete(1);
				commentService.update(comment);
				if(episode.getReviewNo()==null || episode.getReviewNo()<=0){
					episode.setReviewNo(0);
				}else{
					episode.setReviewNo(episode.getReviewNo()-1);
				}
				episodeService.update(episode);
				data = new ReturnObjectData<Object>(0, "Delete sucess");
			
		} catch (Exception e) {
			System.out.println(e);
			data = new ReturnObjectData<Object>(2, "Error:"+e);
		} 
		return data;
	}
 
}
