/*
 * Created on 15 Dec 2015 ( Time 14:53:45 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.rest.controller;

import java.util.Date;
import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.trams.webbook.bean.Book;
import org.trams.webbook.bean.Comment;
import org.trams.webbook.bean.Episode;
import org.trams.webbook.bean.InterestedBook;
import org.trams.webbook.bean.User;
import org.trams.webbook.bean.jpa.InterestedBookEntity;
import org.trams.webbook.business.service.EpisodeService;
import org.trams.webbook.rest.item.ReturnObjectData;
import org.trams.webbook.web.common.ApplicationDefine;
import org.trams.webbook.web.common.Login;
import org.trams.webbook.web.listitem.EpisodeListItem;

/**
 * Spring MVC controller for 'Episode' management.
 */
@Controller
public class EpisodeRestController {

	@Resource
	private EpisodeService episodeService;
	
	@RequestMapping( value="/api/items/episode",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<EpisodeListItem> findAllAsListItems() {
		List<Episode> list = episodeService.findAll();
		List<EpisodeListItem> items = new LinkedList<EpisodeListItem>();
		for ( Episode episode : list ) {
			items.add(new EpisodeListItem( episode ) );
		}
		return items;
	}
	
	
	
	
	
	@RequestMapping( value="/api/episode",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<Episode> findAll() {
		return episodeService.findAll();
	}

	@RequestMapping( value="/api/episode/{id}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Episode findOne(@PathVariable("id") Integer id) {
		return episodeService.findById(id);
	}
	
	@RequestMapping( value="/api/episode",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Episode create(@RequestBody Episode episode) {
		return episodeService.create(episode);
	}

	@RequestMapping( value="/api/episode/{id}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Episode update(@PathVariable("id") Integer id, @RequestBody Episode episode) {
		return episodeService.update(episode);
	}

	@RequestMapping( value="/api/episode/{id}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("id") Integer id) {
		episodeService.delete(id);
	}
	
}
