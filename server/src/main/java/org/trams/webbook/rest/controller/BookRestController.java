/*
 * Created on 15 Dec 2015 ( Time 14:53:45 )
 * Generated by Telosys Tools Generator ( version 2.1.1 )
 */
package org.trams.webbook.rest.controller;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;

import javax.annotation.Resource;
import javax.servlet.http.HttpSession;

import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.ResponseStatus;
import org.trams.webbook.bean.Book;
import org.trams.webbook.bean.CouponUsed;
import org.trams.webbook.bean.InterestedBook;
import org.trams.webbook.bean.Report;
import org.trams.webbook.bean.jpa.BookEntity;
import org.trams.webbook.bean.jpa.BookViewingEntity;
import org.trams.webbook.bean.jpa.CouponUsedEntity;
import org.trams.webbook.bean.jpa.InterestedBookEntity;
import org.trams.webbook.bean.jpa.ReportEntity;
import org.trams.webbook.business.service.BookService;
import org.trams.webbook.business.service.BookViewingService;
import org.trams.webbook.business.service.CouponUsedService;
import org.trams.webbook.business.service.InterestedBookService;
import org.trams.webbook.rest.item.ReturnObjectData;
import org.trams.webbook.web.common.Utils;
import org.trams.webbook.web.listitem.BookListItem;

/**
 * Spring MVC controller for 'Book' management.
 */
@Controller
public class BookRestController {

	@Resource
	private BookService bookService;
	
	@Resource
	private InterestedBookService interestedBookService;
	
	@Resource
	private BookViewingService bookViewingService;
	
	@RequestMapping( value="/api/items/book",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<BookListItem> findAllAsListItems() {
		List<Book> list = bookService.findAll();
		List<BookListItem> items = new LinkedList<BookListItem>();
		for ( Book book : list ) {
			items.add(new BookListItem( book ) );
		}
		return items;
	}
	
	@RequestMapping( value="api/update_book_weekly",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public org.trams.webbook.rest.item.ReturnObjectData<Object> add_bookmark(
			HttpSession session
			) {
		ReturnObjectData<Object> data = new ReturnObjectData<Object>(1, "", null);
		try {
				bookService.update_Weekly_Book();
				data = new ReturnObjectData<Object>(0, "Sucess update book weekly!");
		} catch (Exception e) {
			data = new ReturnObjectData<Object>(1, "Error:"+e);
			System.out.println(e);
		} 
		return data;
	}
	

	@RequestMapping( value="/api/book_info",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public org.trams.webbook.rest.item.ReturnObjectData<Object> add_bookmark(
			@RequestParam(value = "id", defaultValue = "") Integer id,
			HttpSession session
			) {
		ReturnObjectData<Object> data = new ReturnObjectData<Object>(1, "error", null);
		try {
				List<BookEntity>list_report=bookService.listMyBoook(id, 1, 1000).getContent();
				if(list_report.size() > 0){
					List<Book> list =new ArrayList<>();
					for (BookEntity bookEntity : list_report) {
						Book r=new Book();
						r.setTitle(bookEntity.getTitle());
						r.setEpisodeNumber(bookEntity.getEpisodeNumber());
						r.setCreateDate(bookEntity.getCreateDate());
						DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
						String date = df.format(bookEntity.getCreateDate());
						r.setAgeGroupName(date);
						list.add(r);
					}
					data = new ReturnObjectData<Object>(0, "Success",list);
				}else{
					data = new ReturnObjectData<Object>(1, "No");
				}
		} catch (Exception e) {
			data = new ReturnObjectData<Object>(1, "Error");
			System.out.println(e);
		} 
		return data;
	}
	
	@RequestMapping( value="/api/viewbook",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public org.trams.webbook.rest.item.ReturnObjectData<Object> bookviewing(
			@RequestParam(value = "id", defaultValue = "") Integer id,
			HttpSession session
			) {
		ReturnObjectData<Object> data = new ReturnObjectData<Object>(1, "error", null);
		try {
				List<BookViewingEntity>list_report=bookViewingService.findBy_UserId(id);
				if(list_report.size()>0){
					List<Book> list =new ArrayList<>();
					for (BookViewingEntity bookviewingEntity : list_report) {
						Book r=new Book();
						r.setTitle(bookviewingEntity.getBook().getTitle());
						r.setEpisodeNumber(bookviewingEntity.getBook().getEpisodeNumber());
						r.setCreateDate(bookviewingEntity.getCreateDate());
						DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
						String date = df.format(bookviewingEntity.getCreateDate());
						r.setAgeGroupName(date);
						list.add(r);
					}
					data = new ReturnObjectData<Object>(0, "Success",list);
				}else{
					data = new ReturnObjectData<Object>(1, "No");
				}
		} catch (Exception e) {
			data = new ReturnObjectData<Object>(1, "Error");
			System.out.println(e);
		} 
		return data;
	}
	
	@RequestMapping( value="/api/interestbook",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public org.trams.webbook.rest.item.ReturnObjectData<Object> interestbook(
			@RequestParam(value = "id", defaultValue = "") Integer id,
			HttpSession session
			) {
		ReturnObjectData<Object> data = new ReturnObjectData<Object>(1, "error", null);
		try {
				List<InterestedBookEntity>list_report=interestedBookService.findBy_UserId(id);
				if(list_report.size()>0){
					List<Book> list =new ArrayList<>();
					for (InterestedBookEntity interestedEntity : list_report) {
						Book r=new Book();
						r.setTitle(interestedEntity.getBook().getTitle());
						r.setEpisodeNumber(interestedEntity.getBook().getEpisodeNumber());
						r.setCreateDate(interestedEntity.getCreateDate());
						DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
						String date = df.format(interestedEntity.getCreateDate());
						r.setAgeGroupName(date);
						list.add(r);
					}
					data = new ReturnObjectData<Object>(0, "Success",list);
				}else{
					data = new ReturnObjectData<Object>(1, "No");
				}
			
		} catch (Exception e) {
			data = new ReturnObjectData<Object>(1, "Error");
			System.out.println(e);
		} 
		return data;
	}
	
	
	
	
	@RequestMapping( value="/api/book",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public List<Book> findAll() {
		return bookService.findAll();
	}

	@RequestMapping( value="/api/book/{id}",
			method = RequestMethod.GET,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Book findOne(@PathVariable("id") Integer id) {
		return bookService.findById(id);
	}
	
	@RequestMapping( value="/api/book",
			method = RequestMethod.POST,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Book create(@RequestBody Book book) {
		return bookService.create(book);
	}

	@RequestMapping( value="/api/book/{id}",
			method = RequestMethod.PUT,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public Book update(@PathVariable("id") Integer id, @RequestBody Book book) {
		return bookService.update(book);
	}

	@RequestMapping( value="/api/book/{id}",
			method = RequestMethod.DELETE,
			produces = MediaType.APPLICATION_JSON_VALUE)
    @ResponseStatus(HttpStatus.OK)
	@ResponseBody
	public void delete(@PathVariable("id") Integer id) {
		bookService.delete(id);
	}
	
}
